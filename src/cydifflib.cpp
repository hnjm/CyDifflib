/* Generated by Cython 3.0.0a9 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0_0a9"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000A9
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS 1
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030800B2
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#elif PY_VERSION_HEX >= 0x030800A4
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cydifflib
#define __PYX_HAVE_API__cydifflib
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <algorithm>
#include <string.h>
#include <stdlib.h>
#include <unordered_map>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "cydifflib.pyx",
  "stringsource",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_9cydifflib_SequenceMatcher;
struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes;
struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio;
struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr;
struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws;
struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr;
struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare;
struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump;
struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace;
struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace;
struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper;
struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat;
struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff;
struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff;
struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr;
struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr;
struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes;
struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff;
struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator;
struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator;
struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace;
struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper;
struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore;
struct __pyx_t_9cydifflib_MatchingBlockQueueElem;
typedef struct __pyx_t_9cydifflib_MatchingBlockQueueElem __pyx_t_9cydifflib_MatchingBlockQueueElem;
struct __pyx_t_9cydifflib_CMatch;
typedef struct __pyx_t_9cydifflib_CMatch __pyx_t_9cydifflib_CMatch;
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;
struct __pyx_defaults2;
typedef struct __pyx_defaults2 __pyx_defaults2;
struct __pyx_defaults3;
typedef struct __pyx_defaults3 __pyx_defaults3;
struct __pyx_defaults4;
typedef struct __pyx_defaults4 __pyx_defaults4;
struct __pyx_defaults5;
typedef struct __pyx_defaults5 __pyx_defaults5;

/* "cydifflib.pyx":67
 *     return 1.0
 * 
 * ctypedef struct MatchingBlockQueueElem:             # <<<<<<<<<<<<<<
 *     Py_ssize_t alo
 *     Py_ssize_t ahi
 */
struct __pyx_t_9cydifflib_MatchingBlockQueueElem {
  Py_ssize_t alo;
  Py_ssize_t ahi;
  Py_ssize_t blo;
  Py_ssize_t bhi;
};

/* "cydifflib.pyx":73
 *     Py_ssize_t bhi
 * 
 * ctypedef struct CMatch:             # <<<<<<<<<<<<<<
 *     Py_ssize_t a
 *     Py_ssize_t b
 */
struct __pyx_t_9cydifflib_CMatch {
  Py_ssize_t a;
  Py_ssize_t b;
  Py_ssize_t size;
};
struct __pyx_defaults {
  PyObject *__pyx_arg_pat;
};
struct __pyx_defaults1 {
  PyObject *__pyx_arg_charjunk;
};
struct __pyx_defaults2 {
  PyObject *__pyx_arg_charjunk;
};
struct __pyx_defaults3 {
  PyObject *__pyx_arg_charjunk;
};
struct __pyx_defaults4 {
  PyObject *__pyx_arg_num_lines;
};
struct __pyx_defaults5 {
  PyObject *__pyx_arg_sub_info;
};

/* "cydifflib.pyx":85
 *     return lhs.size < rhs.size
 * 
 * cdef class SequenceMatcher:             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_9cydifflib_SequenceMatcher {
  PyObject_HEAD
  struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *__pyx_vtab;
  PyObject *a;
  PyObject *b;
  PyObject *b2j;
  PyObject *fullbcount;
  PyObject *matching_blocks;
  PyObject *opcodes;
  PyObject *isjunk;
  PyObject *bjunk;
  PyObject *bpopular;
  PyObject *autojunk;
  std::vector<Py_ssize_t>  j2len_;
  Py_hash_t *a_;
  Py_ssize_t la;
  Py_hash_t *b_;
  Py_ssize_t lb;
};


/* "cydifflib.pyx":680
 *         return answer
 * 
 *     def get_grouped_opcodes(self, n=3):             # <<<<<<<<<<<<<<
 *         """ Isolate change clusters by eliminating ranges with no changes.
 * 
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes {
  PyObject_HEAD
  PyObject *__pyx_v_codes;
  PyObject *__pyx_v_group;
  PyObject *__pyx_v_i1;
  PyObject *__pyx_v_i2;
  PyObject *__pyx_v_j1;
  PyObject *__pyx_v_j2;
  PyObject *__pyx_v_n;
  PyObject *__pyx_v_nn;
  struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self;
  PyObject *__pyx_v_tag;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cydifflib.pyx":730
 *             yield group
 * 
 *     def ratio(self):             # <<<<<<<<<<<<<<
 *         """Return a measure of the sequences' similarity (float in [0,1]).
 * 
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio {
  PyObject_HEAD
  struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self;
};


/* "cydifflib.pyx":752
 *         """
 * 
 *         matches = sum(triple[-1] for triple in self.get_matching_blocks())             # <<<<<<<<<<<<<<
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *__pyx_outer_scope;
  PyObject *__pyx_v_triple;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cydifflib.pyx":848
 * 
 * 
 * def _keep_original_ws(s, tag_s):             # <<<<<<<<<<<<<<
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws {
  PyObject_HEAD
  PyObject *__pyx_v_s;
  PyObject *__pyx_v_tag_s;
};


/* "cydifflib.pyx":851
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 *         c if tag_c == " " and c.isspace() else tag_c             # <<<<<<<<<<<<<<
 *         for c, tag_c in zip(s, tag_s)
 *     )
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *__pyx_outer_scope;
  PyObject *__pyx_v_c;
  PyObject *__pyx_v_tag_c;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cydifflib.pyx":974
 *         self.charjunk = charjunk
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         r"""
 *         Compare two sequences of lines; generate the resulting delta.
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare {
  PyObject_HEAD
  PyObject *__pyx_v_a;
  PyObject *__pyx_v_ahi;
  PyObject *__pyx_v_alo;
  PyObject *__pyx_v_b;
  PyObject *__pyx_v_bhi;
  PyObject *__pyx_v_blo;
  struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_cruncher;
  PyObject *__pyx_v_g;
  PyObject *__pyx_v_self;
  PyObject *__pyx_v_tag;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cydifflib.pyx":1015
 *             yield from g
 * 
 *     def _dump(self, tag, x, lo, hi):             # <<<<<<<<<<<<<<
 *         """Generate comparison results for a same-tagged range."""
 *         for i in range(lo, hi):
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump {
  PyObject_HEAD
  PyObject *__pyx_v_hi;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_lo;
  PyObject *__pyx_v_self;
  PyObject *__pyx_v_tag;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cydifflib.pyx":1020
 *             yield '%s %s' % (tag, x[i])
 * 
 *     def _plain_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         assert alo < ahi and blo < bhi
 *         # dump the shorter block first -- reduces the burden on short-term
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace {
  PyObject_HEAD
  PyObject *__pyx_v_a;
  PyObject *__pyx_v_ahi;
  PyObject *__pyx_v_alo;
  PyObject *__pyx_v_b;
  PyObject *__pyx_v_bhi;
  PyObject *__pyx_v_blo;
  PyObject *__pyx_v_first;
  PyObject *__pyx_v_g;
  PyObject *__pyx_v_second;
  PyObject *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "cydifflib.pyx":1034
 *             yield from g
 * 
 *     def _fancy_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         r"""
 *         When replacing one block of lines with another, search the blocks
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace {
  PyObject_HEAD
  PyObject *__pyx_v_a;
  PyObject *__pyx_v_aelt;
  PyObject *__pyx_v_ahi;
  PyObject *__pyx_v_ai;
  PyObject *__pyx_v_ai1;
  PyObject *__pyx_v_ai2;
  PyObject *__pyx_v_alo;
  PyObject *__pyx_v_atags;
  PyObject *__pyx_v_b;
  PyObject *__pyx_v_belt;
  PyObject *__pyx_v_best_i;
  PyObject *__pyx_v_best_j;
  PyObject *__pyx_v_best_ratio;
  PyObject *__pyx_v_bhi;
  PyObject *__pyx_v_bj;
  PyObject *__pyx_v_bj1;
  PyObject *__pyx_v_bj2;
  PyObject *__pyx_v_blo;
  PyObject *__pyx_v_btags;
  struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_cruncher;
  double __pyx_v_cutoff;
  PyObject *__pyx_v_eqi;
  PyObject *__pyx_v_eqj;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_j;
  PyObject *__pyx_v_la;
  PyObject *__pyx_v_lb;
  PyObject *__pyx_v_self;
  PyObject *__pyx_v_tag;
};


/* "cydifflib.pyx":1128
 *         yield from self._fancy_helper(a, best_i+1, ahi, b, best_j+1, bhi)
 * 
 *     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         g = []
 *         if alo < ahi:
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper {
  PyObject_HEAD
  PyObject *__pyx_v_a;
  PyObject *__pyx_v_ahi;
  PyObject *__pyx_v_alo;
  PyObject *__pyx_v_b;
  PyObject *__pyx_v_bhi;
  PyObject *__pyx_v_blo;
  PyObject *__pyx_v_g;
  PyObject *__pyx_v_self;
};


/* "cydifflib.pyx":1140
 *         yield from g
 * 
 *     def _qformat(self, aline, bline, atags, btags):             # <<<<<<<<<<<<<<
 *         r"""
 *         Format "?" output and deal with tabs.
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat {
  PyObject_HEAD
  PyObject *__pyx_v_aline;
  PyObject *__pyx_v_atags;
  PyObject *__pyx_v_bline;
  PyObject *__pyx_v_btags;
  PyObject *__pyx_v_self;
};


/* "cydifflib.pyx":1236
 *     return '{},{}'.format(beginning, length)
 * 
 * def unified_diff(a, b, fromfile='', tofile='', fromfiledate='',             # <<<<<<<<<<<<<<
 *                  tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff {
  PyObject_HEAD
  PyObject *__pyx_v_a;
  PyObject *__pyx_v_b;
  PyObject *__pyx_v_file1_range;
  PyObject *__pyx_v_file2_range;
  PyObject *__pyx_v_first;
  PyObject *__pyx_v_fromdate;
  PyObject *__pyx_v_fromfile;
  PyObject *__pyx_v_fromfiledate;
  PyObject *__pyx_v_group;
  PyObject *__pyx_v_i1;
  PyObject *__pyx_v_i2;
  PyObject *__pyx_v_j1;
  PyObject *__pyx_v_j2;
  PyObject *__pyx_v_last;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_lineterm;
  PyObject *__pyx_v_n;
  int __pyx_v_started;
  PyObject *__pyx_v_tag;
  PyObject *__pyx_v_todate;
  PyObject *__pyx_v_tofile;
  PyObject *__pyx_v_tofiledate;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
  PyObject *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
};


/* "cydifflib.pyx":1321
 * 
 * # See http://www.unix.org/single_unix_specification/
 * def context_diff(a, b, fromfile='', tofile='',             # <<<<<<<<<<<<<<
 *                  fromfiledate='', tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff {
  PyObject_HEAD
  PyObject *__pyx_v__;
  PyObject *__pyx_v_a;
  PyObject *__pyx_v_b;
  PyObject *__pyx_v_file1_range;
  PyObject *__pyx_v_file2_range;
  PyObject *__pyx_v_first;
  PyObject *__pyx_v_fromdate;
  PyObject *__pyx_v_fromfile;
  PyObject *__pyx_v_fromfiledate;
  PyObject *__pyx_v_genexpr;
  PyObject *__pyx_v_group;
  PyObject *__pyx_v_i1;
  PyObject *__pyx_v_i2;
  PyObject *__pyx_v_j1;
  PyObject *__pyx_v_j2;
  PyObject *__pyx_v_last;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_lineterm;
  PyObject *__pyx_v_n;
  PyObject *__pyx_v_prefix;
  int __pyx_v_started;
  PyObject *__pyx_v_tag;
  PyObject *__pyx_v_todate;
  PyObject *__pyx_v_tofile;
  PyObject *__pyx_v_tofiledate;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
  PyObject *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
};


/* "cydifflib.pyx":1382
 *         yield '*** {} ****{}'.format(file1_range, lineterm)
 * 
 *         if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):             # <<<<<<<<<<<<<<
 *             for tag, i1, i2, _, _ in group:
 *                 if tag != 'insert':
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *__pyx_outer_scope;
  PyObject *__pyx_v__;
  PyObject *__pyx_v_tag;
};


/* "cydifflib.pyx":1391
 *         yield '--- {} ----{}'.format(file2_range, lineterm)
 * 
 *         if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):             # <<<<<<<<<<<<<<
 *             for tag, _, _, j1, j2 in group:
 *                 if tag != 'delete':
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *__pyx_outer_scope;
  PyObject *__pyx_v__;
  PyObject *__pyx_v_tag;
};


/* "cydifflib.pyx":1414
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 * 
 * def diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'',             # <<<<<<<<<<<<<<
 *                fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n'):
 *     r"""
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes {
  PyObject_HEAD
  PyObject *__pyx_v_a;
  PyObject *__pyx_v_b;
  PyObject *__pyx_v_decode;
  PyObject *__pyx_v_dfunc;
  PyObject *__pyx_v_fromfile;
  PyObject *__pyx_v_fromfiledate;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_lines;
  PyObject *__pyx_v_lineterm;
  PyObject *__pyx_v_n;
  PyObject *__pyx_v_tofile;
  PyObject *__pyx_v_tofiledate;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cydifflib.pyx":1481
 *     return Differ(linejunk, charjunk).compare(a, b)
 * 
 * def _mdiff(fromlines, tolines, context=None, linejunk=None,             # <<<<<<<<<<<<<<
 *            charjunk=IS_CHARACTER_JUNK):
 *     r"""Returns generator yielding marked up from/to side by side differences.
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff {
  PyObject_HEAD
  PyObject *__pyx_v__line_iterator;
  PyObject *__pyx_v__line_pair_iterator;
  PyObject *__pyx_v__make_line;
  PyObject *__pyx_v_change_re;
  PyObject *__pyx_v_charjunk;
  PyObject *__pyx_v_context;
  PyObject *__pyx_v_contextLines;
  PyObject *__pyx_v_diff_lines_iterator;
  PyObject *__pyx_v_found_diff;
  PyObject *__pyx_v_from_line;
  PyObject *__pyx_v_fromlines;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_index;
  PyObject *__pyx_v_line_pair_iterator;
  PyObject *__pyx_v_linejunk;
  PyObject *__pyx_v_lines_to_write;
  PyObject *__pyx_v_re;
  PyObject *__pyx_v_to_line;
  PyObject *__pyx_v_tolines;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "cydifflib.pyx":1579
 *         return (num_lines[side],text)
 * 
 *     def _line_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator {
  PyObject_HEAD
  struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *__pyx_outer_scope;
  PyObject *__pyx_v_from_line;
  PyObject *__pyx_8genexpr5__pyx_v_line;
  PyObject *__pyx_v_lines;
  PyObject *__pyx_v_num_blanks_pending;
  PyObject *__pyx_v_num_blanks_to_yield;
  PyObject *__pyx_v_s;
  PyObject *__pyx_v_to_line;
};


/* "cydifflib.pyx":1667
 *                 yield from_line,to_line,True
 * 
 *     def _line_pair_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator {
  PyObject_HEAD
  struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *__pyx_outer_scope;
  PyObject *__pyx_v_found_diff;
  PyObject *__pyx_v_fromDiff;
  PyObject *__pyx_v_from_line;
  PyObject *__pyx_v_fromlines;
  PyObject *__pyx_v_line_iterator;
  PyObject *__pyx_v_to_diff;
  PyObject *__pyx_v_to_line;
  PyObject *__pyx_v_tolines;
};


/* "cydifflib.pyx":1873
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)
 * 
 *     def _tab_newline_replace(self,fromlines,tolines):             # <<<<<<<<<<<<<<
 *         """Returns from/to line lists with tabs expanded and newlines removed.
 * 
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "cydifflib.pyx":1951
 *         self._split_line(data_list,'>',line2)
 * 
 *     def _line_wrapper(self,diffs):             # <<<<<<<<<<<<<<
 *         """Returns iterator that splits (wraps) mdiff text lines"""
 * 
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper {
  PyObject_HEAD
  PyObject *__pyx_v_diffs;
  PyObject *__pyx_v_flag;
  PyObject *__pyx_v_fromdata;
  PyObject *__pyx_v_fromline;
  PyObject *__pyx_v_fromlist;
  PyObject *__pyx_v_fromtext;
  PyObject *__pyx_v_self;
  PyObject *__pyx_v_todata;
  PyObject *__pyx_v_toline;
  PyObject *__pyx_v_tolist;
  PyObject *__pyx_v_totext;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cydifflib.pyx":2160
 * del re
 * 
 * def restore(delta, which):             # <<<<<<<<<<<<<<
 *     r"""
 *     Generate one of the two sequences that generated a delta.
 */
struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore {
  PyObject_HEAD
  Py_ssize_t __pyx_v__which;
  PyObject *__pyx_v_delta;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_prefixes;
  PyObject *__pyx_v_tag;
  PyObject *__pyx_v_which;
  Py_ssize_t __pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "cydifflib.pyx":85
 *     return lhs.size < rhs.size
 * 
 * cdef class SequenceMatcher:             # <<<<<<<<<<<<<<
 * 
 *     """
 */

struct __pyx_vtabstruct_9cydifflib_SequenceMatcher {
  PyObject *(*set_seqs)(struct __pyx_obj_9cydifflib_SequenceMatcher *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*set_seq1)(struct __pyx_obj_9cydifflib_SequenceMatcher *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*set_seq2)(struct __pyx_obj_9cydifflib_SequenceMatcher *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_SequenceMatcher__chain_b)(struct __pyx_obj_9cydifflib_SequenceMatcher *);
  __pyx_t_9cydifflib_CMatch (*_SequenceMatcher__find_longest_match)(struct __pyx_obj_9cydifflib_SequenceMatcher *, Py_ssize_t, Py_ssize_t, Py_ssize_t, Py_ssize_t);
  PyObject *(*get_matching_blocks)(struct __pyx_obj_9cydifflib_SequenceMatcher *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *__pyx_vtabptr_9cydifflib_SequenceMatcher;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_FloorDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceFloorDivide(op1, op2) : PyNumber_FloorDivide(op1, op2))
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* RaiseClosureNameError.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);

/* GeneratorYieldFrom.proto */
static CYTHON_INLINE PyObject* __Pyx_Generator_Yield_From(__pyx_CoroutineObject *gen, PyObject *source);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* pop_index.proto */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix);
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix);
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (likely(PyList_CheckExact(L) && __Pyx_fits_Py_ssize_t(ix, type, is_signed))) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    __Pyx_fits_Py_ssize_t(ix, type, is_signed) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#else
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)\
    __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
        __Pyx__PyObject_PopIndex(L, py_ix))
#endif

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_MultiplyObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* StrConcatInPlace.proto */
#if PY_MAJOR_VERSION >= 3
    #define __Pyx_PyStr_Concat __Pyx_PyUnicode_Concat
    #define __Pyx_PyStr_ConcatInPlace __Pyx_PyUnicode_ConcatInPlace
#else
    #define __Pyx_PyStr_Concat PyNumber_Add
    #define __Pyx_PyStr_ConcatInPlace PyNumber_InPlaceAdd
#endif
#define __Pyx_PyStr_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
    PyNumber_Add(a, b) : __Pyx_PyStr_Concat(a, b))
#define __Pyx_PyStr_ConcatInPlaceSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
    PyNumber_InPlaceAdd(a, b) : __Pyx_PyStr_ConcatInPlace(a, b))

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* Py3UpdateBases.proto */
static PyObject* __Pyx_PEP560_update_bases(PyObject *bases);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static PyObject *__pyx_f_9cydifflib_15SequenceMatcher_set_seqs(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9cydifflib_15SequenceMatcher_set_seq1(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_a, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9cydifflib_15SequenceMatcher_set_seq2(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_b, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9cydifflib_15SequenceMatcher__SequenceMatcher__chain_b(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self); /* proto*/
static __pyx_t_9cydifflib_CMatch __pyx_f_9cydifflib_15SequenceMatcher__SequenceMatcher__find_longest_match(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, Py_ssize_t __pyx_v_alo, Py_ssize_t __pyx_v_ahi, Py_ssize_t __pyx_v_blo, Py_ssize_t __pyx_v_bhi); /* proto*/
static PyObject *__pyx_f_9cydifflib_15SequenceMatcher_get_matching_blocks(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from "cython" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.vector" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.utility" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.algorithm" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libc.stdlib" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.unordered_map" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cydifflib" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_9cydifflib_SequenceMatcher = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_5_compare = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_6__dump = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper = 0;
static PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_21_restore = 0;
#endif
static double __pyx_f_9cydifflib__calculate_ratio(Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_f_9cydifflib_CMatch_sorter(__pyx_t_9cydifflib_CMatch const &, __pyx_t_9cydifflib_CMatch const &); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "cydifflib"
extern int __pyx_module_is_main_cydifflib;
int __pyx_module_is_main_cydifflib = 0;

/* Implementation of "cydifflib" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_reversed;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_d[] = "%d";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_x[] = "x";
static const char __pyx_k__4[] = " ";
static const char __pyx_k__6[] = "-";
static const char __pyx_k__7[] = "+";
static const char __pyx_k_ai[] = "ai";
static const char __pyx_k_bj[] = "bj";
static const char __pyx_k_ch[] = "ch";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_gt[] = "&gt;";
static const char __pyx_k_hi[] = "hi";
static const char __pyx_k_i1[] = "i1";
static const char __pyx_k_i2[] = "i2";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_j1[] = "j1";
static const char __pyx_k_j2[] = "j2";
static const char __pyx_k_la[] = "la";
static const char __pyx_k_lb[] = "lb";
static const char __pyx_k_lo[] = "lo";
static const char __pyx_k_lt[] = "&lt;";
static const char __pyx_k_nn[] = "nn";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_ws[] = "ws";
static const char __pyx_k__11[] = "^";
static const char __pyx_k__12[] = "  ";
static const char __pyx_k__15[] = "- ";
static const char __pyx_k__16[] = "? ";
static const char __pyx_k__17[] = "\n";
static const char __pyx_k__18[] = "+ ";
static const char __pyx_k__19[] = " \t";
static const char __pyx_k__20[] = "{}";
static const char __pyx_k__21[] = "{},{}";
static const char __pyx_k__23[] = "\t{}";
static const char __pyx_k__24[] = "--- {}{}{}";
static const char __pyx_k__25[] = "+++ {}{}{}";
static const char __pyx_k__26[] = "@@ -{} +{} @@{}";
static const char __pyx_k__28[] = "! ";
static const char __pyx_k__29[] = "*** {}{}{}";
static const char __pyx_k__30[] = "***************";
static const char __pyx_k__31[] = "*** {} ****{}";
static const char __pyx_k__32[] = "--- {} ----{}";
static const char __pyx_k__39[] = "?";
static const char __pyx_k__42[] = "\000";
static const char __pyx_k__43[] = "\001";
static const char __pyx_k__44[] = "-?+?";
static const char __pyx_k__45[] = "--++";
static const char __pyx_k__46[] = "--?+";
static const char __pyx_k__47[] = "--+";
static const char __pyx_k__49[] = "-+?";
static const char __pyx_k__50[] = "-?+";
static const char __pyx_k__51[] = "+--";
static const char __pyx_k__52[] = "+-";
static const char __pyx_k__57[] = "*";
static const char __pyx_k__58[] = "(\\++|\\-+|\\^+)";
static const char __pyx_k__67[] = "\t";
static const char __pyx_k__72[] = ">";
static const char __pyx_k__75[] = "&";
static const char __pyx_k__78[] = "<";
static const char __pyx_k__81[] = "\000+";
static const char __pyx_k__83[] = "\000-";
static const char __pyx_k__85[] = "\000^";
static const char __pyx_k_ahi[] = "ahi";
static const char __pyx_k_ai1[] = "ai1";
static const char __pyx_k_ai2[] = "ai2";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_alo[] = "alo";
static const char __pyx_k_amp[] = "&amp;";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_bhi[] = "bhi";
static const char __pyx_k_bj1[] = "bj1";
static const char __pyx_k_bj2[] = "bj2";
static const char __pyx_k_blo[] = "blo";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_elt[] = "elt";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_eqi[] = "eqi";
static const char __pyx_k_eqj[] = "eqj";
static const char __pyx_k_err[] = "err";
static const char __pyx_k_fmt[] = "fmt";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_pat[] = "pat";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_s_s[] = "%s %s";
static const char __pyx_k_sub[] = "sub";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k__143[] = "_";
static const char __pyx_k_aelt[] = "aelt";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_belt[] = "belt";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dump[] = "_dump";
static const char __pyx_k_flag[] = "flag";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_last[] = "last";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mark[] = "mark";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_nbsp[] = "&nbsp;";
static const char __pyx_k_numb[] = "numb";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_side[] = "side";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_span[] = "span";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_to_d[] = "to%d_";
static const char __pyx_k_word[] = "word";
static const char __pyx_k_Match[] = "Match";
static const char __pyx_k_ahi_2[] = "ahi_";
static const char __pyx_k_aline[] = "aline";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_atags[] = "atags";
static const char __pyx_k_avail[] = "avail";
static const char __pyx_k_begin[] = "begin";
static const char __pyx_k_bhi_2[] = "bhi_";
static const char __pyx_k_bline[] = "bline";
static const char __pyx_k_btags[] = "btags";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_codes[] = "codes";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_delta[] = "delta";
static const char __pyx_k_dfunc[] = "dfunc";
static const char __pyx_k_diffs[] = "diffs";
static const char __pyx_k_equal[] = "equal";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_group[] = "group";
static const char __pyx_k_heapq[] = "heapq";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_line1[] = "line1";
static const char __pyx_k_line2[] = "line2";
static const char __pyx_k_lines[] = "lines";
static const char __pyx_k_match[] = "match";
static const char __pyx_k_mdiff[] = "_mdiff";
static const char __pyx_k_ndiff[] = "ndiff";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ratio[] = "ratio";
static const char __pyx_k_s_s_2[] = "\\s*(?:#\\s*)?$";
static const char __pyx_k_score[] = "score";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_table[] = "table";
static const char __pyx_k_tag_s[] = "tag_s";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_types[] = "types";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_which[] = "which";
static const char __pyx_k_Differ[] = "Differ";
static const char __pyx_k_answer[] = "answer";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_best_i[] = "best_i";
static const char __pyx_k_best_j[] = "best_j";
static const char __pyx_k_cutoff[] = "cutoff";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_delete[] = "delete";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_from_d[] = "from%d_";
static const char __pyx_k_id_s_s[] = " id=\"%s%s\"";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_insert[] = "insert";
static const char __pyx_k_isjunk[] = "isjunk";
static const char __pyx_k_legend[] = "legend";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_prefix[] = "_prefix";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_rstrip[] = "rstrip";
static const char __pyx_k_second[] = "second";
static const char __pyx_k_span_2[] = "</span>";
static const char __pyx_k_styles[] = "styles";
static const char __pyx_k_todata[] = "todata";
static const char __pyx_k_todate[] = "todate";
static const char __pyx_k_todesc[] = "todesc";
static const char __pyx_k_tofile[] = "tofile";
static const char __pyx_k_toline[] = "toline";
static const char __pyx_k_tolist[] = "tolist";
static const char __pyx_k_totext[] = "totext";
static const char __pyx_k_charset[] = "charset";
static const char __pyx_k_compare[] = "compare";
static const char __pyx_k_compile[] = "compile";
static const char __pyx_k_context[] = "context";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_isspace[] = "isspace";
static const char __pyx_k_linenum[] = "linenum";
static const char __pyx_k_markers[] = "markers";
static const char __pyx_k_matches[] = "matches";
static const char __pyx_k_next_id[] = "next_id";
static const char __pyx_k_num_chg[] = "num_chg";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_qformat[] = "_qformat";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_restore[] = "restore";
static const char __pyx_k_started[] = "started";
static const char __pyx_k_tabsize[] = "tabsize";
static const char __pyx_k_to_diff[] = "to_diff";
static const char __pyx_k_to_line[] = "to_line";
static const char __pyx_k_tolines[] = "tolines";
static const char __pyx_k_which_2[] = "_which";
static const char __pyx_k_HtmlDiff[] = "HtmlDiff";
static const char __pyx_k_a_b_size[] = "a b size";
static const char __pyx_k_autojunk[] = "autojunk";
static const char __pyx_k_availhas[] = "availhas";
static const char __pyx_k_charjunk[] = "charjunk";
static const char __pyx_k_contains[] = "__contains__";
static const char __pyx_k_cruncher[] = "cruncher";
static const char __pyx_k_flaglist[] = "flaglist";
static const char __pyx_k_fromDiff[] = "fromDiff";
static const char __pyx_k_fromdata[] = "fromdata";
static const char __pyx_k_fromdate[] = "fromdate";
static const char __pyx_k_fromdesc[] = "fromdesc";
static const char __pyx_k_fromfile[] = "fromfile";
static const char __pyx_k_fromline[] = "fromline";
static const char __pyx_k_fromlist[] = "fromlist";
static const char __pyx_k_fromtext[] = "fromtext";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_legend_2[] = "_legend";
static const char __pyx_k_line_num[] = "line_num";
static const char __pyx_k_linejunk[] = "linejunk";
static const char __pyx_k_lineterm[] = "lineterm";
static const char __pyx_k_nlargest[] = "_nlargest";
static const char __pyx_k_numlines[] = "numlines";
static const char __pyx_k_prefix_2[] = "prefix";
static const char __pyx_k_prefixes[] = "prefixes";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_reversed[] = "reversed";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_set_seq1[] = "set_seq1";
static const char __pyx_k_set_seq2[] = "set_seq2";
static const char __pyx_k_set_seqs[] = "set_seqs";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_styles_2[] = "_styles";
static const char __pyx_k_sub_info[] = "sub_info";
static const char __pyx_k_toprefix[] = "toprefix";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_beginning[] = "beginning";
static const char __pyx_k_change_re[] = "change_re";
static const char __pyx_k_cydifflib[] = "cydifflib";
static const char __pyx_k_data_list[] = "data_list";
static const char __pyx_k_data_rows[] = "data_rows";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_from_line[] = "from_line";
static const char __pyx_k_fromlines[] = "fromlines";
static const char __pyx_k_in_change[] = "in_change";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_make_file[] = "make_file";
static const char __pyx_k_make_line[] = "_make_line";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_next_href[] = "next_href";
static const char __pyx_k_num_lines[] = "num_lines";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_tabsize_2[] = "_tabsize";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_best_ratio[] = "best_ratio";
static const char __pyx_k_charjunk_2[] = "_charjunk";
static const char __pyx_k_diff_bytes[] = "diff_bytes";
static const char __pyx_k_expandtabs[] = "expandtabs";
static const char __pyx_k_format_key[] = "format_key";
static const char __pyx_k_found_diff[] = "found_diff";
static const char __pyx_k_fromprefix[] = "fromprefix";
static const char __pyx_k_fullbcount[] = "fullbcount";
static const char __pyx_k_header_row[] = "header_row";
static const char __pyx_k_linejunk_2[] = "_linejunk";
static const char __pyx_k_make_table[] = "make_table";
static const char __pyx_k_namedtuple[] = "namedtuple";
static const char __pyx_k_nlargest_2[] = "nlargest";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_setdefault[] = "setdefault";
static const char __pyx_k_split_line[] = "_split_line";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_tofiledate[] = "tofiledate";
static const char __pyx_k_wrapcolumn[] = "wrapcolumn";
static const char __pyx_k_check_types[] = "_check_types";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_expand_tabs[] = "expand_tabs";
static const char __pyx_k_file1_range[] = "file1_range";
static const char __pyx_k_file2_range[] = "file2_range";
static const char __pyx_k_format_line[] = "_format_line";
static const char __pyx_k_get_opcodes[] = "get_opcodes";
static const char __pyx_k_make_prefix[] = "_make_prefix";
static const char __pyx_k_mro_entries[] = "__mro_entries__";
static const char __pyx_k_quick_ratio[] = "quick_ratio";
static const char __pyx_k_tbody_tbody[] = "        </tbody>        \n        <tbody>\n";
static const char __pyx_k_Differ__dump[] = "Differ._dump";
static const char __pyx_k_GenericAlias[] = "GenericAlias";
static const char __pyx_k_IS_LINE_JUNK[] = "IS_LINE_JUNK";
static const char __pyx_k_contextLines[] = "contextLines";
static const char __pyx_k_context_diff[] = "context_diff";
static const char __pyx_k_fancy_helper[] = "_fancy_helper";
static const char __pyx_k_fromfiledate[] = "fromfiledate";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_line_wrapper[] = "_line_wrapper";
static const char __pyx_k_match_object[] = "match_object";
static const char __pyx_k_namedtuple_2[] = "_namedtuple";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_unified_diff[] = "unified_diff";
static const char __pyx_k_wrapcolumn_2[] = "_wrapcolumn";
static const char __pyx_k_Differ___init[] = "Differ.__init__";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_collect_lines[] = "_collect_lines";
static const char __pyx_k_context_lines[] = "context_lines";
static const char __pyx_k_convert_flags[] = "_convert_flags";
static const char __pyx_k_cydifflib_pyx[] = "cydifflib.pyx";
static const char __pyx_k_fancy_replace[] = "_fancy_replace";
static const char __pyx_k_file_template[] = "_file_template";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_line_iterator[] = "_line_iterator";
static const char __pyx_k_n_must_be_0_r[] = "n must be > 0: %r";
static const char __pyx_k_plain_replace[] = "_plain_replace";
static const char __pyx_k_possibilities[] = "possibilities";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_unknown_tag_r[] = "unknown tag %r";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_Differ_compare[] = "Differ.compare";
static const char __pyx_k_default_prefix[] = "_default_prefix";
static const char __pyx_k_lines_to_write[] = "lines_to_write";
static const char __pyx_k_table_template[] = "_table_template";
static const char __pyx_k_Differ__qformat[] = "Differ._qformat";
static const char __pyx_k_HtmlDiff___init[] = "HtmlDiff.__init__";
static const char __pyx_k_SequenceMatcher[] = "SequenceMatcher";
static const char __pyx_k_line_iterator_2[] = "line_iterator";
static const char __pyx_k_ndiff_line_1444[] = "ndiff (line 1444)";
static const char __pyx_k_record_sub_info[] = "record_sub_info";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_surrogateescape[] = "surrogateescape";
static const char __pyx_k_keep_original_ws[] = "_keep_original_ws";
static const char __pyx_k_real_quick_ratio[] = "real_quick_ratio";
static const char __pyx_k_IS_CHARACTER_JUNK[] = "IS_CHARACTER_JUNK";
static const char __pyx_k_get_close_matches[] = "get_close_matches";
static const char __pyx_k_restore_line_2160[] = "restore (line 2160)";
static const char __pyx_k_xmlcharrefreplace[] = "xmlcharrefreplace";
static const char __pyx_k_HtmlDiff_make_file[] = "HtmlDiff.make_file";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_find_longest_match[] = "find_longest_match";
static const char __pyx_k_line_pair_iterator[] = "_line_pair_iterator";
static const char __pyx_k_num_blanks_pending[] = "num_blanks_pending";
static const char __pyx_k_HtmlDiff_make_table[] = "HtmlDiff.make_table";
static const char __pyx_k_diff_lines_iterator[] = "diff_lines_iterator";
static const char __pyx_k_get_grouped_opcodes[] = "get_grouped_opcodes";
static const char __pyx_k_get_matching_blocks[] = "get_matching_blocks";
static const char __pyx_k_num_blanks_to_yield[] = "num_blanks_to_yield";
static const char __pyx_k_span_class_diff_add[] = "<span class=\"diff_add\">";
static const char __pyx_k_span_class_diff_chg[] = "<span class=\"diff_chg\">";
static const char __pyx_k_span_class_diff_sub[] = "<span class=\"diff_sub\">";
static const char __pyx_k_tab_newline_replace[] = "_tab_newline_replace";
static const char __pyx_k_Differ__fancy_helper[] = "Differ._fancy_helper";
static const char __pyx_k_HtmlDiff__split_line[] = "HtmlDiff._split_line";
static const char __pyx_k_format_range_context[] = "_format_range_context";
static const char __pyx_k_format_range_unified[] = "_format_range_unified";
static const char __pyx_k_id_difflib_chg__s__d[] = " id=\"difflib_chg_%s_%d\"";
static const char __pyx_k_line_pair_iterator_2[] = "line_pair_iterator";
static const char __pyx_k_ratio_locals_genexpr[] = "ratio.<locals>.genexpr";
static const char __pyx_k_Differ__fancy_replace[] = "Differ._fancy_replace";
static const char __pyx_k_Differ__plain_replace[] = "Differ._plain_replace";
static const char __pyx_k_HtmlDiff__format_line[] = "HtmlDiff._format_line";
static const char __pyx_k_HtmlDiff__make_prefix[] = "HtmlDiff._make_prefix";
static const char __pyx_k_SequenceMatcher_ratio[] = "SequenceMatcher.ratio";
static const char __pyx_k_HtmlDiff__line_wrapper[] = "HtmlDiff._line_wrapper";
static const char __pyx_k_IS_LINE_JUNK_line_1186[] = "IS_LINE_JUNK (line 1186)";
static const char __pyx_k_context_diff_line_1321[] = "context_diff (line 1321)";
static const char __pyx_k_unified_diff_line_1236[] = "unified_diff (line 1236)";
static const char __pyx_k_Differ_compare_line_974[] = "Differ.compare (line 974)";
static const char __pyx_k_HtmlDiff__collect_lines[] = "HtmlDiff._collect_lines";
static const char __pyx_k_HtmlDiff__convert_flags[] = "HtmlDiff._convert_flags";
static const char __pyx_k_mdiff_locals__make_line[] = "_mdiff.<locals>._make_line";
static const char __pyx_k_SequenceMatcher_set_seq1[] = "SequenceMatcher.set_seq1";
static const char __pyx_k_SequenceMatcher_set_seq2[] = "SequenceMatcher.set_seq2";
static const char __pyx_k_SequenceMatcher_set_seqs[] = "SequenceMatcher.set_seqs";
static const char __pyx_k_diff_bytes_locals_decode[] = "diff_bytes.<locals>.decode";
static const char __pyx_k_th_class_diff_next_br_th[] = "<th class=\"diff_next\"><br /></th>";
static const char __pyx_k_Differ__qformat_line_1140[] = "Differ._qformat (line 1140)";
static const char __pyx_k_thead_tr_s_s_s_s_tr_thead[] = "<thead><tr>%s%s%s%s</tr></thead>";
static const char __pyx_k_get_close_matches_line_799[] = "get_close_matches (line 799)";
static const char __pyx_k_IS_CHARACTER_JUNK_line_1202[] = "IS_CHARACTER_JUNK (line 1202)";
static const char __pyx_k_SequenceMatcher_get_opcodes[] = "SequenceMatcher.get_opcodes";
static const char __pyx_k_SequenceMatcher_quick_ratio[] = "SequenceMatcher.quick_ratio";
static const char __pyx_k_a_href_difflib_chg__s_0_f_a[] = "<a href=\"#difflib_chg_%s_0\">f</a>";
static const char __pyx_k_context_diff_locals_genexpr[] = "context_diff.<locals>.genexpr";
static const char __pyx_k_cutoff_must_be_in_0_0_1_0_r[] = "cutoff must be in [0.0, 1.0]: %r";
static const char __pyx_k_mdiff_locals__line_iterator[] = "_mdiff.<locals>._line_iterator";
static const char __pyx_k_a_href_difflib_chg__s__d_n_a[] = "<a href=\"#difflib_chg_%s_%d\">n</a>";
static const char __pyx_k_td_class_diff_next_s_td_s_tr[] = "<td class=\"diff_next\">%s</td>%s</tr>\n";
static const char __pyx_k_HtmlDiff__tab_newline_replace[] = "HtmlDiff._tab_newline_replace";
static const char __pyx_k_a_href_difflib_chg__s_top_t_a[] = "<a href=\"#difflib_chg_%s_top\">t</a>";
static const char __pyx_k_Compare_two_sequences_of_lines[] = "\n        Compare two sequences of lines; generate the resulting delta.\n\n        Each sequence must contain individual single-line strings ending with\n        newlines. Such sequences can be obtained from the `readlines()` method\n        of file-like objects.  The delta generated also consists of newline-\n        terminated strings, ready to be printed as-is via the writeline()\n        method of a file-like object.\n\n        Example:\n\n        >>> print(''.join(Differ().compare('one\\ntwo\\nthree\\n'.splitlines(True),\n        ...                                'ore\\ntree\\nemu\\n'.splitlines(True))),\n        ...       end=\"\")\n        - one\n        ?  ^\n        + ore\n        ?  ^\n        - two\n        - three\n        ?  -\n        + tree\n        + emu\n        ";
static const char __pyx_k_Return_True_for_ignorable_line[] = "\n    Return True for ignorable line: iff `line` is blank or contains a single '#'.\n\n    Examples:\n\n    >>> IS_LINE_JUNK('\\n')\n    True\n    >>> IS_LINE_JUNK('  #   \\n')\n    True\n    >>> IS_LINE_JUNK('hello\\n')\n    False\n    ";
static const char __pyx_k_SequenceMatcher_ratio_line_730[] = "SequenceMatcher.ratio (line 730)";
static const char __pyx_k_mdiff_locals__make_line_locals[] = "_mdiff.<locals>._make_line.<locals>.record_sub_info";
static const char __pyx_k_table_diff_font_family_Courier[] = "\n        table.diff {font-family:Courier; border:medium;}\n        .diff_header {background-color:#e0e0e0}\n        td.diff_header {text-align:right}\n        .diff_next {background-color:#c0c0c0}\n        .diff_add {background-color:#aaffaa}\n        .diff_chg {background-color:#ffff77}\n        .diff_sub {background-color:#ffaaaa}";
static const char __pyx_k_td_class_diff_header_s_s_td_td[] = "<td class=\"diff_header\"%s>%s</td><td nowrap=\"nowrap\">%s</td>";
static const char __pyx_k_th_colspan_2_class_diff_header[] = "<th colspan=\"2\" class=\"diff_header\">%s</th>";
static const char __pyx_k_tr_td_class_diff_next_s_s_td_s[] = "            <tr><td class=\"diff_next\"%s>%s</td>%s";
static const char __pyx_k_Compare_a_and_b_lists_of_string[] = "\n    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.\n\n    Optional keyword parameters `linejunk` and `charjunk` are for filter\n    functions, or can be None:\n\n    - linejunk: A function that should accept a single string argument and\n      return true iff the string is junk.  The default is None, and is\n      recommended; the underlying SequenceMatcher class has an adaptive\n      notion of \"noise\" lines.\n\n    - charjunk: A function that accepts a character (string of length\n      1), and returns true iff the character is junk. The default is\n      the module-level function IS_CHARACTER_JUNK, which filters out\n      whitespace characters (a blank or tab; note: it's a bad idea to\n      include newline in this!).\n\n    Tools/scripts/ndiff.py is a command-line front-end to this function.\n\n    Example:\n\n    >>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n    ...              'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\n    >>> print(''.join(diff), end=\"\")\n    - one\n    ?  ^\n    + ore\n    ?  ^\n    - two\n    - three\n    ?  -\n    + tree\n    + emu\n    ";
static const char __pyx_k_DOCTYPE_html_PUBLIC_W3C_DTD_XHT[] = "\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html>\n\n<head>\n    <meta http-equiv=\"Content-Type\"\n          content=\"text/html; charset=%(charset)s\" />\n    <title></title>\n    <style type=\"text/css\">%(styles)s\n    </style>\n</head>\n\n<body>\n    %(table)s%(legend)s\n</body>\n\n</html>";
static const char __pyx_k_Differ__fancy_replace_line_1034[] = "Differ._fancy_replace (line 1034)";
static const char __pyx_k_Differ_is_a_class_for_comparing[] = "\n    Differ is a class for comparing sequences of lines of text, and\n    producing human-readable differences or deltas.  Differ uses\n    SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n\n    Each line of a Differ delta begins with a two-letter code:\n\n        '- '    line unique to sequence 1\n        '+ '    line unique to sequence 2\n        '  '    line common to both sequences\n        '? '    line not present in either input sequence\n\n    Lines beginning with '? ' attempt to guide the eye to intraline\n    differences, and were not present in either input sequence.  These lines\n    can be confusing if the sequences contain tab characters.\n\n    Note that Differ makes no claim to produce a *minimal* diff.  To the\n    contrary, minimal diffs are often counter-intuitive, because they synch\n    up anywhere possible, sometimes accidental matches 100 pages apart.\n    Restricting synch points to contiguous matches preserves some notion of\n    locality, at the occasional cost of producing a longer diff.\n\n    Example: Comparing two texts.\n\n    First we set up the texts, sequences of individual single-line strings\n    ending with newlines (such sequences can also be obtained from the\n    `readlines()` method of file-like objects):\n\n    >>> text1 = '''  1. Beautiful is better than ugly.\n    ...   2. Explicit is better than implicit.\n    ...   3. Simple is better than complex.\n    ...   4. Complex is better than complicated.\n    ... '''.splitlines(keepends=True)\n    >>> len(text1)\n    4\n    >>> text1[0][-1]\n    '\\n'\n    >>> text2 = '''  1. Beautiful is better than ugly.\n    ...   3.   Simple is better than complex.\n    ...   4. Complicated is better than complex.\n    ...   5. Flat is better than nested.\n    ... '''.splitlines(keepends=True)\n\n    Next we instantiate a Differ object:\n\n    >>> d = Differ()\n\n    Note that when instantiating a Differ o""bject we may pass functions to\n    filter out line and character 'junk'.  See Differ.__init__ for details.\n\n    Finally, we compare the two:\n\n    >>> result = list(d.compare(text1, text2))\n\n    'result' is a list of strings, so let's pretty-print it:\n\n    >>> from pprint import pprint as _pprint\n    >>> _pprint(result)\n    ['    1. Beautiful is better than ugly.\\n',\n     '-   2. Explicit is better than implicit.\\n',\n     '-   3. Simple is better than complex.\\n',\n     '+   3.   Simple is better than complex.\\n',\n     '?     ++\\n',\n     '-   4. Complex is better than complicated.\\n',\n     '?            ^                     ---- ^\\n',\n     '+   4. Complicated is better than complex.\\n',\n     '?           ++++ ^                      ^\\n',\n     '+   5. Flat is better than nested.\\n']\n\n    As a single multi-line string it looks like this:\n\n    >>> print(''.join(result), end=\"\")\n        1. Beautiful is better than ugly.\n    -   2. Explicit is better than implicit.\n    -   3. Simple is better than complex.\n    +   3.   Simple is better than complex.\n    ?     ++\n    -   4. Complex is better than complicated.\n    ?            ^                     ---- ^\n    +   4. Complicated is better than complex.\n    ?           ++++ ^                      ^\n    +   5. Flat is better than nested.\n\n    Methods:\n\n    __init__(linejunk=None, charjunk=None)\n        Construct a text differencer, with optional filters.\n\n    compare(a, b)\n        Compare two sequences of lines; generate the resulting delta.\n    ";
static const char __pyx_k_For_producing_HTML_side_by_side[] = "For producing HTML side by side comparison with change highlights.\n\n    This class can be used to create an HTML table (or a complete HTML file\n    containing the table) showing a side by side, line by line comparison\n    of text with inter-line and intra-line change highlights.  The table can\n    be generated in either full or contextual difference mode.\n\n    The following methods are provided for HTML generation:\n\n    make_table -- generates HTML for a single side by side table\n    make_file -- generates complete HTML file with a single side by side table\n\n    See tools/scripts/diff.py for an example usage of this class.\n    ";
static const char __pyx_k_Format_output_and_deal_with_tab[] = "\n        Format \"?\" output and deal with tabs.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._qformat('\\tabcDefghiJkl\\n', '\\tabcdefGhijkl\\n',\n        ...                      '  ^ ^  ^      ', '  ^ ^  ^      ')\n        >>> for line in results: print(repr(line))\n        ...\n        '- \\tabcDefghiJkl\\n'\n        '? \\t ^ ^  ^\\n'\n        '+ \\tabcdefGhijkl\\n'\n        '? \\t ^ ^  ^\\n'\n        ";
static const char __pyx_k_Generate_one_of_the_two_sequenc[] = "\n    Generate one of the two sequences that generated a delta.\n\n    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract\n    lines originating from file 1 or 2 (parameter `which`), stripping off line\n    prefixes.\n\n    Examples:\n\n    >>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n    ...              'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\n    >>> diff = list(diff)\n    >>> print(''.join(restore(diff, 1)), end=\"\")\n    one\n    two\n    three\n    >>> print(''.join(restore(diff, 2)), end=\"\")\n    ore\n    tree\n    emu\n    ";
static const char __pyx_k_Isolate_change_clusters_by_elim[] = " Isolate change clusters by eliminating ranges with no changes.\n\n        Return a generator of groups with up to n lines of context.\n        Each group is in the same format as returned by get_opcodes().\n\n        >>> from pprint import pprint\n        >>> a = list(map(str, range(1,40)))\n        >>> b = a[:]\n        >>> b[8:8] = ['i']     # Make an insertion\n        >>> b[20] += 'x'       # Make a replacement\n        >>> b[23:28] = []      # Make a deletion\n        >>> b[30] += 'y'       # Make another replacement\n        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))\n        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],\n         [('equal', 16, 19, 17, 20),\n          ('replace', 19, 20, 20, 21),\n          ('equal', 20, 22, 21, 23),\n          ('delete', 22, 27, 23, 23),\n          ('equal', 27, 30, 23, 26)],\n         [('equal', 31, 34, 27, 30),\n          ('replace', 34, 35, 30, 31),\n          ('equal', 35, 38, 31, 34)]]\n        ";
static const char __pyx_k_Module_difflib_helpers_for_comp[] = "\nModule difflib -- helpers for computing deltas between objects.\n\nFunction get_close_matches(word, possibilities, n=3, cutoff=0.6):\n    Use SequenceMatcher to return list of the best \"good enough\" matches.\n\nFunction context_diff(a, b):\n    For two lists of strings, return a delta in context diff format.\n\nFunction ndiff(a, b):\n    Return a delta: the difference between `a` and `b` (lists of strings).\n\nFunction restore(delta, which):\n    Return one of the two sequences that generated an ndiff delta.\n\nFunction unified_diff(a, b):\n    For two lists of strings, return a delta in unified diff format.\n\nClass SequenceMatcher:\n    A flexible class for comparing pairs of sequences of any type.\n\nClass Differ:\n    For producing human-readable deltas from sequences of lines of text.\n\nClass HtmlDiff:\n    For producing HTML side by side comparison with change highlights.\n";
static const char __pyx_k_Return_True_for_ignorable_chara[] = "\n    Return True for ignorable character: iff `ch` is a space or tab.\n\n    Examples:\n\n    >>> IS_CHARACTER_JUNK(' ')\n    True\n    >>> IS_CHARACTER_JUNK('\\t')\n    True\n    >>> IS_CHARACTER_JUNK('\\n')\n    False\n    >>> IS_CHARACTER_JUNK('x')\n    False\n    ";
static const char __pyx_k_SequenceMatcher___reduce_cython[] = "SequenceMatcher.__reduce_cython__";
static const char __pyx_k_When_replacing_one_block_of_lin[] = "\n        When replacing one block of lines with another, search the blocks\n        for *similar* lines; the best-matching pair (if any) is used as a\n        synch point, and intraline difference marking is done on the\n        similar pair. Lots of work, but often worth it.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._fancy_replace(['abcDefghiJkl\\n'], 0, 1,\n        ...                            ['abcdefGhijkl\\n'], 0, 1)\n        >>> print(''.join(results), end=\"\")\n        - abcDefghiJkl\n        ?    ^  ^  ^\n        + abcdefGhijkl\n        ?    ^  ^  ^\n        ";
static const char __pyx_k_all_arguments_must_be_bytes_not[] = "all arguments must be bytes, not %s (%r)";
static const char __pyx_k_all_arguments_must_be_str_not_r[] = "all arguments must be str, not: %r";
static const char __pyx_k_keep_original_ws_locals_genexpr[] = "_keep_original_ws.<locals>.genexpr";
static const char __pyx_k_mdiff_locals__line_pair_iterato[] = "_mdiff.<locals>._line_pair_iterator";
static const char __pyx_k_table_class_diff_id_difflib_chg[] = "\n    <table class=\"diff\" id=\"difflib_chg_%(prefix)s_top\"\n           cellspacing=\"0\" cellpadding=\"0\" rules=\"groups\" >\n        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>\n        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>\n        %(header_row)s\n        <tbody>\n%(data_rows)s        </tbody>\n    </table>";
static const char __pyx_k_table_class_diff_summary_Legend[] = "\n    <table class=\"diff\" summary=\"Legends\">\n        <tr> <th colspan=\"2\"> Legends </th> </tr>\n        <tr> <td> <table border=\"\" summary=\"Colors\">\n                      <tr><th> Colors </th> </tr>\n                      <tr><td class=\"diff_add\">&nbsp;Added&nbsp;</td></tr>\n                      <tr><td class=\"diff_chg\">Changed</td> </tr>\n                      <tr><td class=\"diff_sub\">Deleted</td> </tr>\n                  </table></td>\n             <td> <table border=\"\" summary=\"Links\">\n                      <tr><th colspan=\"2\"> Links </th> </tr>\n                      <tr><td>(f)irst change</td> </tr>\n                      <tr><td>(n)ext change</td> </tr>\n                      <tr><td>(t)op</td> </tr>\n                  </table></td> </tr>\n    </table>";
static const char __pyx_k_td_td_td_nbsp_Empty_File_nbsp_t[] = "<td></td><td>&nbsp;Empty File&nbsp;</td>";
static const char __pyx_k_td_td_td_nbsp_No_Differences_Fo[] = "<td></td><td>&nbsp;No Differences Found&nbsp;</td>";
static const char __pyx_k_Compare_two_sequences_of_lines_2[] = "\n    Compare two sequences of lines; generate the delta as a unified diff.\n\n    Unified diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by 'n' which\n    defaults to three.\n\n    By default, the diff control lines (those with ---, +++, or @@) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to \"\" so that the output will be uniformly newline free.\n\n    The unidiff format normally has a header for filenames and modification\n    times.  Any or all of these may be specified using strings for\n    'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n    The modification times are normally expressed in the ISO 8601 format.\n\n    Example:\n\n    >>> for line in unified_diff('one two three four'.split(),\n    ...             'zero one tree four'.split(), 'Original', 'Current',\n    ...             '2005-01-26 23:30:50', '2010-04-02 10:20:52',\n    ...             lineterm=''):\n    ...     print(line)                 # doctest: +NORMALIZE_WHITESPACE\n    --- Original        2005-01-26 23:30:50\n    +++ Current         2010-04-02 10:20:52\n    @@ -1,4 +1,4 @@\n    +zero\n     one\n    -two\n    -three\n    +tree\n     four\n    ";
static const char __pyx_k_Compare_two_sequences_of_lines_3[] = "\n    Compare two sequences of lines; generate the delta as a context diff.\n\n    Context diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by 'n' which\n    defaults to three.\n\n    By default, the diff control lines (those with *** or ---) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to \"\" so that the output will be uniformly newline free.\n\n    The context diff format normally has a header for filenames and\n    modification times.  Any or all of these may be specified using\n    strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n    The modification times are normally expressed in the ISO 8601 format.\n    If not specified, the strings default to blanks.\n\n    Example:\n\n    >>> print(''.join(context_diff('one\\ntwo\\nthree\\nfour\\n'.splitlines(True),\n    ...       'zero\\none\\ntree\\nfour\\n'.splitlines(True), 'Original', 'Current')),\n    ...       end=\"\")\n    *** Original\n    --- Current\n    ***************\n    *** 1,4 ****\n      one\n    ! two\n    ! three\n      four\n    --- 1,4 ----\n    + zero\n      one\n    ! tree\n      four\n    ";
static const char __pyx_k_Find_longest_matching_block_in_a[] = "Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n        By default it will find the longest match in the entirety of a and b.\n\n        If isjunk is not defined:\n\n        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where\n            alo <= i <= i+k <= ahi\n            blo <= j <= j+k <= bhi\n        and for all (i',j',k') meeting those conditions,\n            k >= k'\n            i <= i'\n            and if i == i', j <= j'\n\n        In other words, of all maximal matching blocks, return one that\n        starts earliest in a, and of all those maximal matching blocks that\n        start earliest in a, return the one that starts earliest in b.\n\n        >>> s = SequenceMatcher(None, \" abcd\", \"abcd abcd\")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=0, b=4, size=5)\n\n        If isjunk is defined, first the longest matching block is\n        determined as above, but with the additional restriction that no\n        junk element appears in the block.  Then that block is extended as\n        far as possible by matching (only) junk elements on both sides.  So\n        the resulting block never matches on junk except as identical junk\n        happens to be adjacent to an \"interesting\" match.\n\n        Here's the same example as before, but considering blanks to be\n        junk.  That prevents \" abcd\" from matching the \" abcd\" at the tail\n        end of the second sequence directly.  Instead only the \"abcd\" can\n        match, and matches the leftmost \"abcd\" in the second sequence:\n\n        >>> s = SequenceMatcher(lambda x: x==\" \", \" abcd\", \"abcd abcd\")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=1, b=0, size=4)\n\n        If no blocks match, return (alo, blo, 0).\n\n        >>> s = SequenceMatcher(None, \"ab\", \"c\")\n        >>> s.find_longest_match(0, 2, 0, 1)\n        Match(a=0, b=0, size=0)\n        ";
static const char __pyx_k_HtmlDiff__tab_newline_replace_lo[] = "HtmlDiff._tab_newline_replace.<locals>.expand_tabs";
static const char __pyx_k_Return_a_measure_of_the_sequence[] = "Return a measure of the sequences' similarity (float in [0,1]).\n\n        Where T is the total number of elements in both sequences, and\n        M is the number of matches, this is 2.0*M / T.\n        Note that this is 1 if the sequences are identical, and 0 if\n        they have nothing in common.\n\n        .ratio() is expensive to compute if you haven't already computed\n        .get_matching_blocks() or .get_opcodes(), in which case you may\n        want to try .quick_ratio() or .real_quick_ratio() first to get an\n        upper bound.\n\n        >>> s = SequenceMatcher(None, \"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        >>> s.quick_ratio()\n        0.75\n        >>> s.real_quick_ratio()\n        1.0\n        ";
static const char __pyx_k_Return_list_of_5_tuples_describi[] = "Return list of 5-tuples describing how to turn a into b.\n\n        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple\n        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the\n        tuple preceding it, and likewise for j1 == the previous j2.\n\n        The tags are strings, with these meanings:\n\n        'replace':  a[i1:i2] should be replaced by b[j1:j2]\n        'delete':   a[i1:i2] should be deleted.\n                    Note that j1==j2 in this case.\n        'insert':   b[j1:j2] should be inserted at a[i1:i1].\n                    Note that i1==i2 in this case.\n        'equal':    a[i1:i2] == b[j1:j2]\n\n        >>> a = \"qabxcd\"\n        >>> b = \"abycdf\"\n        >>> s = SequenceMatcher(None, a, b)\n        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():\n        ...    print((\"%7s a[%d:%d] (%s) b[%d:%d] (%s)\" %\n        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2])))\n         delete a[0:1] (q) b[0:0] ()\n          equal a[1:3] (ab) b[0:2] (ab)\n        replace a[3:4] (x) b[2:3] (y)\n          equal a[4:6] (cd) b[3:5] (cd)\n         insert a[6:6] () b[5:6] (f)\n        ";
static const char __pyx_k_Return_list_of_triples_describin[] = "Return list of triples describing matching subsequences.\n\n        Each triple is of the form (i, j, n), and means that\n        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in\n        i and in j.  New in Python 2.5, it's also guaranteed that if\n        (i, j, n) and (i', j', n') are adjacent triples in the list, and\n        the second is not the last triple in the list, then i+n != i' or\n        j+n != j'.  IOW, adjacent triples never describe adjacent equal\n        blocks.\n\n        The last triple is a dummy, (len(a), len(b), 0), and is the only\n        triple with n==0.\n\n        >>> s = SequenceMatcher(None, \"abxcd\", \"abcd\")\n        >>> list(s.get_matching_blocks())\n        [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]\n        ";
static const char __pyx_k_SequenceMatcher___setstate_cytho[] = "SequenceMatcher.__setstate_cython__";
static const char __pyx_k_SequenceMatcher_find_longest_mat[] = "SequenceMatcher.find_longest_match";
static const char __pyx_k_SequenceMatcher_get_grouped_opco[] = "SequenceMatcher.get_grouped_opcodes";
static const char __pyx_k_SequenceMatcher_get_matching_blo[] = "SequenceMatcher.get_matching_blocks";
static const char __pyx_k_SequenceMatcher_get_opcodes_line[] = "SequenceMatcher.get_opcodes (line 625)";
static const char __pyx_k_SequenceMatcher_real_quick_ratio[] = "SequenceMatcher.real_quick_ratio";
static const char __pyx_k_SequenceMatcher_set_seq1_line_28[] = "SequenceMatcher.set_seq1 (line 286)";
static const char __pyx_k_SequenceMatcher_set_seq2_line_31[] = "SequenceMatcher.set_seq2 (line 313)";
static const char __pyx_k_SequenceMatcher_set_seqs_line_27[] = "SequenceMatcher.set_seqs (line 274)";
static const char __pyx_k_Set_the_first_sequence_to_be_com[] = "Set the first sequence to be compared.\n\n        The second sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, \"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq1(\"bcde\")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq2().\n        ";
static const char __pyx_k_Set_the_second_sequence_to_be_co[] = "Set the second sequence to be compared.\n\n        The first sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, \"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq2(\"abcd\")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq1().\n        ";
static const char __pyx_k_Set_the_two_sequences_to_be_comp[] = "Set the two sequences to be compared.\n\n        >>> s = SequenceMatcher()\n        >>> s.set_seqs(\"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        ";
static const char __pyx_k_Use_SequenceMatcher_to_return_li[] = "Use SequenceMatcher to return list of the best \"good enough\" matches.\n\n    word is a sequence for which close matches are desired (typically a\n    string).\n\n    possibilities is a list of sequences against which to match word\n    (typically a list of strings).\n\n    Optional arg n (default 3) is the maximum number of close matches to\n    return.  n must be > 0.\n\n    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities\n    that don't score at least that similar to word are ignored.\n\n    The best (no more than n) matches among the possibilities are returned\n    in a list, sorted by similarity score, most similar first.\n\n    >>> get_close_matches(\"appel\", [\"ape\", \"apple\", \"peach\", \"puppy\"])\n    ['apple', 'ape']\n    >>> import keyword as _keyword\n    >>> get_close_matches(\"wheel\", _keyword.kwlist)\n    ['while']\n    >>> get_close_matches(\"Apple\", _keyword.kwlist)\n    []\n    >>> get_close_matches(\"accept\", _keyword.kwlist)\n    ['except']\n    ";
static const char __pyx_k_lines_to_compare_must_be_str_not[] = "lines to compare must be str, not %s (%r)";
static const char __pyx_k_self_a__self_b__cannot_be_conver[] = "self.a_,self.b_ cannot be converted to a Python object for pickling";
static const char __pyx_k_unknown_delta_choice_must_be_1_o[] = "unknown delta choice (must be 1 or 2): %r";
static const char __pyx_k_SequenceMatcher_find_longest_mat_2[] = "SequenceMatcher.find_longest_match (line 491)";
static const char __pyx_k_SequenceMatcher_get_grouped_opco_2[] = "SequenceMatcher.get_grouped_opcodes (line 680)";
static const char __pyx_k_SequenceMatcher_get_matching_blo_2[] = "SequenceMatcher.get_matching_blocks (line 542)";
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_kp_b_;
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_kp_u_Compare_a_and_b_lists_of_string;
static PyObject *__pyx_kp_u_Compare_two_sequences_of_lines;
static PyObject *__pyx_kp_u_Compare_two_sequences_of_lines_2;
static PyObject *__pyx_kp_u_Compare_two_sequences_of_lines_3;
static PyObject *__pyx_kp_s_DOCTYPE_html_PUBLIC_W3C_DTD_XHT;
static PyObject *__pyx_n_s_Differ;
static PyObject *__pyx_n_s_Differ___init;
static PyObject *__pyx_n_s_Differ__dump;
static PyObject *__pyx_n_s_Differ__fancy_helper;
static PyObject *__pyx_n_s_Differ__fancy_replace;
static PyObject *__pyx_kp_u_Differ__fancy_replace_line_1034;
static PyObject *__pyx_n_s_Differ__plain_replace;
static PyObject *__pyx_n_s_Differ__qformat;
static PyObject *__pyx_kp_u_Differ__qformat_line_1140;
static PyObject *__pyx_n_s_Differ_compare;
static PyObject *__pyx_kp_u_Differ_compare_line_974;
static PyObject *__pyx_kp_s_Differ_is_a_class_for_comparing;
static PyObject *__pyx_kp_u_Find_longest_matching_block_in_a;
static PyObject *__pyx_kp_s_For_producing_HTML_side_by_side;
static PyObject *__pyx_kp_u_Format_output_and_deal_with_tab;
static PyObject *__pyx_kp_u_Generate_one_of_the_two_sequenc;
static PyObject *__pyx_n_s_GenericAlias;
static PyObject *__pyx_n_s_HtmlDiff;
static PyObject *__pyx_n_s_HtmlDiff___init;
static PyObject *__pyx_n_s_HtmlDiff__collect_lines;
static PyObject *__pyx_n_s_HtmlDiff__convert_flags;
static PyObject *__pyx_n_s_HtmlDiff__format_line;
static PyObject *__pyx_n_s_HtmlDiff__line_wrapper;
static PyObject *__pyx_n_s_HtmlDiff__make_prefix;
static PyObject *__pyx_n_s_HtmlDiff__split_line;
static PyObject *__pyx_n_s_HtmlDiff__tab_newline_replace;
static PyObject *__pyx_n_s_HtmlDiff__tab_newline_replace_lo;
static PyObject *__pyx_n_s_HtmlDiff_make_file;
static PyObject *__pyx_n_s_HtmlDiff_make_table;
static PyObject *__pyx_n_s_IS_CHARACTER_JUNK;
static PyObject *__pyx_kp_u_IS_CHARACTER_JUNK_line_1202;
static PyObject *__pyx_n_s_IS_LINE_JUNK;
static PyObject *__pyx_kp_u_IS_LINE_JUNK_line_1186;
static PyObject *__pyx_kp_u_Isolate_change_clusters_by_elim;
static PyObject *__pyx_n_s_Match;
static PyObject *__pyx_kp_u_Return_True_for_ignorable_chara;
static PyObject *__pyx_kp_u_Return_True_for_ignorable_line;
static PyObject *__pyx_kp_u_Return_a_measure_of_the_sequence;
static PyObject *__pyx_kp_u_Return_list_of_5_tuples_describi;
static PyObject *__pyx_kp_u_Return_list_of_triples_describin;
static PyObject *__pyx_n_s_SequenceMatcher;
static PyObject *__pyx_n_s_SequenceMatcher___reduce_cython;
static PyObject *__pyx_n_s_SequenceMatcher___setstate_cytho;
static PyObject *__pyx_n_s_SequenceMatcher_find_longest_mat;
static PyObject *__pyx_kp_u_SequenceMatcher_find_longest_mat_2;
static PyObject *__pyx_n_s_SequenceMatcher_get_grouped_opco;
static PyObject *__pyx_kp_u_SequenceMatcher_get_grouped_opco_2;
static PyObject *__pyx_n_s_SequenceMatcher_get_matching_blo;
static PyObject *__pyx_kp_u_SequenceMatcher_get_matching_blo_2;
static PyObject *__pyx_n_s_SequenceMatcher_get_opcodes;
static PyObject *__pyx_kp_u_SequenceMatcher_get_opcodes_line;
static PyObject *__pyx_n_s_SequenceMatcher_quick_ratio;
static PyObject *__pyx_n_s_SequenceMatcher_ratio;
static PyObject *__pyx_kp_u_SequenceMatcher_ratio_line_730;
static PyObject *__pyx_n_s_SequenceMatcher_real_quick_ratio;
static PyObject *__pyx_n_s_SequenceMatcher_set_seq1;
static PyObject *__pyx_kp_u_SequenceMatcher_set_seq1_line_28;
static PyObject *__pyx_n_s_SequenceMatcher_set_seq2;
static PyObject *__pyx_kp_u_SequenceMatcher_set_seq2_line_31;
static PyObject *__pyx_n_s_SequenceMatcher_set_seqs;
static PyObject *__pyx_kp_u_SequenceMatcher_set_seqs_line_27;
static PyObject *__pyx_kp_u_Set_the_first_sequence_to_be_com;
static PyObject *__pyx_kp_u_Set_the_second_sequence_to_be_co;
static PyObject *__pyx_kp_u_Set_the_two_sequences_to_be_comp;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Use_SequenceMatcher_to_return_li;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_When_replacing_one_block_of_lin;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_kp_s__11;
static PyObject *__pyx_kp_s__12;
static PyObject *__pyx_n_s__143;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_u__16;
static PyObject *__pyx_kp_b__17;
static PyObject *__pyx_kp_s__17;
static PyObject *__pyx_kp_u__17;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_kp_s__19;
static PyObject *__pyx_kp_s__20;
static PyObject *__pyx_kp_s__21;
static PyObject *__pyx_kp_s__23;
static PyObject *__pyx_kp_s__24;
static PyObject *__pyx_kp_s__25;
static PyObject *__pyx_kp_s__26;
static PyObject *__pyx_kp_s__28;
static PyObject *__pyx_kp_s__29;
static PyObject *__pyx_kp_s__30;
static PyObject *__pyx_kp_s__31;
static PyObject *__pyx_kp_s__32;
static PyObject *__pyx_kp_s__39;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_kp_s__42;
static PyObject *__pyx_kp_s__43;
static PyObject *__pyx_kp_s__44;
static PyObject *__pyx_kp_s__45;
static PyObject *__pyx_kp_s__46;
static PyObject *__pyx_kp_s__47;
static PyObject *__pyx_kp_s__49;
static PyObject *__pyx_kp_s__50;
static PyObject *__pyx_kp_s__51;
static PyObject *__pyx_kp_s__52;
static PyObject *__pyx_n_s__57;
static PyObject *__pyx_kp_s__58;
static PyObject *__pyx_kp_s__6;
static PyObject *__pyx_kp_s__67;
static PyObject *__pyx_kp_s__7;
static PyObject *__pyx_kp_s__72;
static PyObject *__pyx_kp_s__75;
static PyObject *__pyx_kp_s__78;
static PyObject *__pyx_kp_s__81;
static PyObject *__pyx_kp_s__83;
static PyObject *__pyx_kp_s__85;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_kp_s_a_b_size;
static PyObject *__pyx_kp_s_a_href_difflib_chg__s_0_f_a;
static PyObject *__pyx_kp_s_a_href_difflib_chg__s__d_n_a;
static PyObject *__pyx_kp_s_a_href_difflib_chg__s_top_t_a;
static PyObject *__pyx_n_s_aelt;
static PyObject *__pyx_n_s_ahi;
static PyObject *__pyx_n_s_ahi_2;
static PyObject *__pyx_n_s_ai;
static PyObject *__pyx_n_s_ai1;
static PyObject *__pyx_n_s_ai2;
static PyObject *__pyx_n_s_aline;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_kp_s_all_arguments_must_be_bytes_not;
static PyObject *__pyx_kp_s_all_arguments_must_be_str_not_r;
static PyObject *__pyx_n_s_alo;
static PyObject *__pyx_kp_s_amp;
static PyObject *__pyx_n_s_answer;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_ascii;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_atags;
static PyObject *__pyx_n_s_autojunk;
static PyObject *__pyx_n_s_avail;
static PyObject *__pyx_n_s_availhas;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_begin;
static PyObject *__pyx_n_s_beginning;
static PyObject *__pyx_n_s_belt;
static PyObject *__pyx_n_s_best_i;
static PyObject *__pyx_n_s_best_j;
static PyObject *__pyx_n_s_best_ratio;
static PyObject *__pyx_n_s_bhi;
static PyObject *__pyx_n_s_bhi_2;
static PyObject *__pyx_n_s_bj;
static PyObject *__pyx_n_s_bj1;
static PyObject *__pyx_n_s_bj2;
static PyObject *__pyx_n_s_bline;
static PyObject *__pyx_n_s_blo;
static PyObject *__pyx_n_s_btags;
static PyObject *__pyx_n_s_ch;
static PyObject *__pyx_n_s_change_re;
static PyObject *__pyx_n_s_charjunk;
static PyObject *__pyx_n_s_charjunk_2;
static PyObject *__pyx_n_s_charset;
static PyObject *__pyx_n_s_check_types;
static PyObject *__pyx_n_s_class_getitem;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_codes;
static PyObject *__pyx_n_s_collect_lines;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_compare;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_s_contains;
static PyObject *__pyx_n_s_context;
static PyObject *__pyx_n_s_contextLines;
static PyObject *__pyx_n_s_context_diff;
static PyObject *__pyx_kp_u_context_diff_line_1321;
static PyObject *__pyx_n_s_context_diff_locals_genexpr;
static PyObject *__pyx_n_s_context_lines;
static PyObject *__pyx_n_s_convert_flags;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_cruncher;
static PyObject *__pyx_n_s_cutoff;
static PyObject *__pyx_kp_s_cutoff_must_be_in_0_0_1_0_r;
static PyObject *__pyx_n_s_cydifflib;
static PyObject *__pyx_kp_s_cydifflib_pyx;
static PyObject *__pyx_kp_s_d;
static PyObject *__pyx_n_s_data_list;
static PyObject *__pyx_n_s_data_rows;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_default_prefix;
static PyObject *__pyx_n_s_delete;
static PyObject *__pyx_n_s_delta;
static PyObject *__pyx_n_s_dfunc;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_diff_bytes;
static PyObject *__pyx_n_s_diff_bytes_locals_decode;
static PyObject *__pyx_n_s_diff_lines_iterator;
static PyObject *__pyx_n_s_diffs;
static PyObject *__pyx_kp_u_disable;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dump;
static PyObject *__pyx_n_s_elt;
static PyObject *__pyx_kp_u_enable;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eqi;
static PyObject *__pyx_n_s_eqj;
static PyObject *__pyx_n_s_equal;
static PyObject *__pyx_n_s_err;
static PyObject *__pyx_n_s_expand_tabs;
static PyObject *__pyx_n_s_expandtabs;
static PyObject *__pyx_n_s_fancy_helper;
static PyObject *__pyx_n_s_fancy_replace;
static PyObject *__pyx_n_s_file1_range;
static PyObject *__pyx_n_s_file2_range;
static PyObject *__pyx_n_s_file_template;
static PyObject *__pyx_n_s_find_longest_match;
static PyObject *__pyx_n_s_first;
static PyObject *__pyx_n_s_flag;
static PyObject *__pyx_n_s_flaglist;
static PyObject *__pyx_n_s_fmt;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_format_key;
static PyObject *__pyx_n_s_format_line;
static PyObject *__pyx_n_s_format_range_context;
static PyObject *__pyx_n_s_format_range_unified;
static PyObject *__pyx_n_s_found_diff;
static PyObject *__pyx_n_s_fromDiff;
static PyObject *__pyx_kp_s_from_d;
static PyObject *__pyx_n_s_from_line;
static PyObject *__pyx_n_s_fromdata;
static PyObject *__pyx_n_s_fromdate;
static PyObject *__pyx_n_s_fromdesc;
static PyObject *__pyx_n_s_fromfile;
static PyObject *__pyx_n_s_fromfiledate;
static PyObject *__pyx_n_s_fromline;
static PyObject *__pyx_n_s_fromlines;
static PyObject *__pyx_n_s_fromlist;
static PyObject *__pyx_n_s_fromprefix;
static PyObject *__pyx_n_s_fromtext;
static PyObject *__pyx_n_s_fullbcount;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_kp_u_gc;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_close_matches;
static PyObject *__pyx_kp_u_get_close_matches_line_799;
static PyObject *__pyx_n_s_get_grouped_opcodes;
static PyObject *__pyx_n_s_get_matching_blocks;
static PyObject *__pyx_n_s_get_opcodes;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_group;
static PyObject *__pyx_kp_s_gt;
static PyObject *__pyx_n_s_header_row;
static PyObject *__pyx_n_s_heapq;
static PyObject *__pyx_n_s_hi;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_i1;
static PyObject *__pyx_n_s_i2;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_kp_s_id_difflib_chg__s__d;
static PyObject *__pyx_kp_s_id_s_s;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_change;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_init_subclass;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_insert;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_kp_u_isenabled;
static PyObject *__pyx_n_s_isjunk;
static PyObject *__pyx_n_s_isspace;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_j1;
static PyObject *__pyx_n_s_j2;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_keep_original_ws;
static PyObject *__pyx_n_s_keep_original_ws_locals_genexpr;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_la;
static PyObject *__pyx_n_s_last;
static PyObject *__pyx_n_s_lb;
static PyObject *__pyx_n_s_legend;
static PyObject *__pyx_n_s_legend_2;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_line1;
static PyObject *__pyx_n_s_line2;
static PyObject *__pyx_n_s_line_iterator;
static PyObject *__pyx_n_s_line_iterator_2;
static PyObject *__pyx_n_s_line_num;
static PyObject *__pyx_n_s_line_pair_iterator;
static PyObject *__pyx_n_s_line_pair_iterator_2;
static PyObject *__pyx_n_s_line_wrapper;
static PyObject *__pyx_n_s_linejunk;
static PyObject *__pyx_n_s_linejunk_2;
static PyObject *__pyx_n_s_linenum;
static PyObject *__pyx_n_s_lines;
static PyObject *__pyx_kp_s_lines_to_compare_must_be_str_not;
static PyObject *__pyx_n_s_lines_to_write;
static PyObject *__pyx_n_s_lineterm;
static PyObject *__pyx_n_s_lo;
static PyObject *__pyx_kp_s_lt;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_make_file;
static PyObject *__pyx_n_s_make_line;
static PyObject *__pyx_n_s_make_prefix;
static PyObject *__pyx_n_s_make_table;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_mark;
static PyObject *__pyx_n_s_markers;
static PyObject *__pyx_n_s_match;
static PyObject *__pyx_n_s_match_object;
static PyObject *__pyx_n_s_matches;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_mdiff;
static PyObject *__pyx_n_s_mdiff_locals__line_iterator;
static PyObject *__pyx_n_s_mdiff_locals__line_pair_iterato;
static PyObject *__pyx_n_s_mdiff_locals__make_line;
static PyObject *__pyx_n_s_mdiff_locals__make_line_locals;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_mro_entries;
static PyObject *__pyx_n_s_msg;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_kp_s_n_must_be_0_r;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_namedtuple;
static PyObject *__pyx_n_s_namedtuple_2;
static PyObject *__pyx_kp_s_nbsp;
static PyObject *__pyx_n_s_ndiff;
static PyObject *__pyx_kp_u_ndiff_line_1444;
static PyObject *__pyx_n_s_next_href;
static PyObject *__pyx_n_s_next_id;
static PyObject *__pyx_n_s_nlargest;
static PyObject *__pyx_n_s_nlargest_2;
static PyObject *__pyx_n_s_nn;
static PyObject *__pyx_n_s_num_blanks_pending;
static PyObject *__pyx_n_s_num_blanks_to_yield;
static PyObject *__pyx_n_s_num_chg;
static PyObject *__pyx_n_s_num_lines;
static PyObject *__pyx_n_s_numb;
static PyObject *__pyx_n_s_numlines;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_pat;
static PyObject *__pyx_n_s_plain_replace;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_possibilities;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_prefix_2;
static PyObject *__pyx_n_s_prefixes;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qformat;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_quick_ratio;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ratio;
static PyObject *__pyx_n_s_ratio_locals_genexpr;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_real_quick_ratio;
static PyObject *__pyx_n_s_record_sub_info;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_restore;
static PyObject *__pyx_kp_u_restore_line_2160;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_reversed;
static PyObject *__pyx_n_s_rstrip;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_kp_s_s_s_2;
static PyObject *__pyx_n_s_score;
static PyObject *__pyx_n_s_second;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_a__self_b__cannot_be_conver;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_name;
static PyObject *__pyx_n_s_set_seq1;
static PyObject *__pyx_n_s_set_seq2;
static PyObject *__pyx_n_s_set_seqs;
static PyObject *__pyx_n_s_setdefault;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_side;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_span;
static PyObject *__pyx_kp_s_span_2;
static PyObject *__pyx_kp_s_span_class_diff_add;
static PyObject *__pyx_kp_s_span_class_diff_chg;
static PyObject *__pyx_kp_s_span_class_diff_sub;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_split_line;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_started;
static PyObject *__pyx_n_s_startswith;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_styles;
static PyObject *__pyx_n_s_styles_2;
static PyObject *__pyx_n_s_sub;
static PyObject *__pyx_n_s_sub_info;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_surrogateescape;
static PyObject *__pyx_n_s_tab_newline_replace;
static PyObject *__pyx_n_s_table;
static PyObject *__pyx_kp_s_table_class_diff_id_difflib_chg;
static PyObject *__pyx_kp_s_table_class_diff_summary_Legend;
static PyObject *__pyx_kp_s_table_diff_font_family_Courier;
static PyObject *__pyx_n_s_table_template;
static PyObject *__pyx_n_s_tabsize;
static PyObject *__pyx_n_s_tabsize_2;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_tag_s;
static PyObject *__pyx_kp_s_tbody_tbody;
static PyObject *__pyx_kp_s_td_class_diff_header_s_s_td_td;
static PyObject *__pyx_kp_s_td_class_diff_next_s_td_s_tr;
static PyObject *__pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t;
static PyObject *__pyx_kp_s_td_td_td_nbsp_No_Differences_Fo;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_kp_s_th_class_diff_next_br_th;
static PyObject *__pyx_kp_s_th_colspan_2_class_diff_header;
static PyObject *__pyx_kp_s_thead_tr_s_s_s_s_tr_thead;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_kp_s_to_d;
static PyObject *__pyx_n_s_to_diff;
static PyObject *__pyx_n_s_to_line;
static PyObject *__pyx_n_s_todata;
static PyObject *__pyx_n_s_todate;
static PyObject *__pyx_n_s_todesc;
static PyObject *__pyx_n_s_tofile;
static PyObject *__pyx_n_s_tofiledate;
static PyObject *__pyx_n_s_toline;
static PyObject *__pyx_n_s_tolines;
static PyObject *__pyx_n_s_tolist;
static PyObject *__pyx_n_s_toprefix;
static PyObject *__pyx_n_s_totext;
static PyObject *__pyx_kp_s_tr_td_class_diff_next_s_s_td_s;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_n_s_unified_diff;
static PyObject *__pyx_kp_u_unified_diff_line_1236;
static PyObject *__pyx_kp_s_unknown_delta_choice_must_be_1_o;
static PyObject *__pyx_kp_s_unknown_tag_r;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_which;
static PyObject *__pyx_n_s_which_2;
static PyObject *__pyx_n_s_word;
static PyObject *__pyx_n_s_wrapcolumn;
static PyObject *__pyx_n_s_wrapcolumn_2;
static PyObject *__pyx_n_s_ws;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xmlcharrefreplace;
static PyObject *__pyx_n_s_zip;
#endif
/* #### Code section: decls ### */
static int __pyx_pf_9cydifflib_15SequenceMatcher___init__(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_isjunk, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_autojunk); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_2set_seqs(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_4set_seq1(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_6set_seq2(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_8find_longest_match(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_alo, PyObject *__pyx_v_ahi, PyObject *__pyx_v_blo, PyObject *__pyx_v_bhi); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_10get_matching_blocks(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_12get_opcodes(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_14get_grouped_opcodes(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_5ratio_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_17ratio(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_19quick_ratio(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_21real_quick_ratio(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_23__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_25__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9cydifflib_get_close_matches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_word, PyObject *__pyx_v_possibilities, PyObject *__pyx_v_n, PyObject *__pyx_v_cutoff); /* proto */
static PyObject *__pyx_pf_9cydifflib_17_keep_original_ws_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_2_keep_original_ws(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s, PyObject *__pyx_v_tag_s); /* proto */
static PyObject *__pyx_pf_9cydifflib_6Differ___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_linejunk, PyObject *__pyx_v_charjunk); /* proto */
static PyObject *__pyx_pf_9cydifflib_6Differ_2compare(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_9cydifflib_6Differ_5_dump(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_tag, PyObject *__pyx_v_x, PyObject *__pyx_v_lo, PyObject *__pyx_v_hi); /* proto */
static PyObject *__pyx_pf_9cydifflib_6Differ_8_plain_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_alo, PyObject *__pyx_v_ahi, PyObject *__pyx_v_b, PyObject *__pyx_v_blo, PyObject *__pyx_v_bhi); /* proto */
static PyObject *__pyx_pf_9cydifflib_6Differ_11_fancy_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_alo, PyObject *__pyx_v_ahi, PyObject *__pyx_v_b, PyObject *__pyx_v_blo, PyObject *__pyx_v_bhi); /* proto */
static PyObject *__pyx_pf_9cydifflib_6Differ_14_fancy_helper(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_alo, PyObject *__pyx_v_ahi, PyObject *__pyx_v_b, PyObject *__pyx_v_blo, PyObject *__pyx_v_bhi); /* proto */
static PyObject *__pyx_pf_9cydifflib_6Differ_17_qformat(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_aline, PyObject *__pyx_v_bline, PyObject *__pyx_v_atags, PyObject *__pyx_v_btags); /* proto */
static PyObject *__pyx_pf_9cydifflib_31__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_4IS_LINE_JUNK(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_line, PyObject *__pyx_v_pat); /* proto */
static PyObject *__pyx_pf_9cydifflib_6IS_CHARACTER_JUNK(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ch, PyObject *__pyx_v_ws); /* proto */
static PyObject *__pyx_pf_9cydifflib_8_format_range_unified(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_start, PyObject *__pyx_v_stop); /* proto */
static PyObject *__pyx_pf_9cydifflib_10unified_diff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_fromfile, PyObject *__pyx_v_tofile, PyObject *__pyx_v_fromfiledate, PyObject *__pyx_v_tofiledate, PyObject *__pyx_v_n, PyObject *__pyx_v_lineterm); /* proto */
static PyObject *__pyx_pf_9cydifflib_13_format_range_context(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_start, PyObject *__pyx_v_stop); /* proto */
static PyObject *__pyx_pf_9cydifflib_12context_diff_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_12context_diff_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_15context_diff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_fromfile, PyObject *__pyx_v_tofile, PyObject *__pyx_v_fromfiledate, PyObject *__pyx_v_tofiledate, PyObject *__pyx_v_n, PyObject *__pyx_v_lineterm); /* proto */
static PyObject *__pyx_pf_9cydifflib_18_check_types(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_9cydifflib_20diff_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dfunc, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_fromfile, PyObject *__pyx_v_tofile, PyObject *__pyx_v_fromfiledate, PyObject *__pyx_v_tofiledate, PyObject *__pyx_v_n, PyObject *__pyx_v_lineterm); /* proto */
static PyObject *__pyx_pf_9cydifflib_10diff_bytes_decode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_9cydifflib_33__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_23ndiff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_linejunk, PyObject *__pyx_v_charjunk); /* proto */
static PyObject *__pyx_pf_9cydifflib_35__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_25_mdiff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fromlines, PyObject *__pyx_v_tolines, PyObject *__pyx_v_context, PyObject *__pyx_v_linejunk, PyObject *__pyx_v_charjunk); /* proto */
static PyObject *__pyx_pf_9cydifflib_39__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_41__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_6_mdiff_10_make_line_record_sub_info(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_match_object, PyObject *__pyx_v_sub_info); /* proto */
static PyObject *__pyx_pf_9cydifflib_6_mdiff__make_line(PyObject *__pyx_self, PyObject *__pyx_v_lines, PyObject *__pyx_v_format_key, PyObject *__pyx_v_side, PyObject *__pyx_v_num_lines); /* proto */
static PyObject *__pyx_pf_9cydifflib_6_mdiff_2_line_iterator(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_6_mdiff_5_line_pair_iterator(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_37__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_tabsize, PyObject *__pyx_v_wrapcolumn, PyObject *__pyx_v_linejunk, PyObject *__pyx_v_charjunk); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_2make_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_fromlines, PyObject *__pyx_v_tolines, PyObject *__pyx_v_fromdesc, PyObject *__pyx_v_todesc, PyObject *__pyx_v_context, PyObject *__pyx_v_numlines, PyObject *__pyx_v_charset); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_20_tab_newline_replace_expand_tabs(PyObject *__pyx_self, PyObject *__pyx_v_line); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_4_tab_newline_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_fromlines, PyObject *__pyx_v_tolines); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_6_split_line(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data_list, PyObject *__pyx_v_line_num, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_8_line_wrapper(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_diffs); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_11_collect_lines(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_diffs); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_13_format_line(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_side, CYTHON_UNUSED PyObject *__pyx_v_flag, PyObject *__pyx_v_linenum, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_15_make_prefix(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_17_convert_flags(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_fromlist, PyObject *__pyx_v_tolist, PyObject *__pyx_v_flaglist, PyObject *__pyx_v_context, PyObject *__pyx_v_numlines); /* proto */
static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_19make_table(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_fromlines, PyObject *__pyx_v_tolines, PyObject *__pyx_v_fromdesc, PyObject *__pyx_v_todesc, PyObject *__pyx_v_context, PyObject *__pyx_v_numlines); /* proto */
static PyObject *__pyx_pf_9cydifflib_28restore(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_delta, PyObject *__pyx_v_which); /* proto */
static PyObject *__pyx_tp_new_9cydifflib_SequenceMatcher(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct__get_grouped_opcodes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_1_ratio(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_3__keep_original_ws(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_5_compare(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_6__dump(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_7__plain_replace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_8__fancy_replace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_9__fancy_helper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_10__qformat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_11_unified_diff(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_12_context_diff(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_13_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_14_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_15_diff_bytes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_16__mdiff(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_17__line_iterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_18__line_pair_iterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_19__tab_newline_replace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_20__line_wrapper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_21_restore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_setdefault = {0, 0, 0, 0, 0};
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_6;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_0_74;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_200;
#endif
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_slice__38;
static PyObject *__pyx_slice__90;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__104;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__132;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__138;
static PyObject *__pyx_codeobj__142;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__156;
static PyObject *__pyx_codeobj__158;
static PyObject *__pyx_codeobj__161;
static PyObject *__pyx_codeobj__163;
static PyObject *__pyx_codeobj__166;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__172;
static PyObject *__pyx_codeobj__174;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_USE_MODULE_STATE
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_9cydifflib_SequenceMatcher;
  PyObject *__pyx_type_9cydifflib_SequenceMatcher;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_1_ratio;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_2_genexpr;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_4_genexpr;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_5_compare;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_5_compare;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_6__dump;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_6__dump;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_10__qformat;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_12_context_diff;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_13_genexpr;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_14_genexpr;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_16__mdiff;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper;
  PyTypeObject *__pyx_ptype_9cydifflib___pyx_scope_struct_21_restore;
  PyObject *__pyx_type_9cydifflib___pyx_scope_struct_21_restore;
  PyObject *__pyx_kp_b_;
  PyObject *__pyx_kp_s_;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_s_AttributeError;
  PyObject *__pyx_kp_u_Compare_a_and_b_lists_of_string;
  PyObject *__pyx_kp_u_Compare_two_sequences_of_lines;
  PyObject *__pyx_kp_u_Compare_two_sequences_of_lines_2;
  PyObject *__pyx_kp_u_Compare_two_sequences_of_lines_3;
  PyObject *__pyx_kp_s_DOCTYPE_html_PUBLIC_W3C_DTD_XHT;
  PyObject *__pyx_n_s_Differ;
  PyObject *__pyx_n_s_Differ___init;
  PyObject *__pyx_n_s_Differ__dump;
  PyObject *__pyx_n_s_Differ__fancy_helper;
  PyObject *__pyx_n_s_Differ__fancy_replace;
  PyObject *__pyx_kp_u_Differ__fancy_replace_line_1034;
  PyObject *__pyx_n_s_Differ__plain_replace;
  PyObject *__pyx_n_s_Differ__qformat;
  PyObject *__pyx_kp_u_Differ__qformat_line_1140;
  PyObject *__pyx_n_s_Differ_compare;
  PyObject *__pyx_kp_u_Differ_compare_line_974;
  PyObject *__pyx_kp_s_Differ_is_a_class_for_comparing;
  PyObject *__pyx_kp_u_Find_longest_matching_block_in_a;
  PyObject *__pyx_kp_s_For_producing_HTML_side_by_side;
  PyObject *__pyx_kp_u_Format_output_and_deal_with_tab;
  PyObject *__pyx_kp_u_Generate_one_of_the_two_sequenc;
  PyObject *__pyx_n_s_GenericAlias;
  PyObject *__pyx_n_s_HtmlDiff;
  PyObject *__pyx_n_s_HtmlDiff___init;
  PyObject *__pyx_n_s_HtmlDiff__collect_lines;
  PyObject *__pyx_n_s_HtmlDiff__convert_flags;
  PyObject *__pyx_n_s_HtmlDiff__format_line;
  PyObject *__pyx_n_s_HtmlDiff__line_wrapper;
  PyObject *__pyx_n_s_HtmlDiff__make_prefix;
  PyObject *__pyx_n_s_HtmlDiff__split_line;
  PyObject *__pyx_n_s_HtmlDiff__tab_newline_replace;
  PyObject *__pyx_n_s_HtmlDiff__tab_newline_replace_lo;
  PyObject *__pyx_n_s_HtmlDiff_make_file;
  PyObject *__pyx_n_s_HtmlDiff_make_table;
  PyObject *__pyx_n_s_IS_CHARACTER_JUNK;
  PyObject *__pyx_kp_u_IS_CHARACTER_JUNK_line_1202;
  PyObject *__pyx_n_s_IS_LINE_JUNK;
  PyObject *__pyx_kp_u_IS_LINE_JUNK_line_1186;
  PyObject *__pyx_kp_u_Isolate_change_clusters_by_elim;
  PyObject *__pyx_n_s_Match;
  PyObject *__pyx_kp_u_Return_True_for_ignorable_chara;
  PyObject *__pyx_kp_u_Return_True_for_ignorable_line;
  PyObject *__pyx_kp_u_Return_a_measure_of_the_sequence;
  PyObject *__pyx_kp_u_Return_list_of_5_tuples_describi;
  PyObject *__pyx_kp_u_Return_list_of_triples_describin;
  PyObject *__pyx_n_s_SequenceMatcher;
  PyObject *__pyx_n_s_SequenceMatcher___reduce_cython;
  PyObject *__pyx_n_s_SequenceMatcher___setstate_cytho;
  PyObject *__pyx_n_s_SequenceMatcher_find_longest_mat;
  PyObject *__pyx_kp_u_SequenceMatcher_find_longest_mat_2;
  PyObject *__pyx_n_s_SequenceMatcher_get_grouped_opco;
  PyObject *__pyx_kp_u_SequenceMatcher_get_grouped_opco_2;
  PyObject *__pyx_n_s_SequenceMatcher_get_matching_blo;
  PyObject *__pyx_kp_u_SequenceMatcher_get_matching_blo_2;
  PyObject *__pyx_n_s_SequenceMatcher_get_opcodes;
  PyObject *__pyx_kp_u_SequenceMatcher_get_opcodes_line;
  PyObject *__pyx_n_s_SequenceMatcher_quick_ratio;
  PyObject *__pyx_n_s_SequenceMatcher_ratio;
  PyObject *__pyx_kp_u_SequenceMatcher_ratio_line_730;
  PyObject *__pyx_n_s_SequenceMatcher_real_quick_ratio;
  PyObject *__pyx_n_s_SequenceMatcher_set_seq1;
  PyObject *__pyx_kp_u_SequenceMatcher_set_seq1_line_28;
  PyObject *__pyx_n_s_SequenceMatcher_set_seq2;
  PyObject *__pyx_kp_u_SequenceMatcher_set_seq2_line_31;
  PyObject *__pyx_n_s_SequenceMatcher_set_seqs;
  PyObject *__pyx_kp_u_SequenceMatcher_set_seqs_line_27;
  PyObject *__pyx_kp_u_Set_the_first_sequence_to_be_com;
  PyObject *__pyx_kp_u_Set_the_second_sequence_to_be_co;
  PyObject *__pyx_kp_u_Set_the_two_sequences_to_be_comp;
  PyObject *__pyx_n_s_StopIteration;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_u_Use_SequenceMatcher_to_return_li;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_u_When_replacing_one_block_of_lin;
  PyObject *__pyx_n_s_X;
  PyObject *__pyx_kp_s__11;
  PyObject *__pyx_kp_s__12;
  PyObject *__pyx_n_s__143;
  PyObject *__pyx_kp_s__15;
  PyObject *__pyx_kp_u__16;
  PyObject *__pyx_kp_b__17;
  PyObject *__pyx_kp_s__17;
  PyObject *__pyx_kp_u__17;
  PyObject *__pyx_kp_s__18;
  PyObject *__pyx_kp_s__19;
  PyObject *__pyx_kp_s__20;
  PyObject *__pyx_kp_s__21;
  PyObject *__pyx_kp_s__23;
  PyObject *__pyx_kp_s__24;
  PyObject *__pyx_kp_s__25;
  PyObject *__pyx_kp_s__26;
  PyObject *__pyx_kp_s__28;
  PyObject *__pyx_kp_s__29;
  PyObject *__pyx_kp_s__30;
  PyObject *__pyx_kp_s__31;
  PyObject *__pyx_kp_s__32;
  PyObject *__pyx_kp_s__39;
  PyObject *__pyx_kp_s__4;
  PyObject *__pyx_kp_s__42;
  PyObject *__pyx_kp_s__43;
  PyObject *__pyx_kp_s__44;
  PyObject *__pyx_kp_s__45;
  PyObject *__pyx_kp_s__46;
  PyObject *__pyx_kp_s__47;
  PyObject *__pyx_kp_s__49;
  PyObject *__pyx_kp_s__50;
  PyObject *__pyx_kp_s__51;
  PyObject *__pyx_kp_s__52;
  PyObject *__pyx_n_s__57;
  PyObject *__pyx_kp_s__58;
  PyObject *__pyx_kp_s__6;
  PyObject *__pyx_kp_s__67;
  PyObject *__pyx_kp_s__7;
  PyObject *__pyx_kp_s__72;
  PyObject *__pyx_kp_s__75;
  PyObject *__pyx_kp_s__78;
  PyObject *__pyx_kp_s__81;
  PyObject *__pyx_kp_s__83;
  PyObject *__pyx_kp_s__85;
  PyObject *__pyx_n_s_a;
  PyObject *__pyx_kp_s_a_b_size;
  PyObject *__pyx_kp_s_a_href_difflib_chg__s_0_f_a;
  PyObject *__pyx_kp_s_a_href_difflib_chg__s__d_n_a;
  PyObject *__pyx_kp_s_a_href_difflib_chg__s_top_t_a;
  PyObject *__pyx_n_s_aelt;
  PyObject *__pyx_n_s_ahi;
  PyObject *__pyx_n_s_ahi_2;
  PyObject *__pyx_n_s_ai;
  PyObject *__pyx_n_s_ai1;
  PyObject *__pyx_n_s_ai2;
  PyObject *__pyx_n_s_aline;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_kp_s_all_arguments_must_be_bytes_not;
  PyObject *__pyx_kp_s_all_arguments_must_be_str_not_r;
  PyObject *__pyx_n_s_alo;
  PyObject *__pyx_kp_s_amp;
  PyObject *__pyx_n_s_answer;
  PyObject *__pyx_n_s_append;
  PyObject *__pyx_n_s_arg;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_ascii;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_atags;
  PyObject *__pyx_n_s_autojunk;
  PyObject *__pyx_n_s_avail;
  PyObject *__pyx_n_s_availhas;
  PyObject *__pyx_n_s_b;
  PyObject *__pyx_n_s_begin;
  PyObject *__pyx_n_s_beginning;
  PyObject *__pyx_n_s_belt;
  PyObject *__pyx_n_s_best_i;
  PyObject *__pyx_n_s_best_j;
  PyObject *__pyx_n_s_best_ratio;
  PyObject *__pyx_n_s_bhi;
  PyObject *__pyx_n_s_bhi_2;
  PyObject *__pyx_n_s_bj;
  PyObject *__pyx_n_s_bj1;
  PyObject *__pyx_n_s_bj2;
  PyObject *__pyx_n_s_bline;
  PyObject *__pyx_n_s_blo;
  PyObject *__pyx_n_s_btags;
  PyObject *__pyx_n_s_ch;
  PyObject *__pyx_n_s_change_re;
  PyObject *__pyx_n_s_charjunk;
  PyObject *__pyx_n_s_charjunk_2;
  PyObject *__pyx_n_s_charset;
  PyObject *__pyx_n_s_check_types;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_codes;
  PyObject *__pyx_n_s_collect_lines;
  PyObject *__pyx_n_s_collections;
  PyObject *__pyx_n_s_compare;
  PyObject *__pyx_n_s_compile;
  PyObject *__pyx_n_s_contains;
  PyObject *__pyx_n_s_context;
  PyObject *__pyx_n_s_contextLines;
  PyObject *__pyx_n_s_context_diff;
  PyObject *__pyx_kp_u_context_diff_line_1321;
  PyObject *__pyx_n_s_context_diff_locals_genexpr;
  PyObject *__pyx_n_s_context_lines;
  PyObject *__pyx_n_s_convert_flags;
  PyObject *__pyx_n_s_count;
  PyObject *__pyx_n_s_cruncher;
  PyObject *__pyx_n_s_cutoff;
  PyObject *__pyx_kp_s_cutoff_must_be_in_0_0_1_0_r;
  PyObject *__pyx_n_s_cydifflib;
  PyObject *__pyx_kp_s_cydifflib_pyx;
  PyObject *__pyx_kp_s_d;
  PyObject *__pyx_n_s_data_list;
  PyObject *__pyx_n_s_data_rows;
  PyObject *__pyx_n_s_decode;
  PyObject *__pyx_n_s_default_prefix;
  PyObject *__pyx_n_s_delete;
  PyObject *__pyx_n_s_delta;
  PyObject *__pyx_n_s_dfunc;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_diff_bytes;
  PyObject *__pyx_n_s_diff_bytes_locals_decode;
  PyObject *__pyx_n_s_diff_lines_iterator;
  PyObject *__pyx_n_s_diffs;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_dump;
  PyObject *__pyx_n_s_elt;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_end;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_eqi;
  PyObject *__pyx_n_s_eqj;
  PyObject *__pyx_n_s_equal;
  PyObject *__pyx_n_s_err;
  PyObject *__pyx_n_s_expand_tabs;
  PyObject *__pyx_n_s_expandtabs;
  PyObject *__pyx_n_s_fancy_helper;
  PyObject *__pyx_n_s_fancy_replace;
  PyObject *__pyx_n_s_file1_range;
  PyObject *__pyx_n_s_file2_range;
  PyObject *__pyx_n_s_file_template;
  PyObject *__pyx_n_s_find_longest_match;
  PyObject *__pyx_n_s_first;
  PyObject *__pyx_n_s_flag;
  PyObject *__pyx_n_s_flaglist;
  PyObject *__pyx_n_s_fmt;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_format_key;
  PyObject *__pyx_n_s_format_line;
  PyObject *__pyx_n_s_format_range_context;
  PyObject *__pyx_n_s_format_range_unified;
  PyObject *__pyx_n_s_found_diff;
  PyObject *__pyx_n_s_fromDiff;
  PyObject *__pyx_kp_s_from_d;
  PyObject *__pyx_n_s_from_line;
  PyObject *__pyx_n_s_fromdata;
  PyObject *__pyx_n_s_fromdate;
  PyObject *__pyx_n_s_fromdesc;
  PyObject *__pyx_n_s_fromfile;
  PyObject *__pyx_n_s_fromfiledate;
  PyObject *__pyx_n_s_fromline;
  PyObject *__pyx_n_s_fromlines;
  PyObject *__pyx_n_s_fromlist;
  PyObject *__pyx_n_s_fromprefix;
  PyObject *__pyx_n_s_fromtext;
  PyObject *__pyx_n_s_fullbcount;
  PyObject *__pyx_n_s_g;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_genexpr;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_get_close_matches;
  PyObject *__pyx_kp_u_get_close_matches_line_799;
  PyObject *__pyx_n_s_get_grouped_opcodes;
  PyObject *__pyx_n_s_get_matching_blocks;
  PyObject *__pyx_n_s_get_opcodes;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_group;
  PyObject *__pyx_kp_s_gt;
  PyObject *__pyx_n_s_header_row;
  PyObject *__pyx_n_s_heapq;
  PyObject *__pyx_n_s_hi;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_i1;
  PyObject *__pyx_n_s_i2;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_kp_s_id_difflib_chg__s__d;
  PyObject *__pyx_kp_s_id_s_s;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_in_change;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_insert;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_isjunk;
  PyObject *__pyx_n_s_isspace;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_s_j;
  PyObject *__pyx_n_s_j1;
  PyObject *__pyx_n_s_j2;
  PyObject *__pyx_n_s_join;
  PyObject *__pyx_n_s_keep_original_ws;
  PyObject *__pyx_n_s_keep_original_ws_locals_genexpr;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_la;
  PyObject *__pyx_n_s_last;
  PyObject *__pyx_n_s_lb;
  PyObject *__pyx_n_s_legend;
  PyObject *__pyx_n_s_legend_2;
  PyObject *__pyx_n_s_length;
  PyObject *__pyx_n_s_line;
  PyObject *__pyx_n_s_line1;
  PyObject *__pyx_n_s_line2;
  PyObject *__pyx_n_s_line_iterator;
  PyObject *__pyx_n_s_line_iterator_2;
  PyObject *__pyx_n_s_line_num;
  PyObject *__pyx_n_s_line_pair_iterator;
  PyObject *__pyx_n_s_line_pair_iterator_2;
  PyObject *__pyx_n_s_line_wrapper;
  PyObject *__pyx_n_s_linejunk;
  PyObject *__pyx_n_s_linejunk_2;
  PyObject *__pyx_n_s_linenum;
  PyObject *__pyx_n_s_lines;
  PyObject *__pyx_kp_s_lines_to_compare_must_be_str_not;
  PyObject *__pyx_n_s_lines_to_write;
  PyObject *__pyx_n_s_lineterm;
  PyObject *__pyx_n_s_lo;
  PyObject *__pyx_kp_s_lt;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_make_file;
  PyObject *__pyx_n_s_make_line;
  PyObject *__pyx_n_s_make_prefix;
  PyObject *__pyx_n_s_make_table;
  PyObject *__pyx_n_s_map;
  PyObject *__pyx_n_s_mark;
  PyObject *__pyx_n_s_markers;
  PyObject *__pyx_n_s_match;
  PyObject *__pyx_n_s_match_object;
  PyObject *__pyx_n_s_matches;
  PyObject *__pyx_n_s_max;
  PyObject *__pyx_n_s_mdiff;
  PyObject *__pyx_n_s_mdiff_locals__line_iterator;
  PyObject *__pyx_n_s_mdiff_locals__line_pair_iterato;
  PyObject *__pyx_n_s_mdiff_locals__make_line;
  PyObject *__pyx_n_s_mdiff_locals__make_line_locals;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_mro_entries;
  PyObject *__pyx_n_s_msg;
  PyObject *__pyx_n_s_n;
  PyObject *__pyx_kp_s_n_must_be_0_r;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_namedtuple;
  PyObject *__pyx_n_s_namedtuple_2;
  PyObject *__pyx_kp_s_nbsp;
  PyObject *__pyx_n_s_ndiff;
  PyObject *__pyx_kp_u_ndiff_line_1444;
  PyObject *__pyx_n_s_next_href;
  PyObject *__pyx_n_s_next_id;
  PyObject *__pyx_n_s_nlargest;
  PyObject *__pyx_n_s_nlargest_2;
  PyObject *__pyx_n_s_nn;
  PyObject *__pyx_n_s_num_blanks_pending;
  PyObject *__pyx_n_s_num_blanks_to_yield;
  PyObject *__pyx_n_s_num_chg;
  PyObject *__pyx_n_s_num_lines;
  PyObject *__pyx_n_s_numb;
  PyObject *__pyx_n_s_numlines;
  PyObject *__pyx_n_s_object;
  PyObject *__pyx_n_s_pat;
  PyObject *__pyx_n_s_plain_replace;
  PyObject *__pyx_n_s_pop;
  PyObject *__pyx_n_s_possibilities;
  PyObject *__pyx_n_s_prefix;
  PyObject *__pyx_n_s_prefix_2;
  PyObject *__pyx_n_s_prefixes;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_qformat;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_quick_ratio;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_ratio;
  PyObject *__pyx_n_s_ratio_locals_genexpr;
  PyObject *__pyx_n_s_re;
  PyObject *__pyx_n_s_real_quick_ratio;
  PyObject *__pyx_n_s_record_sub_info;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_replace;
  PyObject *__pyx_n_s_restore;
  PyObject *__pyx_kp_u_restore_line_2160;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_reversed;
  PyObject *__pyx_n_s_rstrip;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_kp_s_s_s;
  PyObject *__pyx_kp_s_s_s_2;
  PyObject *__pyx_n_s_score;
  PyObject *__pyx_n_s_second;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self_a__self_b__cannot_be_conver;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_set_seq1;
  PyObject *__pyx_n_s_set_seq2;
  PyObject *__pyx_n_s_set_seqs;
  PyObject *__pyx_n_s_setdefault;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_side;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_span;
  PyObject *__pyx_kp_s_span_2;
  PyObject *__pyx_kp_s_span_class_diff_add;
  PyObject *__pyx_kp_s_span_class_diff_chg;
  PyObject *__pyx_kp_s_span_class_diff_sub;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_split_line;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_started;
  PyObject *__pyx_n_s_startswith;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_styles;
  PyObject *__pyx_n_s_styles_2;
  PyObject *__pyx_n_s_sub;
  PyObject *__pyx_n_s_sub_info;
  PyObject *__pyx_n_s_sum;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_surrogateescape;
  PyObject *__pyx_n_s_tab_newline_replace;
  PyObject *__pyx_n_s_table;
  PyObject *__pyx_kp_s_table_class_diff_id_difflib_chg;
  PyObject *__pyx_kp_s_table_class_diff_summary_Legend;
  PyObject *__pyx_kp_s_table_diff_font_family_Courier;
  PyObject *__pyx_n_s_table_template;
  PyObject *__pyx_n_s_tabsize;
  PyObject *__pyx_n_s_tabsize_2;
  PyObject *__pyx_n_s_tag;
  PyObject *__pyx_n_s_tag_s;
  PyObject *__pyx_kp_s_tbody_tbody;
  PyObject *__pyx_kp_s_td_class_diff_header_s_s_td_td;
  PyObject *__pyx_kp_s_td_class_diff_next_s_td_s_tr;
  PyObject *__pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t;
  PyObject *__pyx_kp_s_td_td_td_nbsp_No_Differences_Fo;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_text;
  PyObject *__pyx_kp_s_th_class_diff_next_br_th;
  PyObject *__pyx_kp_s_th_colspan_2_class_diff_header;
  PyObject *__pyx_kp_s_thead_tr_s_s_s_s_tr_thead;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_kp_s_to_d;
  PyObject *__pyx_n_s_to_diff;
  PyObject *__pyx_n_s_to_line;
  PyObject *__pyx_n_s_todata;
  PyObject *__pyx_n_s_todate;
  PyObject *__pyx_n_s_todesc;
  PyObject *__pyx_n_s_tofile;
  PyObject *__pyx_n_s_tofiledate;
  PyObject *__pyx_n_s_toline;
  PyObject *__pyx_n_s_tolines;
  PyObject *__pyx_n_s_tolist;
  PyObject *__pyx_n_s_toprefix;
  PyObject *__pyx_n_s_totext;
  PyObject *__pyx_kp_s_tr_td_class_diff_next_s_s_td_s;
  PyObject *__pyx_n_s_types;
  PyObject *__pyx_n_s_unified_diff;
  PyObject *__pyx_kp_u_unified_diff_line_1236;
  PyObject *__pyx_kp_s_unknown_delta_choice_must_be_1_o;
  PyObject *__pyx_kp_s_unknown_tag_r;
  PyObject *__pyx_kp_s_utf_8;
  PyObject *__pyx_n_s_which;
  PyObject *__pyx_n_s_which_2;
  PyObject *__pyx_n_s_word;
  PyObject *__pyx_n_s_wrapcolumn;
  PyObject *__pyx_n_s_wrapcolumn_2;
  PyObject *__pyx_n_s_ws;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_s_xmlcharrefreplace;
  PyObject *__pyx_n_s_zip;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_6;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_0_74;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_8;
  PyObject *__pyx_int_100;
  PyObject *__pyx_int_200;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_slice__38;
  PyObject *__pyx_slice__90;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__68;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__77;
  PyObject *__pyx_tuple__79;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__87;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_tuple__94;
  PyObject *__pyx_tuple__96;
  PyObject *__pyx_tuple__98;
  PyObject *__pyx_codeobj__2;
  PyObject *__pyx_codeobj__5;
  PyObject *__pyx_codeobj__8;
  PyObject *__pyx_codeobj__9;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_tuple__101;
  PyObject *__pyx_tuple__103;
  PyObject *__pyx_tuple__105;
  PyObject *__pyx_tuple__106;
  PyObject *__pyx_tuple__107;
  PyObject *__pyx_tuple__109;
  PyObject *__pyx_tuple__111;
  PyObject *__pyx_tuple__113;
  PyObject *__pyx_tuple__115;
  PyObject *__pyx_tuple__117;
  PyObject *__pyx_tuple__119;
  PyObject *__pyx_tuple__120;
  PyObject *__pyx_tuple__122;
  PyObject *__pyx_tuple__124;
  PyObject *__pyx_tuple__125;
  PyObject *__pyx_tuple__126;
  PyObject *__pyx_tuple__127;
  PyObject *__pyx_tuple__128;
  PyObject *__pyx_tuple__129;
  PyObject *__pyx_tuple__130;
  PyObject *__pyx_tuple__131;
  PyObject *__pyx_tuple__133;
  PyObject *__pyx_tuple__134;
  PyObject *__pyx_tuple__136;
  PyObject *__pyx_tuple__137;
  PyObject *__pyx_tuple__139;
  PyObject *__pyx_tuple__140;
  PyObject *__pyx_tuple__141;
  PyObject *__pyx_tuple__144;
  PyObject *__pyx_tuple__145;
  PyObject *__pyx_tuple__146;
  PyObject *__pyx_tuple__148;
  PyObject *__pyx_tuple__149;
  PyObject *__pyx_tuple__150;
  PyObject *__pyx_tuple__152;
  PyObject *__pyx_tuple__153;
  PyObject *__pyx_tuple__154;
  PyObject *__pyx_tuple__155;
  PyObject *__pyx_tuple__157;
  PyObject *__pyx_tuple__159;
  PyObject *__pyx_tuple__160;
  PyObject *__pyx_tuple__162;
  PyObject *__pyx_tuple__164;
  PyObject *__pyx_tuple__165;
  PyObject *__pyx_tuple__167;
  PyObject *__pyx_tuple__169;
  PyObject *__pyx_tuple__171;
  PyObject *__pyx_tuple__173;
  PyObject *__pyx_tuple__175;
  PyObject *__pyx_tuple__176;
  PyObject *__pyx_codeobj__10;
  PyObject *__pyx_codeobj__13;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__112;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__118;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__123;
  PyObject *__pyx_codeobj__132;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__138;
  PyObject *__pyx_codeobj__142;
  PyObject *__pyx_codeobj__147;
  PyObject *__pyx_codeobj__151;
  PyObject *__pyx_codeobj__156;
  PyObject *__pyx_codeobj__158;
  PyObject *__pyx_codeobj__161;
  PyObject *__pyx_codeobj__163;
  PyObject *__pyx_codeobj__166;
  PyObject *__pyx_codeobj__168;
  PyObject *__pyx_codeobj__170;
  PyObject *__pyx_codeobj__172;
  PyObject *__pyx_codeobj__174;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib_SequenceMatcher);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib_SequenceMatcher);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_1_ratio);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_2_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_4_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_5_compare);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_5_compare);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_6__dump);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_6__dump);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_10__qformat);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_12_context_diff);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_13_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_14_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_16__mdiff);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper);
  Py_CLEAR(clear_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_21_restore);
  Py_CLEAR(clear_module_state->__pyx_type_9cydifflib___pyx_scope_struct_21_restore);
  Py_CLEAR(clear_module_state->__pyx_kp_b_);
  Py_CLEAR(clear_module_state->__pyx_kp_s_);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_AttributeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Compare_a_and_b_lists_of_string);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Compare_two_sequences_of_lines);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Compare_two_sequences_of_lines_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Compare_two_sequences_of_lines_3);
  Py_CLEAR(clear_module_state->__pyx_kp_s_DOCTYPE_html_PUBLIC_W3C_DTD_XHT);
  Py_CLEAR(clear_module_state->__pyx_n_s_Differ);
  Py_CLEAR(clear_module_state->__pyx_n_s_Differ___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_Differ__dump);
  Py_CLEAR(clear_module_state->__pyx_n_s_Differ__fancy_helper);
  Py_CLEAR(clear_module_state->__pyx_n_s_Differ__fancy_replace);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Differ__fancy_replace_line_1034);
  Py_CLEAR(clear_module_state->__pyx_n_s_Differ__plain_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_Differ__qformat);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Differ__qformat_line_1140);
  Py_CLEAR(clear_module_state->__pyx_n_s_Differ_compare);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Differ_compare_line_974);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Differ_is_a_class_for_comparing);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Find_longest_matching_block_in_a);
  Py_CLEAR(clear_module_state->__pyx_kp_s_For_producing_HTML_side_by_side);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Format_output_and_deal_with_tab);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Generate_one_of_the_two_sequenc);
  Py_CLEAR(clear_module_state->__pyx_n_s_GenericAlias);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff__collect_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff__convert_flags);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff__format_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff__line_wrapper);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff__make_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff__split_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff__tab_newline_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff__tab_newline_replace_lo);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff_make_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_HtmlDiff_make_table);
  Py_CLEAR(clear_module_state->__pyx_n_s_IS_CHARACTER_JUNK);
  Py_CLEAR(clear_module_state->__pyx_kp_u_IS_CHARACTER_JUNK_line_1202);
  Py_CLEAR(clear_module_state->__pyx_n_s_IS_LINE_JUNK);
  Py_CLEAR(clear_module_state->__pyx_kp_u_IS_LINE_JUNK_line_1186);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Isolate_change_clusters_by_elim);
  Py_CLEAR(clear_module_state->__pyx_n_s_Match);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_True_for_ignorable_chara);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_True_for_ignorable_line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_a_measure_of_the_sequence);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_list_of_5_tuples_describi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_list_of_triples_describin);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher___setstate_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_find_longest_mat);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SequenceMatcher_find_longest_mat_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_get_grouped_opco);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SequenceMatcher_get_grouped_opco_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_get_matching_blo);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SequenceMatcher_get_matching_blo_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_get_opcodes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SequenceMatcher_get_opcodes_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_quick_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_ratio);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SequenceMatcher_ratio_line_730);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_real_quick_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_set_seq1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SequenceMatcher_set_seq1_line_28);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_set_seq2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SequenceMatcher_set_seq2_line_31);
  Py_CLEAR(clear_module_state->__pyx_n_s_SequenceMatcher_set_seqs);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SequenceMatcher_set_seqs_line_27);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Set_the_first_sequence_to_be_com);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Set_the_second_sequence_to_be_co);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Set_the_two_sequences_to_be_comp);
  Py_CLEAR(clear_module_state->__pyx_n_s_StopIteration);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Use_SequenceMatcher_to_return_li);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_When_replacing_one_block_of_lin);
  Py_CLEAR(clear_module_state->__pyx_n_s_X);
  Py_CLEAR(clear_module_state->__pyx_kp_s__11);
  Py_CLEAR(clear_module_state->__pyx_kp_s__12);
  Py_CLEAR(clear_module_state->__pyx_n_s__143);
  Py_CLEAR(clear_module_state->__pyx_kp_s__15);
  Py_CLEAR(clear_module_state->__pyx_kp_u__16);
  Py_CLEAR(clear_module_state->__pyx_kp_b__17);
  Py_CLEAR(clear_module_state->__pyx_kp_s__17);
  Py_CLEAR(clear_module_state->__pyx_kp_u__17);
  Py_CLEAR(clear_module_state->__pyx_kp_s__18);
  Py_CLEAR(clear_module_state->__pyx_kp_s__19);
  Py_CLEAR(clear_module_state->__pyx_kp_s__20);
  Py_CLEAR(clear_module_state->__pyx_kp_s__21);
  Py_CLEAR(clear_module_state->__pyx_kp_s__23);
  Py_CLEAR(clear_module_state->__pyx_kp_s__24);
  Py_CLEAR(clear_module_state->__pyx_kp_s__25);
  Py_CLEAR(clear_module_state->__pyx_kp_s__26);
  Py_CLEAR(clear_module_state->__pyx_kp_s__28);
  Py_CLEAR(clear_module_state->__pyx_kp_s__29);
  Py_CLEAR(clear_module_state->__pyx_kp_s__30);
  Py_CLEAR(clear_module_state->__pyx_kp_s__31);
  Py_CLEAR(clear_module_state->__pyx_kp_s__32);
  Py_CLEAR(clear_module_state->__pyx_kp_s__39);
  Py_CLEAR(clear_module_state->__pyx_kp_s__4);
  Py_CLEAR(clear_module_state->__pyx_kp_s__42);
  Py_CLEAR(clear_module_state->__pyx_kp_s__43);
  Py_CLEAR(clear_module_state->__pyx_kp_s__44);
  Py_CLEAR(clear_module_state->__pyx_kp_s__45);
  Py_CLEAR(clear_module_state->__pyx_kp_s__46);
  Py_CLEAR(clear_module_state->__pyx_kp_s__47);
  Py_CLEAR(clear_module_state->__pyx_kp_s__49);
  Py_CLEAR(clear_module_state->__pyx_kp_s__50);
  Py_CLEAR(clear_module_state->__pyx_kp_s__51);
  Py_CLEAR(clear_module_state->__pyx_kp_s__52);
  Py_CLEAR(clear_module_state->__pyx_n_s__57);
  Py_CLEAR(clear_module_state->__pyx_kp_s__58);
  Py_CLEAR(clear_module_state->__pyx_kp_s__6);
  Py_CLEAR(clear_module_state->__pyx_kp_s__67);
  Py_CLEAR(clear_module_state->__pyx_kp_s__7);
  Py_CLEAR(clear_module_state->__pyx_kp_s__72);
  Py_CLEAR(clear_module_state->__pyx_kp_s__75);
  Py_CLEAR(clear_module_state->__pyx_kp_s__78);
  Py_CLEAR(clear_module_state->__pyx_kp_s__81);
  Py_CLEAR(clear_module_state->__pyx_kp_s__83);
  Py_CLEAR(clear_module_state->__pyx_kp_s__85);
  Py_CLEAR(clear_module_state->__pyx_n_s_a);
  Py_CLEAR(clear_module_state->__pyx_kp_s_a_b_size);
  Py_CLEAR(clear_module_state->__pyx_kp_s_a_href_difflib_chg__s_0_f_a);
  Py_CLEAR(clear_module_state->__pyx_kp_s_a_href_difflib_chg__s__d_n_a);
  Py_CLEAR(clear_module_state->__pyx_kp_s_a_href_difflib_chg__s_top_t_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_aelt);
  Py_CLEAR(clear_module_state->__pyx_n_s_ahi);
  Py_CLEAR(clear_module_state->__pyx_n_s_ahi_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ai);
  Py_CLEAR(clear_module_state->__pyx_n_s_ai1);
  Py_CLEAR(clear_module_state->__pyx_n_s_ai2);
  Py_CLEAR(clear_module_state->__pyx_n_s_aline);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_kp_s_all_arguments_must_be_bytes_not);
  Py_CLEAR(clear_module_state->__pyx_kp_s_all_arguments_must_be_str_not_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_alo);
  Py_CLEAR(clear_module_state->__pyx_kp_s_amp);
  Py_CLEAR(clear_module_state->__pyx_n_s_answer);
  Py_CLEAR(clear_module_state->__pyx_n_s_append);
  Py_CLEAR(clear_module_state->__pyx_n_s_arg);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_ascii);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_atags);
  Py_CLEAR(clear_module_state->__pyx_n_s_autojunk);
  Py_CLEAR(clear_module_state->__pyx_n_s_avail);
  Py_CLEAR(clear_module_state->__pyx_n_s_availhas);
  Py_CLEAR(clear_module_state->__pyx_n_s_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_begin);
  Py_CLEAR(clear_module_state->__pyx_n_s_beginning);
  Py_CLEAR(clear_module_state->__pyx_n_s_belt);
  Py_CLEAR(clear_module_state->__pyx_n_s_best_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_best_j);
  Py_CLEAR(clear_module_state->__pyx_n_s_best_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_bhi);
  Py_CLEAR(clear_module_state->__pyx_n_s_bhi_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_bj);
  Py_CLEAR(clear_module_state->__pyx_n_s_bj1);
  Py_CLEAR(clear_module_state->__pyx_n_s_bj2);
  Py_CLEAR(clear_module_state->__pyx_n_s_bline);
  Py_CLEAR(clear_module_state->__pyx_n_s_blo);
  Py_CLEAR(clear_module_state->__pyx_n_s_btags);
  Py_CLEAR(clear_module_state->__pyx_n_s_ch);
  Py_CLEAR(clear_module_state->__pyx_n_s_change_re);
  Py_CLEAR(clear_module_state->__pyx_n_s_charjunk);
  Py_CLEAR(clear_module_state->__pyx_n_s_charjunk_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_charset);
  Py_CLEAR(clear_module_state->__pyx_n_s_check_types);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_codes);
  Py_CLEAR(clear_module_state->__pyx_n_s_collect_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections);
  Py_CLEAR(clear_module_state->__pyx_n_s_compare);
  Py_CLEAR(clear_module_state->__pyx_n_s_compile);
  Py_CLEAR(clear_module_state->__pyx_n_s_contains);
  Py_CLEAR(clear_module_state->__pyx_n_s_context);
  Py_CLEAR(clear_module_state->__pyx_n_s_contextLines);
  Py_CLEAR(clear_module_state->__pyx_n_s_context_diff);
  Py_CLEAR(clear_module_state->__pyx_kp_u_context_diff_line_1321);
  Py_CLEAR(clear_module_state->__pyx_n_s_context_diff_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_context_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_convert_flags);
  Py_CLEAR(clear_module_state->__pyx_n_s_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_cruncher);
  Py_CLEAR(clear_module_state->__pyx_n_s_cutoff);
  Py_CLEAR(clear_module_state->__pyx_kp_s_cutoff_must_be_in_0_0_1_0_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_cydifflib);
  Py_CLEAR(clear_module_state->__pyx_kp_s_cydifflib_pyx);
  Py_CLEAR(clear_module_state->__pyx_kp_s_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_data_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_data_rows);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode);
  Py_CLEAR(clear_module_state->__pyx_n_s_default_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_delta);
  Py_CLEAR(clear_module_state->__pyx_n_s_dfunc);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_diff_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_diff_bytes_locals_decode);
  Py_CLEAR(clear_module_state->__pyx_n_s_diff_lines_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_diffs);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_dump);
  Py_CLEAR(clear_module_state->__pyx_n_s_elt);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_eqi);
  Py_CLEAR(clear_module_state->__pyx_n_s_eqj);
  Py_CLEAR(clear_module_state->__pyx_n_s_equal);
  Py_CLEAR(clear_module_state->__pyx_n_s_err);
  Py_CLEAR(clear_module_state->__pyx_n_s_expand_tabs);
  Py_CLEAR(clear_module_state->__pyx_n_s_expandtabs);
  Py_CLEAR(clear_module_state->__pyx_n_s_fancy_helper);
  Py_CLEAR(clear_module_state->__pyx_n_s_fancy_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_file1_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_file2_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_file_template);
  Py_CLEAR(clear_module_state->__pyx_n_s_find_longest_match);
  Py_CLEAR(clear_module_state->__pyx_n_s_first);
  Py_CLEAR(clear_module_state->__pyx_n_s_flag);
  Py_CLEAR(clear_module_state->__pyx_n_s_flaglist);
  Py_CLEAR(clear_module_state->__pyx_n_s_fmt);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_range_context);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_range_unified);
  Py_CLEAR(clear_module_state->__pyx_n_s_found_diff);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromDiff);
  Py_CLEAR(clear_module_state->__pyx_kp_s_from_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromdata);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromdate);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromdesc);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromfiledate);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromline);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromlines);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromlist);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromprefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromtext);
  Py_CLEAR(clear_module_state->__pyx_n_s_fullbcount);
  Py_CLEAR(clear_module_state->__pyx_n_s_g);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_close_matches);
  Py_CLEAR(clear_module_state->__pyx_kp_u_get_close_matches_line_799);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_grouped_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_matching_blocks);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_group);
  Py_CLEAR(clear_module_state->__pyx_kp_s_gt);
  Py_CLEAR(clear_module_state->__pyx_n_s_header_row);
  Py_CLEAR(clear_module_state->__pyx_n_s_heapq);
  Py_CLEAR(clear_module_state->__pyx_n_s_hi);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_i1);
  Py_CLEAR(clear_module_state->__pyx_n_s_i2);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_kp_s_id_difflib_chg__s__d);
  Py_CLEAR(clear_module_state->__pyx_kp_s_id_s_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_in_change);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_insert);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_isjunk);
  Py_CLEAR(clear_module_state->__pyx_n_s_isspace);
  Py_CLEAR(clear_module_state->__pyx_n_s_items);
  Py_CLEAR(clear_module_state->__pyx_n_s_j);
  Py_CLEAR(clear_module_state->__pyx_n_s_j1);
  Py_CLEAR(clear_module_state->__pyx_n_s_j2);
  Py_CLEAR(clear_module_state->__pyx_n_s_join);
  Py_CLEAR(clear_module_state->__pyx_n_s_keep_original_ws);
  Py_CLEAR(clear_module_state->__pyx_n_s_keep_original_ws_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_la);
  Py_CLEAR(clear_module_state->__pyx_n_s_last);
  Py_CLEAR(clear_module_state->__pyx_n_s_lb);
  Py_CLEAR(clear_module_state->__pyx_n_s_legend);
  Py_CLEAR(clear_module_state->__pyx_n_s_legend_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_length);
  Py_CLEAR(clear_module_state->__pyx_n_s_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_line1);
  Py_CLEAR(clear_module_state->__pyx_n_s_line2);
  Py_CLEAR(clear_module_state->__pyx_n_s_line_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_line_iterator_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_line_num);
  Py_CLEAR(clear_module_state->__pyx_n_s_line_pair_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_line_pair_iterator_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_line_wrapper);
  Py_CLEAR(clear_module_state->__pyx_n_s_linejunk);
  Py_CLEAR(clear_module_state->__pyx_n_s_linejunk_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_linenum);
  Py_CLEAR(clear_module_state->__pyx_n_s_lines);
  Py_CLEAR(clear_module_state->__pyx_kp_s_lines_to_compare_must_be_str_not);
  Py_CLEAR(clear_module_state->__pyx_n_s_lines_to_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_lineterm);
  Py_CLEAR(clear_module_state->__pyx_n_s_lo);
  Py_CLEAR(clear_module_state->__pyx_kp_s_lt);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_make_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_make_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_make_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_make_table);
  Py_CLEAR(clear_module_state->__pyx_n_s_map);
  Py_CLEAR(clear_module_state->__pyx_n_s_mark);
  Py_CLEAR(clear_module_state->__pyx_n_s_markers);
  Py_CLEAR(clear_module_state->__pyx_n_s_match);
  Py_CLEAR(clear_module_state->__pyx_n_s_match_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_matches);
  Py_CLEAR(clear_module_state->__pyx_n_s_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_mdiff);
  Py_CLEAR(clear_module_state->__pyx_n_s_mdiff_locals__line_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_mdiff_locals__line_pair_iterato);
  Py_CLEAR(clear_module_state->__pyx_n_s_mdiff_locals__make_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_mdiff_locals__make_line_locals);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_mro_entries);
  Py_CLEAR(clear_module_state->__pyx_n_s_msg);
  Py_CLEAR(clear_module_state->__pyx_n_s_n);
  Py_CLEAR(clear_module_state->__pyx_kp_s_n_must_be_0_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_namedtuple);
  Py_CLEAR(clear_module_state->__pyx_n_s_namedtuple_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_nbsp);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndiff);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ndiff_line_1444);
  Py_CLEAR(clear_module_state->__pyx_n_s_next_href);
  Py_CLEAR(clear_module_state->__pyx_n_s_next_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_nlargest);
  Py_CLEAR(clear_module_state->__pyx_n_s_nlargest_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_nn);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_blanks_pending);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_blanks_to_yield);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_chg);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_numb);
  Py_CLEAR(clear_module_state->__pyx_n_s_numlines);
  Py_CLEAR(clear_module_state->__pyx_n_s_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_pat);
  Py_CLEAR(clear_module_state->__pyx_n_s_plain_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_pop);
  Py_CLEAR(clear_module_state->__pyx_n_s_possibilities);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefixes);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_qformat);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_quick_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_ratio_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_re);
  Py_CLEAR(clear_module_state->__pyx_n_s_real_quick_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_record_sub_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_restore);
  Py_CLEAR(clear_module_state->__pyx_kp_u_restore_line_2160);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_reversed);
  Py_CLEAR(clear_module_state->__pyx_n_s_rstrip);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_kp_s_s_s);
  Py_CLEAR(clear_module_state->__pyx_kp_s_s_s_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_score);
  Py_CLEAR(clear_module_state->__pyx_n_s_second);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_a__self_b__cannot_be_conver);
  Py_CLEAR(clear_module_state->__pyx_n_s_send);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_seq1);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_seq2);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_seqs);
  Py_CLEAR(clear_module_state->__pyx_n_s_setdefault);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_side);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_span);
  Py_CLEAR(clear_module_state->__pyx_kp_s_span_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_span_class_diff_add);
  Py_CLEAR(clear_module_state->__pyx_kp_s_span_class_diff_chg);
  Py_CLEAR(clear_module_state->__pyx_kp_s_span_class_diff_sub);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_split_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_started);
  Py_CLEAR(clear_module_state->__pyx_n_s_startswith);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_styles);
  Py_CLEAR(clear_module_state->__pyx_n_s_styles_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_sub);
  Py_CLEAR(clear_module_state->__pyx_n_s_sub_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_sum);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_surrogateescape);
  Py_CLEAR(clear_module_state->__pyx_n_s_tab_newline_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_table);
  Py_CLEAR(clear_module_state->__pyx_kp_s_table_class_diff_id_difflib_chg);
  Py_CLEAR(clear_module_state->__pyx_kp_s_table_class_diff_summary_Legend);
  Py_CLEAR(clear_module_state->__pyx_kp_s_table_diff_font_family_Courier);
  Py_CLEAR(clear_module_state->__pyx_n_s_table_template);
  Py_CLEAR(clear_module_state->__pyx_n_s_tabsize);
  Py_CLEAR(clear_module_state->__pyx_n_s_tabsize_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_tag);
  Py_CLEAR(clear_module_state->__pyx_n_s_tag_s);
  Py_CLEAR(clear_module_state->__pyx_kp_s_tbody_tbody);
  Py_CLEAR(clear_module_state->__pyx_kp_s_td_class_diff_header_s_s_td_td);
  Py_CLEAR(clear_module_state->__pyx_kp_s_td_class_diff_next_s_td_s_tr);
  Py_CLEAR(clear_module_state->__pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t);
  Py_CLEAR(clear_module_state->__pyx_kp_s_td_td_td_nbsp_No_Differences_Fo);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_text);
  Py_CLEAR(clear_module_state->__pyx_kp_s_th_class_diff_next_br_th);
  Py_CLEAR(clear_module_state->__pyx_kp_s_th_colspan_2_class_diff_header);
  Py_CLEAR(clear_module_state->__pyx_kp_s_thead_tr_s_s_s_s_tr_thead);
  Py_CLEAR(clear_module_state->__pyx_n_s_throw);
  Py_CLEAR(clear_module_state->__pyx_kp_s_to_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_diff);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_todata);
  Py_CLEAR(clear_module_state->__pyx_n_s_todate);
  Py_CLEAR(clear_module_state->__pyx_n_s_todesc);
  Py_CLEAR(clear_module_state->__pyx_n_s_tofile);
  Py_CLEAR(clear_module_state->__pyx_n_s_tofiledate);
  Py_CLEAR(clear_module_state->__pyx_n_s_toline);
  Py_CLEAR(clear_module_state->__pyx_n_s_tolines);
  Py_CLEAR(clear_module_state->__pyx_n_s_tolist);
  Py_CLEAR(clear_module_state->__pyx_n_s_toprefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_totext);
  Py_CLEAR(clear_module_state->__pyx_kp_s_tr_td_class_diff_next_s_s_td_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_types);
  Py_CLEAR(clear_module_state->__pyx_n_s_unified_diff);
  Py_CLEAR(clear_module_state->__pyx_kp_u_unified_diff_line_1236);
  Py_CLEAR(clear_module_state->__pyx_kp_s_unknown_delta_choice_must_be_1_o);
  Py_CLEAR(clear_module_state->__pyx_kp_s_unknown_tag_r);
  Py_CLEAR(clear_module_state->__pyx_kp_s_utf_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_which);
  Py_CLEAR(clear_module_state->__pyx_n_s_which_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_word);
  Py_CLEAR(clear_module_state->__pyx_n_s_wrapcolumn);
  Py_CLEAR(clear_module_state->__pyx_n_s_wrapcolumn_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ws);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_xmlcharrefreplace);
  Py_CLEAR(clear_module_state->__pyx_n_s_zip);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_6);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_74);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_5);
  Py_CLEAR(clear_module_state->__pyx_int_8);
  Py_CLEAR(clear_module_state->__pyx_int_100);
  Py_CLEAR(clear_module_state->__pyx_int_200);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_slice__38);
  Py_CLEAR(clear_module_state->__pyx_slice__90);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__68);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__77);
  Py_CLEAR(clear_module_state->__pyx_tuple__79);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__87);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_tuple__94);
  Py_CLEAR(clear_module_state->__pyx_tuple__96);
  Py_CLEAR(clear_module_state->__pyx_tuple__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__2);
  Py_CLEAR(clear_module_state->__pyx_codeobj__5);
  Py_CLEAR(clear_module_state->__pyx_codeobj__8);
  Py_CLEAR(clear_module_state->__pyx_codeobj__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_tuple__101);
  Py_CLEAR(clear_module_state->__pyx_tuple__103);
  Py_CLEAR(clear_module_state->__pyx_tuple__105);
  Py_CLEAR(clear_module_state->__pyx_tuple__106);
  Py_CLEAR(clear_module_state->__pyx_tuple__107);
  Py_CLEAR(clear_module_state->__pyx_tuple__109);
  Py_CLEAR(clear_module_state->__pyx_tuple__111);
  Py_CLEAR(clear_module_state->__pyx_tuple__113);
  Py_CLEAR(clear_module_state->__pyx_tuple__115);
  Py_CLEAR(clear_module_state->__pyx_tuple__117);
  Py_CLEAR(clear_module_state->__pyx_tuple__119);
  Py_CLEAR(clear_module_state->__pyx_tuple__120);
  Py_CLEAR(clear_module_state->__pyx_tuple__122);
  Py_CLEAR(clear_module_state->__pyx_tuple__124);
  Py_CLEAR(clear_module_state->__pyx_tuple__125);
  Py_CLEAR(clear_module_state->__pyx_tuple__126);
  Py_CLEAR(clear_module_state->__pyx_tuple__127);
  Py_CLEAR(clear_module_state->__pyx_tuple__128);
  Py_CLEAR(clear_module_state->__pyx_tuple__129);
  Py_CLEAR(clear_module_state->__pyx_tuple__130);
  Py_CLEAR(clear_module_state->__pyx_tuple__131);
  Py_CLEAR(clear_module_state->__pyx_tuple__133);
  Py_CLEAR(clear_module_state->__pyx_tuple__134);
  Py_CLEAR(clear_module_state->__pyx_tuple__136);
  Py_CLEAR(clear_module_state->__pyx_tuple__137);
  Py_CLEAR(clear_module_state->__pyx_tuple__139);
  Py_CLEAR(clear_module_state->__pyx_tuple__140);
  Py_CLEAR(clear_module_state->__pyx_tuple__141);
  Py_CLEAR(clear_module_state->__pyx_tuple__144);
  Py_CLEAR(clear_module_state->__pyx_tuple__145);
  Py_CLEAR(clear_module_state->__pyx_tuple__146);
  Py_CLEAR(clear_module_state->__pyx_tuple__148);
  Py_CLEAR(clear_module_state->__pyx_tuple__149);
  Py_CLEAR(clear_module_state->__pyx_tuple__150);
  Py_CLEAR(clear_module_state->__pyx_tuple__152);
  Py_CLEAR(clear_module_state->__pyx_tuple__153);
  Py_CLEAR(clear_module_state->__pyx_tuple__154);
  Py_CLEAR(clear_module_state->__pyx_tuple__155);
  Py_CLEAR(clear_module_state->__pyx_tuple__157);
  Py_CLEAR(clear_module_state->__pyx_tuple__159);
  Py_CLEAR(clear_module_state->__pyx_tuple__160);
  Py_CLEAR(clear_module_state->__pyx_tuple__162);
  Py_CLEAR(clear_module_state->__pyx_tuple__164);
  Py_CLEAR(clear_module_state->__pyx_tuple__165);
  Py_CLEAR(clear_module_state->__pyx_tuple__167);
  Py_CLEAR(clear_module_state->__pyx_tuple__169);
  Py_CLEAR(clear_module_state->__pyx_tuple__171);
  Py_CLEAR(clear_module_state->__pyx_tuple__173);
  Py_CLEAR(clear_module_state->__pyx_tuple__175);
  Py_CLEAR(clear_module_state->__pyx_tuple__176);
  Py_CLEAR(clear_module_state->__pyx_codeobj__10);
  Py_CLEAR(clear_module_state->__pyx_codeobj__13);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__112);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__118);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__132);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__138);
  Py_CLEAR(clear_module_state->__pyx_codeobj__142);
  Py_CLEAR(clear_module_state->__pyx_codeobj__147);
  Py_CLEAR(clear_module_state->__pyx_codeobj__151);
  Py_CLEAR(clear_module_state->__pyx_codeobj__156);
  Py_CLEAR(clear_module_state->__pyx_codeobj__158);
  Py_CLEAR(clear_module_state->__pyx_codeobj__161);
  Py_CLEAR(clear_module_state->__pyx_codeobj__163);
  Py_CLEAR(clear_module_state->__pyx_codeobj__166);
  Py_CLEAR(clear_module_state->__pyx_codeobj__168);
  Py_CLEAR(clear_module_state->__pyx_codeobj__170);
  Py_CLEAR(clear_module_state->__pyx_codeobj__172);
  Py_CLEAR(clear_module_state->__pyx_codeobj__174);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib_SequenceMatcher);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib_SequenceMatcher);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_1_ratio);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_2_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_4_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_5_compare);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_5_compare);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_6__dump);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_6__dump);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_10__qformat);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_12_context_diff);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_13_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_14_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_16__mdiff);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper);
  Py_VISIT(traverse_module_state->__pyx_ptype_9cydifflib___pyx_scope_struct_21_restore);
  Py_VISIT(traverse_module_state->__pyx_type_9cydifflib___pyx_scope_struct_21_restore);
  Py_VISIT(traverse_module_state->__pyx_kp_b_);
  Py_VISIT(traverse_module_state->__pyx_kp_s_);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_AttributeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Compare_a_and_b_lists_of_string);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Compare_two_sequences_of_lines);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Compare_two_sequences_of_lines_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Compare_two_sequences_of_lines_3);
  Py_VISIT(traverse_module_state->__pyx_kp_s_DOCTYPE_html_PUBLIC_W3C_DTD_XHT);
  Py_VISIT(traverse_module_state->__pyx_n_s_Differ);
  Py_VISIT(traverse_module_state->__pyx_n_s_Differ___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_Differ__dump);
  Py_VISIT(traverse_module_state->__pyx_n_s_Differ__fancy_helper);
  Py_VISIT(traverse_module_state->__pyx_n_s_Differ__fancy_replace);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Differ__fancy_replace_line_1034);
  Py_VISIT(traverse_module_state->__pyx_n_s_Differ__plain_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_Differ__qformat);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Differ__qformat_line_1140);
  Py_VISIT(traverse_module_state->__pyx_n_s_Differ_compare);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Differ_compare_line_974);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Differ_is_a_class_for_comparing);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Find_longest_matching_block_in_a);
  Py_VISIT(traverse_module_state->__pyx_kp_s_For_producing_HTML_side_by_side);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Format_output_and_deal_with_tab);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Generate_one_of_the_two_sequenc);
  Py_VISIT(traverse_module_state->__pyx_n_s_GenericAlias);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff__collect_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff__convert_flags);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff__format_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff__line_wrapper);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff__make_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff__split_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff__tab_newline_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff__tab_newline_replace_lo);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff_make_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_HtmlDiff_make_table);
  Py_VISIT(traverse_module_state->__pyx_n_s_IS_CHARACTER_JUNK);
  Py_VISIT(traverse_module_state->__pyx_kp_u_IS_CHARACTER_JUNK_line_1202);
  Py_VISIT(traverse_module_state->__pyx_n_s_IS_LINE_JUNK);
  Py_VISIT(traverse_module_state->__pyx_kp_u_IS_LINE_JUNK_line_1186);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Isolate_change_clusters_by_elim);
  Py_VISIT(traverse_module_state->__pyx_n_s_Match);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_True_for_ignorable_chara);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_True_for_ignorable_line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_a_measure_of_the_sequence);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_list_of_5_tuples_describi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_list_of_triples_describin);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher___setstate_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_find_longest_mat);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SequenceMatcher_find_longest_mat_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_get_grouped_opco);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SequenceMatcher_get_grouped_opco_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_get_matching_blo);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SequenceMatcher_get_matching_blo_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_get_opcodes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SequenceMatcher_get_opcodes_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_quick_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_ratio);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SequenceMatcher_ratio_line_730);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_real_quick_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_set_seq1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SequenceMatcher_set_seq1_line_28);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_set_seq2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SequenceMatcher_set_seq2_line_31);
  Py_VISIT(traverse_module_state->__pyx_n_s_SequenceMatcher_set_seqs);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SequenceMatcher_set_seqs_line_27);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Set_the_first_sequence_to_be_com);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Set_the_second_sequence_to_be_co);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Set_the_two_sequences_to_be_comp);
  Py_VISIT(traverse_module_state->__pyx_n_s_StopIteration);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Use_SequenceMatcher_to_return_li);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_When_replacing_one_block_of_lin);
  Py_VISIT(traverse_module_state->__pyx_n_s_X);
  Py_VISIT(traverse_module_state->__pyx_kp_s__11);
  Py_VISIT(traverse_module_state->__pyx_kp_s__12);
  Py_VISIT(traverse_module_state->__pyx_n_s__143);
  Py_VISIT(traverse_module_state->__pyx_kp_s__15);
  Py_VISIT(traverse_module_state->__pyx_kp_u__16);
  Py_VISIT(traverse_module_state->__pyx_kp_b__17);
  Py_VISIT(traverse_module_state->__pyx_kp_s__17);
  Py_VISIT(traverse_module_state->__pyx_kp_u__17);
  Py_VISIT(traverse_module_state->__pyx_kp_s__18);
  Py_VISIT(traverse_module_state->__pyx_kp_s__19);
  Py_VISIT(traverse_module_state->__pyx_kp_s__20);
  Py_VISIT(traverse_module_state->__pyx_kp_s__21);
  Py_VISIT(traverse_module_state->__pyx_kp_s__23);
  Py_VISIT(traverse_module_state->__pyx_kp_s__24);
  Py_VISIT(traverse_module_state->__pyx_kp_s__25);
  Py_VISIT(traverse_module_state->__pyx_kp_s__26);
  Py_VISIT(traverse_module_state->__pyx_kp_s__28);
  Py_VISIT(traverse_module_state->__pyx_kp_s__29);
  Py_VISIT(traverse_module_state->__pyx_kp_s__30);
  Py_VISIT(traverse_module_state->__pyx_kp_s__31);
  Py_VISIT(traverse_module_state->__pyx_kp_s__32);
  Py_VISIT(traverse_module_state->__pyx_kp_s__39);
  Py_VISIT(traverse_module_state->__pyx_kp_s__4);
  Py_VISIT(traverse_module_state->__pyx_kp_s__42);
  Py_VISIT(traverse_module_state->__pyx_kp_s__43);
  Py_VISIT(traverse_module_state->__pyx_kp_s__44);
  Py_VISIT(traverse_module_state->__pyx_kp_s__45);
  Py_VISIT(traverse_module_state->__pyx_kp_s__46);
  Py_VISIT(traverse_module_state->__pyx_kp_s__47);
  Py_VISIT(traverse_module_state->__pyx_kp_s__49);
  Py_VISIT(traverse_module_state->__pyx_kp_s__50);
  Py_VISIT(traverse_module_state->__pyx_kp_s__51);
  Py_VISIT(traverse_module_state->__pyx_kp_s__52);
  Py_VISIT(traverse_module_state->__pyx_n_s__57);
  Py_VISIT(traverse_module_state->__pyx_kp_s__58);
  Py_VISIT(traverse_module_state->__pyx_kp_s__6);
  Py_VISIT(traverse_module_state->__pyx_kp_s__67);
  Py_VISIT(traverse_module_state->__pyx_kp_s__7);
  Py_VISIT(traverse_module_state->__pyx_kp_s__72);
  Py_VISIT(traverse_module_state->__pyx_kp_s__75);
  Py_VISIT(traverse_module_state->__pyx_kp_s__78);
  Py_VISIT(traverse_module_state->__pyx_kp_s__81);
  Py_VISIT(traverse_module_state->__pyx_kp_s__83);
  Py_VISIT(traverse_module_state->__pyx_kp_s__85);
  Py_VISIT(traverse_module_state->__pyx_n_s_a);
  Py_VISIT(traverse_module_state->__pyx_kp_s_a_b_size);
  Py_VISIT(traverse_module_state->__pyx_kp_s_a_href_difflib_chg__s_0_f_a);
  Py_VISIT(traverse_module_state->__pyx_kp_s_a_href_difflib_chg__s__d_n_a);
  Py_VISIT(traverse_module_state->__pyx_kp_s_a_href_difflib_chg__s_top_t_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_aelt);
  Py_VISIT(traverse_module_state->__pyx_n_s_ahi);
  Py_VISIT(traverse_module_state->__pyx_n_s_ahi_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ai);
  Py_VISIT(traverse_module_state->__pyx_n_s_ai1);
  Py_VISIT(traverse_module_state->__pyx_n_s_ai2);
  Py_VISIT(traverse_module_state->__pyx_n_s_aline);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_kp_s_all_arguments_must_be_bytes_not);
  Py_VISIT(traverse_module_state->__pyx_kp_s_all_arguments_must_be_str_not_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_alo);
  Py_VISIT(traverse_module_state->__pyx_kp_s_amp);
  Py_VISIT(traverse_module_state->__pyx_n_s_answer);
  Py_VISIT(traverse_module_state->__pyx_n_s_append);
  Py_VISIT(traverse_module_state->__pyx_n_s_arg);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_ascii);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_atags);
  Py_VISIT(traverse_module_state->__pyx_n_s_autojunk);
  Py_VISIT(traverse_module_state->__pyx_n_s_avail);
  Py_VISIT(traverse_module_state->__pyx_n_s_availhas);
  Py_VISIT(traverse_module_state->__pyx_n_s_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_begin);
  Py_VISIT(traverse_module_state->__pyx_n_s_beginning);
  Py_VISIT(traverse_module_state->__pyx_n_s_belt);
  Py_VISIT(traverse_module_state->__pyx_n_s_best_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_best_j);
  Py_VISIT(traverse_module_state->__pyx_n_s_best_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_bhi);
  Py_VISIT(traverse_module_state->__pyx_n_s_bhi_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_bj);
  Py_VISIT(traverse_module_state->__pyx_n_s_bj1);
  Py_VISIT(traverse_module_state->__pyx_n_s_bj2);
  Py_VISIT(traverse_module_state->__pyx_n_s_bline);
  Py_VISIT(traverse_module_state->__pyx_n_s_blo);
  Py_VISIT(traverse_module_state->__pyx_n_s_btags);
  Py_VISIT(traverse_module_state->__pyx_n_s_ch);
  Py_VISIT(traverse_module_state->__pyx_n_s_change_re);
  Py_VISIT(traverse_module_state->__pyx_n_s_charjunk);
  Py_VISIT(traverse_module_state->__pyx_n_s_charjunk_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_charset);
  Py_VISIT(traverse_module_state->__pyx_n_s_check_types);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_codes);
  Py_VISIT(traverse_module_state->__pyx_n_s_collect_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections);
  Py_VISIT(traverse_module_state->__pyx_n_s_compare);
  Py_VISIT(traverse_module_state->__pyx_n_s_compile);
  Py_VISIT(traverse_module_state->__pyx_n_s_contains);
  Py_VISIT(traverse_module_state->__pyx_n_s_context);
  Py_VISIT(traverse_module_state->__pyx_n_s_contextLines);
  Py_VISIT(traverse_module_state->__pyx_n_s_context_diff);
  Py_VISIT(traverse_module_state->__pyx_kp_u_context_diff_line_1321);
  Py_VISIT(traverse_module_state->__pyx_n_s_context_diff_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_context_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_convert_flags);
  Py_VISIT(traverse_module_state->__pyx_n_s_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_cruncher);
  Py_VISIT(traverse_module_state->__pyx_n_s_cutoff);
  Py_VISIT(traverse_module_state->__pyx_kp_s_cutoff_must_be_in_0_0_1_0_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_cydifflib);
  Py_VISIT(traverse_module_state->__pyx_kp_s_cydifflib_pyx);
  Py_VISIT(traverse_module_state->__pyx_kp_s_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_data_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_data_rows);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode);
  Py_VISIT(traverse_module_state->__pyx_n_s_default_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_delta);
  Py_VISIT(traverse_module_state->__pyx_n_s_dfunc);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_diff_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_diff_bytes_locals_decode);
  Py_VISIT(traverse_module_state->__pyx_n_s_diff_lines_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_diffs);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_dump);
  Py_VISIT(traverse_module_state->__pyx_n_s_elt);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_eqi);
  Py_VISIT(traverse_module_state->__pyx_n_s_eqj);
  Py_VISIT(traverse_module_state->__pyx_n_s_equal);
  Py_VISIT(traverse_module_state->__pyx_n_s_err);
  Py_VISIT(traverse_module_state->__pyx_n_s_expand_tabs);
  Py_VISIT(traverse_module_state->__pyx_n_s_expandtabs);
  Py_VISIT(traverse_module_state->__pyx_n_s_fancy_helper);
  Py_VISIT(traverse_module_state->__pyx_n_s_fancy_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_file1_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_file2_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_file_template);
  Py_VISIT(traverse_module_state->__pyx_n_s_find_longest_match);
  Py_VISIT(traverse_module_state->__pyx_n_s_first);
  Py_VISIT(traverse_module_state->__pyx_n_s_flag);
  Py_VISIT(traverse_module_state->__pyx_n_s_flaglist);
  Py_VISIT(traverse_module_state->__pyx_n_s_fmt);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_range_context);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_range_unified);
  Py_VISIT(traverse_module_state->__pyx_n_s_found_diff);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromDiff);
  Py_VISIT(traverse_module_state->__pyx_kp_s_from_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromdata);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromdate);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromdesc);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromfiledate);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromline);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromlines);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromlist);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromprefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromtext);
  Py_VISIT(traverse_module_state->__pyx_n_s_fullbcount);
  Py_VISIT(traverse_module_state->__pyx_n_s_g);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_close_matches);
  Py_VISIT(traverse_module_state->__pyx_kp_u_get_close_matches_line_799);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_grouped_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_matching_blocks);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_group);
  Py_VISIT(traverse_module_state->__pyx_kp_s_gt);
  Py_VISIT(traverse_module_state->__pyx_n_s_header_row);
  Py_VISIT(traverse_module_state->__pyx_n_s_heapq);
  Py_VISIT(traverse_module_state->__pyx_n_s_hi);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_i1);
  Py_VISIT(traverse_module_state->__pyx_n_s_i2);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_kp_s_id_difflib_chg__s__d);
  Py_VISIT(traverse_module_state->__pyx_kp_s_id_s_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_in_change);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_insert);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_isjunk);
  Py_VISIT(traverse_module_state->__pyx_n_s_isspace);
  Py_VISIT(traverse_module_state->__pyx_n_s_items);
  Py_VISIT(traverse_module_state->__pyx_n_s_j);
  Py_VISIT(traverse_module_state->__pyx_n_s_j1);
  Py_VISIT(traverse_module_state->__pyx_n_s_j2);
  Py_VISIT(traverse_module_state->__pyx_n_s_join);
  Py_VISIT(traverse_module_state->__pyx_n_s_keep_original_ws);
  Py_VISIT(traverse_module_state->__pyx_n_s_keep_original_ws_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_la);
  Py_VISIT(traverse_module_state->__pyx_n_s_last);
  Py_VISIT(traverse_module_state->__pyx_n_s_lb);
  Py_VISIT(traverse_module_state->__pyx_n_s_legend);
  Py_VISIT(traverse_module_state->__pyx_n_s_legend_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_length);
  Py_VISIT(traverse_module_state->__pyx_n_s_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_line1);
  Py_VISIT(traverse_module_state->__pyx_n_s_line2);
  Py_VISIT(traverse_module_state->__pyx_n_s_line_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_line_iterator_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_line_num);
  Py_VISIT(traverse_module_state->__pyx_n_s_line_pair_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_line_pair_iterator_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_line_wrapper);
  Py_VISIT(traverse_module_state->__pyx_n_s_linejunk);
  Py_VISIT(traverse_module_state->__pyx_n_s_linejunk_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_linenum);
  Py_VISIT(traverse_module_state->__pyx_n_s_lines);
  Py_VISIT(traverse_module_state->__pyx_kp_s_lines_to_compare_must_be_str_not);
  Py_VISIT(traverse_module_state->__pyx_n_s_lines_to_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_lineterm);
  Py_VISIT(traverse_module_state->__pyx_n_s_lo);
  Py_VISIT(traverse_module_state->__pyx_kp_s_lt);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_make_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_make_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_make_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_make_table);
  Py_VISIT(traverse_module_state->__pyx_n_s_map);
  Py_VISIT(traverse_module_state->__pyx_n_s_mark);
  Py_VISIT(traverse_module_state->__pyx_n_s_markers);
  Py_VISIT(traverse_module_state->__pyx_n_s_match);
  Py_VISIT(traverse_module_state->__pyx_n_s_match_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_matches);
  Py_VISIT(traverse_module_state->__pyx_n_s_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_mdiff);
  Py_VISIT(traverse_module_state->__pyx_n_s_mdiff_locals__line_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_mdiff_locals__line_pair_iterato);
  Py_VISIT(traverse_module_state->__pyx_n_s_mdiff_locals__make_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_mdiff_locals__make_line_locals);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_mro_entries);
  Py_VISIT(traverse_module_state->__pyx_n_s_msg);
  Py_VISIT(traverse_module_state->__pyx_n_s_n);
  Py_VISIT(traverse_module_state->__pyx_kp_s_n_must_be_0_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_namedtuple);
  Py_VISIT(traverse_module_state->__pyx_n_s_namedtuple_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_nbsp);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndiff);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ndiff_line_1444);
  Py_VISIT(traverse_module_state->__pyx_n_s_next_href);
  Py_VISIT(traverse_module_state->__pyx_n_s_next_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_nlargest);
  Py_VISIT(traverse_module_state->__pyx_n_s_nlargest_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_nn);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_blanks_pending);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_blanks_to_yield);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_chg);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_numb);
  Py_VISIT(traverse_module_state->__pyx_n_s_numlines);
  Py_VISIT(traverse_module_state->__pyx_n_s_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_pat);
  Py_VISIT(traverse_module_state->__pyx_n_s_plain_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_pop);
  Py_VISIT(traverse_module_state->__pyx_n_s_possibilities);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefixes);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_qformat);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_quick_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_ratio_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_re);
  Py_VISIT(traverse_module_state->__pyx_n_s_real_quick_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_record_sub_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_restore);
  Py_VISIT(traverse_module_state->__pyx_kp_u_restore_line_2160);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_reversed);
  Py_VISIT(traverse_module_state->__pyx_n_s_rstrip);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_kp_s_s_s);
  Py_VISIT(traverse_module_state->__pyx_kp_s_s_s_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_score);
  Py_VISIT(traverse_module_state->__pyx_n_s_second);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_a__self_b__cannot_be_conver);
  Py_VISIT(traverse_module_state->__pyx_n_s_send);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_seq1);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_seq2);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_seqs);
  Py_VISIT(traverse_module_state->__pyx_n_s_setdefault);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_side);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_span);
  Py_VISIT(traverse_module_state->__pyx_kp_s_span_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_span_class_diff_add);
  Py_VISIT(traverse_module_state->__pyx_kp_s_span_class_diff_chg);
  Py_VISIT(traverse_module_state->__pyx_kp_s_span_class_diff_sub);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_split_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_started);
  Py_VISIT(traverse_module_state->__pyx_n_s_startswith);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_styles);
  Py_VISIT(traverse_module_state->__pyx_n_s_styles_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_sub);
  Py_VISIT(traverse_module_state->__pyx_n_s_sub_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_sum);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_surrogateescape);
  Py_VISIT(traverse_module_state->__pyx_n_s_tab_newline_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_table);
  Py_VISIT(traverse_module_state->__pyx_kp_s_table_class_diff_id_difflib_chg);
  Py_VISIT(traverse_module_state->__pyx_kp_s_table_class_diff_summary_Legend);
  Py_VISIT(traverse_module_state->__pyx_kp_s_table_diff_font_family_Courier);
  Py_VISIT(traverse_module_state->__pyx_n_s_table_template);
  Py_VISIT(traverse_module_state->__pyx_n_s_tabsize);
  Py_VISIT(traverse_module_state->__pyx_n_s_tabsize_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_tag);
  Py_VISIT(traverse_module_state->__pyx_n_s_tag_s);
  Py_VISIT(traverse_module_state->__pyx_kp_s_tbody_tbody);
  Py_VISIT(traverse_module_state->__pyx_kp_s_td_class_diff_header_s_s_td_td);
  Py_VISIT(traverse_module_state->__pyx_kp_s_td_class_diff_next_s_td_s_tr);
  Py_VISIT(traverse_module_state->__pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t);
  Py_VISIT(traverse_module_state->__pyx_kp_s_td_td_td_nbsp_No_Differences_Fo);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_text);
  Py_VISIT(traverse_module_state->__pyx_kp_s_th_class_diff_next_br_th);
  Py_VISIT(traverse_module_state->__pyx_kp_s_th_colspan_2_class_diff_header);
  Py_VISIT(traverse_module_state->__pyx_kp_s_thead_tr_s_s_s_s_tr_thead);
  Py_VISIT(traverse_module_state->__pyx_n_s_throw);
  Py_VISIT(traverse_module_state->__pyx_kp_s_to_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_diff);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_todata);
  Py_VISIT(traverse_module_state->__pyx_n_s_todate);
  Py_VISIT(traverse_module_state->__pyx_n_s_todesc);
  Py_VISIT(traverse_module_state->__pyx_n_s_tofile);
  Py_VISIT(traverse_module_state->__pyx_n_s_tofiledate);
  Py_VISIT(traverse_module_state->__pyx_n_s_toline);
  Py_VISIT(traverse_module_state->__pyx_n_s_tolines);
  Py_VISIT(traverse_module_state->__pyx_n_s_tolist);
  Py_VISIT(traverse_module_state->__pyx_n_s_toprefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_totext);
  Py_VISIT(traverse_module_state->__pyx_kp_s_tr_td_class_diff_next_s_s_td_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_types);
  Py_VISIT(traverse_module_state->__pyx_n_s_unified_diff);
  Py_VISIT(traverse_module_state->__pyx_kp_u_unified_diff_line_1236);
  Py_VISIT(traverse_module_state->__pyx_kp_s_unknown_delta_choice_must_be_1_o);
  Py_VISIT(traverse_module_state->__pyx_kp_s_unknown_tag_r);
  Py_VISIT(traverse_module_state->__pyx_kp_s_utf_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_which);
  Py_VISIT(traverse_module_state->__pyx_n_s_which_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_word);
  Py_VISIT(traverse_module_state->__pyx_n_s_wrapcolumn);
  Py_VISIT(traverse_module_state->__pyx_n_s_wrapcolumn_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ws);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_xmlcharrefreplace);
  Py_VISIT(traverse_module_state->__pyx_n_s_zip);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_6);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_74);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_5);
  Py_VISIT(traverse_module_state->__pyx_int_8);
  Py_VISIT(traverse_module_state->__pyx_int_100);
  Py_VISIT(traverse_module_state->__pyx_int_200);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_slice__38);
  Py_VISIT(traverse_module_state->__pyx_slice__90);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__68);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__77);
  Py_VISIT(traverse_module_state->__pyx_tuple__79);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__87);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_tuple__94);
  Py_VISIT(traverse_module_state->__pyx_tuple__96);
  Py_VISIT(traverse_module_state->__pyx_tuple__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__2);
  Py_VISIT(traverse_module_state->__pyx_codeobj__5);
  Py_VISIT(traverse_module_state->__pyx_codeobj__8);
  Py_VISIT(traverse_module_state->__pyx_codeobj__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_tuple__101);
  Py_VISIT(traverse_module_state->__pyx_tuple__103);
  Py_VISIT(traverse_module_state->__pyx_tuple__105);
  Py_VISIT(traverse_module_state->__pyx_tuple__106);
  Py_VISIT(traverse_module_state->__pyx_tuple__107);
  Py_VISIT(traverse_module_state->__pyx_tuple__109);
  Py_VISIT(traverse_module_state->__pyx_tuple__111);
  Py_VISIT(traverse_module_state->__pyx_tuple__113);
  Py_VISIT(traverse_module_state->__pyx_tuple__115);
  Py_VISIT(traverse_module_state->__pyx_tuple__117);
  Py_VISIT(traverse_module_state->__pyx_tuple__119);
  Py_VISIT(traverse_module_state->__pyx_tuple__120);
  Py_VISIT(traverse_module_state->__pyx_tuple__122);
  Py_VISIT(traverse_module_state->__pyx_tuple__124);
  Py_VISIT(traverse_module_state->__pyx_tuple__125);
  Py_VISIT(traverse_module_state->__pyx_tuple__126);
  Py_VISIT(traverse_module_state->__pyx_tuple__127);
  Py_VISIT(traverse_module_state->__pyx_tuple__128);
  Py_VISIT(traverse_module_state->__pyx_tuple__129);
  Py_VISIT(traverse_module_state->__pyx_tuple__130);
  Py_VISIT(traverse_module_state->__pyx_tuple__131);
  Py_VISIT(traverse_module_state->__pyx_tuple__133);
  Py_VISIT(traverse_module_state->__pyx_tuple__134);
  Py_VISIT(traverse_module_state->__pyx_tuple__136);
  Py_VISIT(traverse_module_state->__pyx_tuple__137);
  Py_VISIT(traverse_module_state->__pyx_tuple__139);
  Py_VISIT(traverse_module_state->__pyx_tuple__140);
  Py_VISIT(traverse_module_state->__pyx_tuple__141);
  Py_VISIT(traverse_module_state->__pyx_tuple__144);
  Py_VISIT(traverse_module_state->__pyx_tuple__145);
  Py_VISIT(traverse_module_state->__pyx_tuple__146);
  Py_VISIT(traverse_module_state->__pyx_tuple__148);
  Py_VISIT(traverse_module_state->__pyx_tuple__149);
  Py_VISIT(traverse_module_state->__pyx_tuple__150);
  Py_VISIT(traverse_module_state->__pyx_tuple__152);
  Py_VISIT(traverse_module_state->__pyx_tuple__153);
  Py_VISIT(traverse_module_state->__pyx_tuple__154);
  Py_VISIT(traverse_module_state->__pyx_tuple__155);
  Py_VISIT(traverse_module_state->__pyx_tuple__157);
  Py_VISIT(traverse_module_state->__pyx_tuple__159);
  Py_VISIT(traverse_module_state->__pyx_tuple__160);
  Py_VISIT(traverse_module_state->__pyx_tuple__162);
  Py_VISIT(traverse_module_state->__pyx_tuple__164);
  Py_VISIT(traverse_module_state->__pyx_tuple__165);
  Py_VISIT(traverse_module_state->__pyx_tuple__167);
  Py_VISIT(traverse_module_state->__pyx_tuple__169);
  Py_VISIT(traverse_module_state->__pyx_tuple__171);
  Py_VISIT(traverse_module_state->__pyx_tuple__173);
  Py_VISIT(traverse_module_state->__pyx_tuple__175);
  Py_VISIT(traverse_module_state->__pyx_tuple__176);
  Py_VISIT(traverse_module_state->__pyx_codeobj__10);
  Py_VISIT(traverse_module_state->__pyx_codeobj__13);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__112);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__118);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__132);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__138);
  Py_VISIT(traverse_module_state->__pyx_codeobj__142);
  Py_VISIT(traverse_module_state->__pyx_codeobj__147);
  Py_VISIT(traverse_module_state->__pyx_codeobj__151);
  Py_VISIT(traverse_module_state->__pyx_codeobj__156);
  Py_VISIT(traverse_module_state->__pyx_codeobj__158);
  Py_VISIT(traverse_module_state->__pyx_codeobj__161);
  Py_VISIT(traverse_module_state->__pyx_codeobj__163);
  Py_VISIT(traverse_module_state->__pyx_codeobj__166);
  Py_VISIT(traverse_module_state->__pyx_codeobj__168);
  Py_VISIT(traverse_module_state->__pyx_codeobj__170);
  Py_VISIT(traverse_module_state->__pyx_codeobj__172);
  Py_VISIT(traverse_module_state->__pyx_codeobj__174);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_USE_MODULE_STATE
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_9cydifflib_SequenceMatcher __pyx_mstate_global->__pyx_ptype_9cydifflib_SequenceMatcher
#define __pyx_type_9cydifflib_SequenceMatcher __pyx_mstate_global->__pyx_type_9cydifflib_SequenceMatcher
#define __pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes
#define __pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes
#define __pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio
#define __pyx_type_9cydifflib___pyx_scope_struct_1_ratio __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_1_ratio
#define __pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr
#define __pyx_type_9cydifflib___pyx_scope_struct_2_genexpr __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_2_genexpr
#define __pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws
#define __pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws
#define __pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr
#define __pyx_type_9cydifflib___pyx_scope_struct_4_genexpr __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_4_genexpr
#define __pyx_ptype_9cydifflib___pyx_scope_struct_5_compare __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_5_compare
#define __pyx_type_9cydifflib___pyx_scope_struct_5_compare __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_5_compare
#define __pyx_ptype_9cydifflib___pyx_scope_struct_6__dump __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_6__dump
#define __pyx_type_9cydifflib___pyx_scope_struct_6__dump __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_6__dump
#define __pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace
#define __pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace
#define __pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace
#define __pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace
#define __pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper
#define __pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper
#define __pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat
#define __pyx_type_9cydifflib___pyx_scope_struct_10__qformat __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_10__qformat
#define __pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff
#define __pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff
#define __pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff
#define __pyx_type_9cydifflib___pyx_scope_struct_12_context_diff __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_12_context_diff
#define __pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr
#define __pyx_type_9cydifflib___pyx_scope_struct_13_genexpr __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_13_genexpr
#define __pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr
#define __pyx_type_9cydifflib___pyx_scope_struct_14_genexpr __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_14_genexpr
#define __pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes
#define __pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes
#define __pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff
#define __pyx_type_9cydifflib___pyx_scope_struct_16__mdiff __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_16__mdiff
#define __pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator
#define __pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator
#define __pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator
#define __pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator
#define __pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace
#define __pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace
#define __pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper
#define __pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper
#define __pyx_ptype_9cydifflib___pyx_scope_struct_21_restore __pyx_mstate_global->__pyx_ptype_9cydifflib___pyx_scope_struct_21_restore
#define __pyx_type_9cydifflib___pyx_scope_struct_21_restore __pyx_mstate_global->__pyx_type_9cydifflib___pyx_scope_struct_21_restore
#define __pyx_kp_b_ __pyx_mstate_global->__pyx_kp_b_
#define __pyx_kp_s_ __pyx_mstate_global->__pyx_kp_s_
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_s_AttributeError __pyx_mstate_global->__pyx_n_s_AttributeError
#define __pyx_kp_u_Compare_a_and_b_lists_of_string __pyx_mstate_global->__pyx_kp_u_Compare_a_and_b_lists_of_string
#define __pyx_kp_u_Compare_two_sequences_of_lines __pyx_mstate_global->__pyx_kp_u_Compare_two_sequences_of_lines
#define __pyx_kp_u_Compare_two_sequences_of_lines_2 __pyx_mstate_global->__pyx_kp_u_Compare_two_sequences_of_lines_2
#define __pyx_kp_u_Compare_two_sequences_of_lines_3 __pyx_mstate_global->__pyx_kp_u_Compare_two_sequences_of_lines_3
#define __pyx_kp_s_DOCTYPE_html_PUBLIC_W3C_DTD_XHT __pyx_mstate_global->__pyx_kp_s_DOCTYPE_html_PUBLIC_W3C_DTD_XHT
#define __pyx_n_s_Differ __pyx_mstate_global->__pyx_n_s_Differ
#define __pyx_n_s_Differ___init __pyx_mstate_global->__pyx_n_s_Differ___init
#define __pyx_n_s_Differ__dump __pyx_mstate_global->__pyx_n_s_Differ__dump
#define __pyx_n_s_Differ__fancy_helper __pyx_mstate_global->__pyx_n_s_Differ__fancy_helper
#define __pyx_n_s_Differ__fancy_replace __pyx_mstate_global->__pyx_n_s_Differ__fancy_replace
#define __pyx_kp_u_Differ__fancy_replace_line_1034 __pyx_mstate_global->__pyx_kp_u_Differ__fancy_replace_line_1034
#define __pyx_n_s_Differ__plain_replace __pyx_mstate_global->__pyx_n_s_Differ__plain_replace
#define __pyx_n_s_Differ__qformat __pyx_mstate_global->__pyx_n_s_Differ__qformat
#define __pyx_kp_u_Differ__qformat_line_1140 __pyx_mstate_global->__pyx_kp_u_Differ__qformat_line_1140
#define __pyx_n_s_Differ_compare __pyx_mstate_global->__pyx_n_s_Differ_compare
#define __pyx_kp_u_Differ_compare_line_974 __pyx_mstate_global->__pyx_kp_u_Differ_compare_line_974
#define __pyx_kp_s_Differ_is_a_class_for_comparing __pyx_mstate_global->__pyx_kp_s_Differ_is_a_class_for_comparing
#define __pyx_kp_u_Find_longest_matching_block_in_a __pyx_mstate_global->__pyx_kp_u_Find_longest_matching_block_in_a
#define __pyx_kp_s_For_producing_HTML_side_by_side __pyx_mstate_global->__pyx_kp_s_For_producing_HTML_side_by_side
#define __pyx_kp_u_Format_output_and_deal_with_tab __pyx_mstate_global->__pyx_kp_u_Format_output_and_deal_with_tab
#define __pyx_kp_u_Generate_one_of_the_two_sequenc __pyx_mstate_global->__pyx_kp_u_Generate_one_of_the_two_sequenc
#define __pyx_n_s_GenericAlias __pyx_mstate_global->__pyx_n_s_GenericAlias
#define __pyx_n_s_HtmlDiff __pyx_mstate_global->__pyx_n_s_HtmlDiff
#define __pyx_n_s_HtmlDiff___init __pyx_mstate_global->__pyx_n_s_HtmlDiff___init
#define __pyx_n_s_HtmlDiff__collect_lines __pyx_mstate_global->__pyx_n_s_HtmlDiff__collect_lines
#define __pyx_n_s_HtmlDiff__convert_flags __pyx_mstate_global->__pyx_n_s_HtmlDiff__convert_flags
#define __pyx_n_s_HtmlDiff__format_line __pyx_mstate_global->__pyx_n_s_HtmlDiff__format_line
#define __pyx_n_s_HtmlDiff__line_wrapper __pyx_mstate_global->__pyx_n_s_HtmlDiff__line_wrapper
#define __pyx_n_s_HtmlDiff__make_prefix __pyx_mstate_global->__pyx_n_s_HtmlDiff__make_prefix
#define __pyx_n_s_HtmlDiff__split_line __pyx_mstate_global->__pyx_n_s_HtmlDiff__split_line
#define __pyx_n_s_HtmlDiff__tab_newline_replace __pyx_mstate_global->__pyx_n_s_HtmlDiff__tab_newline_replace
#define __pyx_n_s_HtmlDiff__tab_newline_replace_lo __pyx_mstate_global->__pyx_n_s_HtmlDiff__tab_newline_replace_lo
#define __pyx_n_s_HtmlDiff_make_file __pyx_mstate_global->__pyx_n_s_HtmlDiff_make_file
#define __pyx_n_s_HtmlDiff_make_table __pyx_mstate_global->__pyx_n_s_HtmlDiff_make_table
#define __pyx_n_s_IS_CHARACTER_JUNK __pyx_mstate_global->__pyx_n_s_IS_CHARACTER_JUNK
#define __pyx_kp_u_IS_CHARACTER_JUNK_line_1202 __pyx_mstate_global->__pyx_kp_u_IS_CHARACTER_JUNK_line_1202
#define __pyx_n_s_IS_LINE_JUNK __pyx_mstate_global->__pyx_n_s_IS_LINE_JUNK
#define __pyx_kp_u_IS_LINE_JUNK_line_1186 __pyx_mstate_global->__pyx_kp_u_IS_LINE_JUNK_line_1186
#define __pyx_kp_u_Isolate_change_clusters_by_elim __pyx_mstate_global->__pyx_kp_u_Isolate_change_clusters_by_elim
#define __pyx_n_s_Match __pyx_mstate_global->__pyx_n_s_Match
#define __pyx_kp_u_Return_True_for_ignorable_chara __pyx_mstate_global->__pyx_kp_u_Return_True_for_ignorable_chara
#define __pyx_kp_u_Return_True_for_ignorable_line __pyx_mstate_global->__pyx_kp_u_Return_True_for_ignorable_line
#define __pyx_kp_u_Return_a_measure_of_the_sequence __pyx_mstate_global->__pyx_kp_u_Return_a_measure_of_the_sequence
#define __pyx_kp_u_Return_list_of_5_tuples_describi __pyx_mstate_global->__pyx_kp_u_Return_list_of_5_tuples_describi
#define __pyx_kp_u_Return_list_of_triples_describin __pyx_mstate_global->__pyx_kp_u_Return_list_of_triples_describin
#define __pyx_n_s_SequenceMatcher __pyx_mstate_global->__pyx_n_s_SequenceMatcher
#define __pyx_n_s_SequenceMatcher___reduce_cython __pyx_mstate_global->__pyx_n_s_SequenceMatcher___reduce_cython
#define __pyx_n_s_SequenceMatcher___setstate_cytho __pyx_mstate_global->__pyx_n_s_SequenceMatcher___setstate_cytho
#define __pyx_n_s_SequenceMatcher_find_longest_mat __pyx_mstate_global->__pyx_n_s_SequenceMatcher_find_longest_mat
#define __pyx_kp_u_SequenceMatcher_find_longest_mat_2 __pyx_mstate_global->__pyx_kp_u_SequenceMatcher_find_longest_mat_2
#define __pyx_n_s_SequenceMatcher_get_grouped_opco __pyx_mstate_global->__pyx_n_s_SequenceMatcher_get_grouped_opco
#define __pyx_kp_u_SequenceMatcher_get_grouped_opco_2 __pyx_mstate_global->__pyx_kp_u_SequenceMatcher_get_grouped_opco_2
#define __pyx_n_s_SequenceMatcher_get_matching_blo __pyx_mstate_global->__pyx_n_s_SequenceMatcher_get_matching_blo
#define __pyx_kp_u_SequenceMatcher_get_matching_blo_2 __pyx_mstate_global->__pyx_kp_u_SequenceMatcher_get_matching_blo_2
#define __pyx_n_s_SequenceMatcher_get_opcodes __pyx_mstate_global->__pyx_n_s_SequenceMatcher_get_opcodes
#define __pyx_kp_u_SequenceMatcher_get_opcodes_line __pyx_mstate_global->__pyx_kp_u_SequenceMatcher_get_opcodes_line
#define __pyx_n_s_SequenceMatcher_quick_ratio __pyx_mstate_global->__pyx_n_s_SequenceMatcher_quick_ratio
#define __pyx_n_s_SequenceMatcher_ratio __pyx_mstate_global->__pyx_n_s_SequenceMatcher_ratio
#define __pyx_kp_u_SequenceMatcher_ratio_line_730 __pyx_mstate_global->__pyx_kp_u_SequenceMatcher_ratio_line_730
#define __pyx_n_s_SequenceMatcher_real_quick_ratio __pyx_mstate_global->__pyx_n_s_SequenceMatcher_real_quick_ratio
#define __pyx_n_s_SequenceMatcher_set_seq1 __pyx_mstate_global->__pyx_n_s_SequenceMatcher_set_seq1
#define __pyx_kp_u_SequenceMatcher_set_seq1_line_28 __pyx_mstate_global->__pyx_kp_u_SequenceMatcher_set_seq1_line_28
#define __pyx_n_s_SequenceMatcher_set_seq2 __pyx_mstate_global->__pyx_n_s_SequenceMatcher_set_seq2
#define __pyx_kp_u_SequenceMatcher_set_seq2_line_31 __pyx_mstate_global->__pyx_kp_u_SequenceMatcher_set_seq2_line_31
#define __pyx_n_s_SequenceMatcher_set_seqs __pyx_mstate_global->__pyx_n_s_SequenceMatcher_set_seqs
#define __pyx_kp_u_SequenceMatcher_set_seqs_line_27 __pyx_mstate_global->__pyx_kp_u_SequenceMatcher_set_seqs_line_27
#define __pyx_kp_u_Set_the_first_sequence_to_be_com __pyx_mstate_global->__pyx_kp_u_Set_the_first_sequence_to_be_com
#define __pyx_kp_u_Set_the_second_sequence_to_be_co __pyx_mstate_global->__pyx_kp_u_Set_the_second_sequence_to_be_co
#define __pyx_kp_u_Set_the_two_sequences_to_be_comp __pyx_mstate_global->__pyx_kp_u_Set_the_two_sequences_to_be_comp
#define __pyx_n_s_StopIteration __pyx_mstate_global->__pyx_n_s_StopIteration
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_u_Use_SequenceMatcher_to_return_li __pyx_mstate_global->__pyx_kp_u_Use_SequenceMatcher_to_return_li
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_u_When_replacing_one_block_of_lin __pyx_mstate_global->__pyx_kp_u_When_replacing_one_block_of_lin
#define __pyx_n_s_X __pyx_mstate_global->__pyx_n_s_X
#define __pyx_kp_s__11 __pyx_mstate_global->__pyx_kp_s__11
#define __pyx_kp_s__12 __pyx_mstate_global->__pyx_kp_s__12
#define __pyx_n_s__143 __pyx_mstate_global->__pyx_n_s__143
#define __pyx_kp_s__15 __pyx_mstate_global->__pyx_kp_s__15
#define __pyx_kp_u__16 __pyx_mstate_global->__pyx_kp_u__16
#define __pyx_kp_b__17 __pyx_mstate_global->__pyx_kp_b__17
#define __pyx_kp_s__17 __pyx_mstate_global->__pyx_kp_s__17
#define __pyx_kp_u__17 __pyx_mstate_global->__pyx_kp_u__17
#define __pyx_kp_s__18 __pyx_mstate_global->__pyx_kp_s__18
#define __pyx_kp_s__19 __pyx_mstate_global->__pyx_kp_s__19
#define __pyx_kp_s__20 __pyx_mstate_global->__pyx_kp_s__20
#define __pyx_kp_s__21 __pyx_mstate_global->__pyx_kp_s__21
#define __pyx_kp_s__23 __pyx_mstate_global->__pyx_kp_s__23
#define __pyx_kp_s__24 __pyx_mstate_global->__pyx_kp_s__24
#define __pyx_kp_s__25 __pyx_mstate_global->__pyx_kp_s__25
#define __pyx_kp_s__26 __pyx_mstate_global->__pyx_kp_s__26
#define __pyx_kp_s__28 __pyx_mstate_global->__pyx_kp_s__28
#define __pyx_kp_s__29 __pyx_mstate_global->__pyx_kp_s__29
#define __pyx_kp_s__30 __pyx_mstate_global->__pyx_kp_s__30
#define __pyx_kp_s__31 __pyx_mstate_global->__pyx_kp_s__31
#define __pyx_kp_s__32 __pyx_mstate_global->__pyx_kp_s__32
#define __pyx_kp_s__39 __pyx_mstate_global->__pyx_kp_s__39
#define __pyx_kp_s__4 __pyx_mstate_global->__pyx_kp_s__4
#define __pyx_kp_s__42 __pyx_mstate_global->__pyx_kp_s__42
#define __pyx_kp_s__43 __pyx_mstate_global->__pyx_kp_s__43
#define __pyx_kp_s__44 __pyx_mstate_global->__pyx_kp_s__44
#define __pyx_kp_s__45 __pyx_mstate_global->__pyx_kp_s__45
#define __pyx_kp_s__46 __pyx_mstate_global->__pyx_kp_s__46
#define __pyx_kp_s__47 __pyx_mstate_global->__pyx_kp_s__47
#define __pyx_kp_s__49 __pyx_mstate_global->__pyx_kp_s__49
#define __pyx_kp_s__50 __pyx_mstate_global->__pyx_kp_s__50
#define __pyx_kp_s__51 __pyx_mstate_global->__pyx_kp_s__51
#define __pyx_kp_s__52 __pyx_mstate_global->__pyx_kp_s__52
#define __pyx_n_s__57 __pyx_mstate_global->__pyx_n_s__57
#define __pyx_kp_s__58 __pyx_mstate_global->__pyx_kp_s__58
#define __pyx_kp_s__6 __pyx_mstate_global->__pyx_kp_s__6
#define __pyx_kp_s__67 __pyx_mstate_global->__pyx_kp_s__67
#define __pyx_kp_s__7 __pyx_mstate_global->__pyx_kp_s__7
#define __pyx_kp_s__72 __pyx_mstate_global->__pyx_kp_s__72
#define __pyx_kp_s__75 __pyx_mstate_global->__pyx_kp_s__75
#define __pyx_kp_s__78 __pyx_mstate_global->__pyx_kp_s__78
#define __pyx_kp_s__81 __pyx_mstate_global->__pyx_kp_s__81
#define __pyx_kp_s__83 __pyx_mstate_global->__pyx_kp_s__83
#define __pyx_kp_s__85 __pyx_mstate_global->__pyx_kp_s__85
#define __pyx_n_s_a __pyx_mstate_global->__pyx_n_s_a
#define __pyx_kp_s_a_b_size __pyx_mstate_global->__pyx_kp_s_a_b_size
#define __pyx_kp_s_a_href_difflib_chg__s_0_f_a __pyx_mstate_global->__pyx_kp_s_a_href_difflib_chg__s_0_f_a
#define __pyx_kp_s_a_href_difflib_chg__s__d_n_a __pyx_mstate_global->__pyx_kp_s_a_href_difflib_chg__s__d_n_a
#define __pyx_kp_s_a_href_difflib_chg__s_top_t_a __pyx_mstate_global->__pyx_kp_s_a_href_difflib_chg__s_top_t_a
#define __pyx_n_s_aelt __pyx_mstate_global->__pyx_n_s_aelt
#define __pyx_n_s_ahi __pyx_mstate_global->__pyx_n_s_ahi
#define __pyx_n_s_ahi_2 __pyx_mstate_global->__pyx_n_s_ahi_2
#define __pyx_n_s_ai __pyx_mstate_global->__pyx_n_s_ai
#define __pyx_n_s_ai1 __pyx_mstate_global->__pyx_n_s_ai1
#define __pyx_n_s_ai2 __pyx_mstate_global->__pyx_n_s_ai2
#define __pyx_n_s_aline __pyx_mstate_global->__pyx_n_s_aline
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_kp_s_all_arguments_must_be_bytes_not __pyx_mstate_global->__pyx_kp_s_all_arguments_must_be_bytes_not
#define __pyx_kp_s_all_arguments_must_be_str_not_r __pyx_mstate_global->__pyx_kp_s_all_arguments_must_be_str_not_r
#define __pyx_n_s_alo __pyx_mstate_global->__pyx_n_s_alo
#define __pyx_kp_s_amp __pyx_mstate_global->__pyx_kp_s_amp
#define __pyx_n_s_answer __pyx_mstate_global->__pyx_n_s_answer
#define __pyx_n_s_append __pyx_mstate_global->__pyx_n_s_append
#define __pyx_n_s_arg __pyx_mstate_global->__pyx_n_s_arg
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_ascii __pyx_mstate_global->__pyx_n_s_ascii
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_atags __pyx_mstate_global->__pyx_n_s_atags
#define __pyx_n_s_autojunk __pyx_mstate_global->__pyx_n_s_autojunk
#define __pyx_n_s_avail __pyx_mstate_global->__pyx_n_s_avail
#define __pyx_n_s_availhas __pyx_mstate_global->__pyx_n_s_availhas
#define __pyx_n_s_b __pyx_mstate_global->__pyx_n_s_b
#define __pyx_n_s_begin __pyx_mstate_global->__pyx_n_s_begin
#define __pyx_n_s_beginning __pyx_mstate_global->__pyx_n_s_beginning
#define __pyx_n_s_belt __pyx_mstate_global->__pyx_n_s_belt
#define __pyx_n_s_best_i __pyx_mstate_global->__pyx_n_s_best_i
#define __pyx_n_s_best_j __pyx_mstate_global->__pyx_n_s_best_j
#define __pyx_n_s_best_ratio __pyx_mstate_global->__pyx_n_s_best_ratio
#define __pyx_n_s_bhi __pyx_mstate_global->__pyx_n_s_bhi
#define __pyx_n_s_bhi_2 __pyx_mstate_global->__pyx_n_s_bhi_2
#define __pyx_n_s_bj __pyx_mstate_global->__pyx_n_s_bj
#define __pyx_n_s_bj1 __pyx_mstate_global->__pyx_n_s_bj1
#define __pyx_n_s_bj2 __pyx_mstate_global->__pyx_n_s_bj2
#define __pyx_n_s_bline __pyx_mstate_global->__pyx_n_s_bline
#define __pyx_n_s_blo __pyx_mstate_global->__pyx_n_s_blo
#define __pyx_n_s_btags __pyx_mstate_global->__pyx_n_s_btags
#define __pyx_n_s_ch __pyx_mstate_global->__pyx_n_s_ch
#define __pyx_n_s_change_re __pyx_mstate_global->__pyx_n_s_change_re
#define __pyx_n_s_charjunk __pyx_mstate_global->__pyx_n_s_charjunk
#define __pyx_n_s_charjunk_2 __pyx_mstate_global->__pyx_n_s_charjunk_2
#define __pyx_n_s_charset __pyx_mstate_global->__pyx_n_s_charset
#define __pyx_n_s_check_types __pyx_mstate_global->__pyx_n_s_check_types
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_codes __pyx_mstate_global->__pyx_n_s_codes
#define __pyx_n_s_collect_lines __pyx_mstate_global->__pyx_n_s_collect_lines
#define __pyx_n_s_collections __pyx_mstate_global->__pyx_n_s_collections
#define __pyx_n_s_compare __pyx_mstate_global->__pyx_n_s_compare
#define __pyx_n_s_compile __pyx_mstate_global->__pyx_n_s_compile
#define __pyx_n_s_contains __pyx_mstate_global->__pyx_n_s_contains
#define __pyx_n_s_context __pyx_mstate_global->__pyx_n_s_context
#define __pyx_n_s_contextLines __pyx_mstate_global->__pyx_n_s_contextLines
#define __pyx_n_s_context_diff __pyx_mstate_global->__pyx_n_s_context_diff
#define __pyx_kp_u_context_diff_line_1321 __pyx_mstate_global->__pyx_kp_u_context_diff_line_1321
#define __pyx_n_s_context_diff_locals_genexpr __pyx_mstate_global->__pyx_n_s_context_diff_locals_genexpr
#define __pyx_n_s_context_lines __pyx_mstate_global->__pyx_n_s_context_lines
#define __pyx_n_s_convert_flags __pyx_mstate_global->__pyx_n_s_convert_flags
#define __pyx_n_s_count __pyx_mstate_global->__pyx_n_s_count
#define __pyx_n_s_cruncher __pyx_mstate_global->__pyx_n_s_cruncher
#define __pyx_n_s_cutoff __pyx_mstate_global->__pyx_n_s_cutoff
#define __pyx_kp_s_cutoff_must_be_in_0_0_1_0_r __pyx_mstate_global->__pyx_kp_s_cutoff_must_be_in_0_0_1_0_r
#define __pyx_n_s_cydifflib __pyx_mstate_global->__pyx_n_s_cydifflib
#define __pyx_kp_s_cydifflib_pyx __pyx_mstate_global->__pyx_kp_s_cydifflib_pyx
#define __pyx_kp_s_d __pyx_mstate_global->__pyx_kp_s_d
#define __pyx_n_s_data_list __pyx_mstate_global->__pyx_n_s_data_list
#define __pyx_n_s_data_rows __pyx_mstate_global->__pyx_n_s_data_rows
#define __pyx_n_s_decode __pyx_mstate_global->__pyx_n_s_decode
#define __pyx_n_s_default_prefix __pyx_mstate_global->__pyx_n_s_default_prefix
#define __pyx_n_s_delete __pyx_mstate_global->__pyx_n_s_delete
#define __pyx_n_s_delta __pyx_mstate_global->__pyx_n_s_delta
#define __pyx_n_s_dfunc __pyx_mstate_global->__pyx_n_s_dfunc
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_diff_bytes __pyx_mstate_global->__pyx_n_s_diff_bytes
#define __pyx_n_s_diff_bytes_locals_decode __pyx_mstate_global->__pyx_n_s_diff_bytes_locals_decode
#define __pyx_n_s_diff_lines_iterator __pyx_mstate_global->__pyx_n_s_diff_lines_iterator
#define __pyx_n_s_diffs __pyx_mstate_global->__pyx_n_s_diffs
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_dump __pyx_mstate_global->__pyx_n_s_dump
#define __pyx_n_s_elt __pyx_mstate_global->__pyx_n_s_elt
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_end __pyx_mstate_global->__pyx_n_s_end
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_eqi __pyx_mstate_global->__pyx_n_s_eqi
#define __pyx_n_s_eqj __pyx_mstate_global->__pyx_n_s_eqj
#define __pyx_n_s_equal __pyx_mstate_global->__pyx_n_s_equal
#define __pyx_n_s_err __pyx_mstate_global->__pyx_n_s_err
#define __pyx_n_s_expand_tabs __pyx_mstate_global->__pyx_n_s_expand_tabs
#define __pyx_n_s_expandtabs __pyx_mstate_global->__pyx_n_s_expandtabs
#define __pyx_n_s_fancy_helper __pyx_mstate_global->__pyx_n_s_fancy_helper
#define __pyx_n_s_fancy_replace __pyx_mstate_global->__pyx_n_s_fancy_replace
#define __pyx_n_s_file1_range __pyx_mstate_global->__pyx_n_s_file1_range
#define __pyx_n_s_file2_range __pyx_mstate_global->__pyx_n_s_file2_range
#define __pyx_n_s_file_template __pyx_mstate_global->__pyx_n_s_file_template
#define __pyx_n_s_find_longest_match __pyx_mstate_global->__pyx_n_s_find_longest_match
#define __pyx_n_s_first __pyx_mstate_global->__pyx_n_s_first
#define __pyx_n_s_flag __pyx_mstate_global->__pyx_n_s_flag
#define __pyx_n_s_flaglist __pyx_mstate_global->__pyx_n_s_flaglist
#define __pyx_n_s_fmt __pyx_mstate_global->__pyx_n_s_fmt
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_format_key __pyx_mstate_global->__pyx_n_s_format_key
#define __pyx_n_s_format_line __pyx_mstate_global->__pyx_n_s_format_line
#define __pyx_n_s_format_range_context __pyx_mstate_global->__pyx_n_s_format_range_context
#define __pyx_n_s_format_range_unified __pyx_mstate_global->__pyx_n_s_format_range_unified
#define __pyx_n_s_found_diff __pyx_mstate_global->__pyx_n_s_found_diff
#define __pyx_n_s_fromDiff __pyx_mstate_global->__pyx_n_s_fromDiff
#define __pyx_kp_s_from_d __pyx_mstate_global->__pyx_kp_s_from_d
#define __pyx_n_s_from_line __pyx_mstate_global->__pyx_n_s_from_line
#define __pyx_n_s_fromdata __pyx_mstate_global->__pyx_n_s_fromdata
#define __pyx_n_s_fromdate __pyx_mstate_global->__pyx_n_s_fromdate
#define __pyx_n_s_fromdesc __pyx_mstate_global->__pyx_n_s_fromdesc
#define __pyx_n_s_fromfile __pyx_mstate_global->__pyx_n_s_fromfile
#define __pyx_n_s_fromfiledate __pyx_mstate_global->__pyx_n_s_fromfiledate
#define __pyx_n_s_fromline __pyx_mstate_global->__pyx_n_s_fromline
#define __pyx_n_s_fromlines __pyx_mstate_global->__pyx_n_s_fromlines
#define __pyx_n_s_fromlist __pyx_mstate_global->__pyx_n_s_fromlist
#define __pyx_n_s_fromprefix __pyx_mstate_global->__pyx_n_s_fromprefix
#define __pyx_n_s_fromtext __pyx_mstate_global->__pyx_n_s_fromtext
#define __pyx_n_s_fullbcount __pyx_mstate_global->__pyx_n_s_fullbcount
#define __pyx_n_s_g __pyx_mstate_global->__pyx_n_s_g
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_genexpr __pyx_mstate_global->__pyx_n_s_genexpr
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_get_close_matches __pyx_mstate_global->__pyx_n_s_get_close_matches
#define __pyx_kp_u_get_close_matches_line_799 __pyx_mstate_global->__pyx_kp_u_get_close_matches_line_799
#define __pyx_n_s_get_grouped_opcodes __pyx_mstate_global->__pyx_n_s_get_grouped_opcodes
#define __pyx_n_s_get_matching_blocks __pyx_mstate_global->__pyx_n_s_get_matching_blocks
#define __pyx_n_s_get_opcodes __pyx_mstate_global->__pyx_n_s_get_opcodes
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_group __pyx_mstate_global->__pyx_n_s_group
#define __pyx_kp_s_gt __pyx_mstate_global->__pyx_kp_s_gt
#define __pyx_n_s_header_row __pyx_mstate_global->__pyx_n_s_header_row
#define __pyx_n_s_heapq __pyx_mstate_global->__pyx_n_s_heapq
#define __pyx_n_s_hi __pyx_mstate_global->__pyx_n_s_hi
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_i1 __pyx_mstate_global->__pyx_n_s_i1
#define __pyx_n_s_i2 __pyx_mstate_global->__pyx_n_s_i2
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_kp_s_id_difflib_chg__s__d __pyx_mstate_global->__pyx_kp_s_id_difflib_chg__s__d
#define __pyx_kp_s_id_s_s __pyx_mstate_global->__pyx_kp_s_id_s_s
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_in_change __pyx_mstate_global->__pyx_n_s_in_change
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_insert __pyx_mstate_global->__pyx_n_s_insert
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_isjunk __pyx_mstate_global->__pyx_n_s_isjunk
#define __pyx_n_s_isspace __pyx_mstate_global->__pyx_n_s_isspace
#define __pyx_n_s_items __pyx_mstate_global->__pyx_n_s_items
#define __pyx_n_s_j __pyx_mstate_global->__pyx_n_s_j
#define __pyx_n_s_j1 __pyx_mstate_global->__pyx_n_s_j1
#define __pyx_n_s_j2 __pyx_mstate_global->__pyx_n_s_j2
#define __pyx_n_s_join __pyx_mstate_global->__pyx_n_s_join
#define __pyx_n_s_keep_original_ws __pyx_mstate_global->__pyx_n_s_keep_original_ws
#define __pyx_n_s_keep_original_ws_locals_genexpr __pyx_mstate_global->__pyx_n_s_keep_original_ws_locals_genexpr
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_la __pyx_mstate_global->__pyx_n_s_la
#define __pyx_n_s_last __pyx_mstate_global->__pyx_n_s_last
#define __pyx_n_s_lb __pyx_mstate_global->__pyx_n_s_lb
#define __pyx_n_s_legend __pyx_mstate_global->__pyx_n_s_legend
#define __pyx_n_s_legend_2 __pyx_mstate_global->__pyx_n_s_legend_2
#define __pyx_n_s_length __pyx_mstate_global->__pyx_n_s_length
#define __pyx_n_s_line __pyx_mstate_global->__pyx_n_s_line
#define __pyx_n_s_line1 __pyx_mstate_global->__pyx_n_s_line1
#define __pyx_n_s_line2 __pyx_mstate_global->__pyx_n_s_line2
#define __pyx_n_s_line_iterator __pyx_mstate_global->__pyx_n_s_line_iterator
#define __pyx_n_s_line_iterator_2 __pyx_mstate_global->__pyx_n_s_line_iterator_2
#define __pyx_n_s_line_num __pyx_mstate_global->__pyx_n_s_line_num
#define __pyx_n_s_line_pair_iterator __pyx_mstate_global->__pyx_n_s_line_pair_iterator
#define __pyx_n_s_line_pair_iterator_2 __pyx_mstate_global->__pyx_n_s_line_pair_iterator_2
#define __pyx_n_s_line_wrapper __pyx_mstate_global->__pyx_n_s_line_wrapper
#define __pyx_n_s_linejunk __pyx_mstate_global->__pyx_n_s_linejunk
#define __pyx_n_s_linejunk_2 __pyx_mstate_global->__pyx_n_s_linejunk_2
#define __pyx_n_s_linenum __pyx_mstate_global->__pyx_n_s_linenum
#define __pyx_n_s_lines __pyx_mstate_global->__pyx_n_s_lines
#define __pyx_kp_s_lines_to_compare_must_be_str_not __pyx_mstate_global->__pyx_kp_s_lines_to_compare_must_be_str_not
#define __pyx_n_s_lines_to_write __pyx_mstate_global->__pyx_n_s_lines_to_write
#define __pyx_n_s_lineterm __pyx_mstate_global->__pyx_n_s_lineterm
#define __pyx_n_s_lo __pyx_mstate_global->__pyx_n_s_lo
#define __pyx_kp_s_lt __pyx_mstate_global->__pyx_kp_s_lt
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_make_file __pyx_mstate_global->__pyx_n_s_make_file
#define __pyx_n_s_make_line __pyx_mstate_global->__pyx_n_s_make_line
#define __pyx_n_s_make_prefix __pyx_mstate_global->__pyx_n_s_make_prefix
#define __pyx_n_s_make_table __pyx_mstate_global->__pyx_n_s_make_table
#define __pyx_n_s_map __pyx_mstate_global->__pyx_n_s_map
#define __pyx_n_s_mark __pyx_mstate_global->__pyx_n_s_mark
#define __pyx_n_s_markers __pyx_mstate_global->__pyx_n_s_markers
#define __pyx_n_s_match __pyx_mstate_global->__pyx_n_s_match
#define __pyx_n_s_match_object __pyx_mstate_global->__pyx_n_s_match_object
#define __pyx_n_s_matches __pyx_mstate_global->__pyx_n_s_matches
#define __pyx_n_s_max __pyx_mstate_global->__pyx_n_s_max
#define __pyx_n_s_mdiff __pyx_mstate_global->__pyx_n_s_mdiff
#define __pyx_n_s_mdiff_locals__line_iterator __pyx_mstate_global->__pyx_n_s_mdiff_locals__line_iterator
#define __pyx_n_s_mdiff_locals__line_pair_iterato __pyx_mstate_global->__pyx_n_s_mdiff_locals__line_pair_iterato
#define __pyx_n_s_mdiff_locals__make_line __pyx_mstate_global->__pyx_n_s_mdiff_locals__make_line
#define __pyx_n_s_mdiff_locals__make_line_locals __pyx_mstate_global->__pyx_n_s_mdiff_locals__make_line_locals
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_mro_entries __pyx_mstate_global->__pyx_n_s_mro_entries
#define __pyx_n_s_msg __pyx_mstate_global->__pyx_n_s_msg
#define __pyx_n_s_n __pyx_mstate_global->__pyx_n_s_n
#define __pyx_kp_s_n_must_be_0_r __pyx_mstate_global->__pyx_kp_s_n_must_be_0_r
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_namedtuple __pyx_mstate_global->__pyx_n_s_namedtuple
#define __pyx_n_s_namedtuple_2 __pyx_mstate_global->__pyx_n_s_namedtuple_2
#define __pyx_kp_s_nbsp __pyx_mstate_global->__pyx_kp_s_nbsp
#define __pyx_n_s_ndiff __pyx_mstate_global->__pyx_n_s_ndiff
#define __pyx_kp_u_ndiff_line_1444 __pyx_mstate_global->__pyx_kp_u_ndiff_line_1444
#define __pyx_n_s_next_href __pyx_mstate_global->__pyx_n_s_next_href
#define __pyx_n_s_next_id __pyx_mstate_global->__pyx_n_s_next_id
#define __pyx_n_s_nlargest __pyx_mstate_global->__pyx_n_s_nlargest
#define __pyx_n_s_nlargest_2 __pyx_mstate_global->__pyx_n_s_nlargest_2
#define __pyx_n_s_nn __pyx_mstate_global->__pyx_n_s_nn
#define __pyx_n_s_num_blanks_pending __pyx_mstate_global->__pyx_n_s_num_blanks_pending
#define __pyx_n_s_num_blanks_to_yield __pyx_mstate_global->__pyx_n_s_num_blanks_to_yield
#define __pyx_n_s_num_chg __pyx_mstate_global->__pyx_n_s_num_chg
#define __pyx_n_s_num_lines __pyx_mstate_global->__pyx_n_s_num_lines
#define __pyx_n_s_numb __pyx_mstate_global->__pyx_n_s_numb
#define __pyx_n_s_numlines __pyx_mstate_global->__pyx_n_s_numlines
#define __pyx_n_s_object __pyx_mstate_global->__pyx_n_s_object
#define __pyx_n_s_pat __pyx_mstate_global->__pyx_n_s_pat
#define __pyx_n_s_plain_replace __pyx_mstate_global->__pyx_n_s_plain_replace
#define __pyx_n_s_pop __pyx_mstate_global->__pyx_n_s_pop
#define __pyx_n_s_possibilities __pyx_mstate_global->__pyx_n_s_possibilities
#define __pyx_n_s_prefix __pyx_mstate_global->__pyx_n_s_prefix
#define __pyx_n_s_prefix_2 __pyx_mstate_global->__pyx_n_s_prefix_2
#define __pyx_n_s_prefixes __pyx_mstate_global->__pyx_n_s_prefixes
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_qformat __pyx_mstate_global->__pyx_n_s_qformat
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_quick_ratio __pyx_mstate_global->__pyx_n_s_quick_ratio
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_ratio __pyx_mstate_global->__pyx_n_s_ratio
#define __pyx_n_s_ratio_locals_genexpr __pyx_mstate_global->__pyx_n_s_ratio_locals_genexpr
#define __pyx_n_s_re __pyx_mstate_global->__pyx_n_s_re
#define __pyx_n_s_real_quick_ratio __pyx_mstate_global->__pyx_n_s_real_quick_ratio
#define __pyx_n_s_record_sub_info __pyx_mstate_global->__pyx_n_s_record_sub_info
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_replace __pyx_mstate_global->__pyx_n_s_replace
#define __pyx_n_s_restore __pyx_mstate_global->__pyx_n_s_restore
#define __pyx_kp_u_restore_line_2160 __pyx_mstate_global->__pyx_kp_u_restore_line_2160
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_reversed __pyx_mstate_global->__pyx_n_s_reversed
#define __pyx_n_s_rstrip __pyx_mstate_global->__pyx_n_s_rstrip
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_kp_s_s_s __pyx_mstate_global->__pyx_kp_s_s_s
#define __pyx_kp_s_s_s_2 __pyx_mstate_global->__pyx_kp_s_s_s_2
#define __pyx_n_s_score __pyx_mstate_global->__pyx_n_s_score
#define __pyx_n_s_second __pyx_mstate_global->__pyx_n_s_second
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self_a__self_b__cannot_be_conver __pyx_mstate_global->__pyx_kp_s_self_a__self_b__cannot_be_conver
#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_set_seq1 __pyx_mstate_global->__pyx_n_s_set_seq1
#define __pyx_n_s_set_seq2 __pyx_mstate_global->__pyx_n_s_set_seq2
#define __pyx_n_s_set_seqs __pyx_mstate_global->__pyx_n_s_set_seqs
#define __pyx_n_s_setdefault __pyx_mstate_global->__pyx_n_s_setdefault
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_side __pyx_mstate_global->__pyx_n_s_side
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_span __pyx_mstate_global->__pyx_n_s_span
#define __pyx_kp_s_span_2 __pyx_mstate_global->__pyx_kp_s_span_2
#define __pyx_kp_s_span_class_diff_add __pyx_mstate_global->__pyx_kp_s_span_class_diff_add
#define __pyx_kp_s_span_class_diff_chg __pyx_mstate_global->__pyx_kp_s_span_class_diff_chg
#define __pyx_kp_s_span_class_diff_sub __pyx_mstate_global->__pyx_kp_s_span_class_diff_sub
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_split_line __pyx_mstate_global->__pyx_n_s_split_line
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_started __pyx_mstate_global->__pyx_n_s_started
#define __pyx_n_s_startswith __pyx_mstate_global->__pyx_n_s_startswith
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_styles __pyx_mstate_global->__pyx_n_s_styles
#define __pyx_n_s_styles_2 __pyx_mstate_global->__pyx_n_s_styles_2
#define __pyx_n_s_sub __pyx_mstate_global->__pyx_n_s_sub
#define __pyx_n_s_sub_info __pyx_mstate_global->__pyx_n_s_sub_info
#define __pyx_n_s_sum __pyx_mstate_global->__pyx_n_s_sum
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_surrogateescape __pyx_mstate_global->__pyx_n_s_surrogateescape
#define __pyx_n_s_tab_newline_replace __pyx_mstate_global->__pyx_n_s_tab_newline_replace
#define __pyx_n_s_table __pyx_mstate_global->__pyx_n_s_table
#define __pyx_kp_s_table_class_diff_id_difflib_chg __pyx_mstate_global->__pyx_kp_s_table_class_diff_id_difflib_chg
#define __pyx_kp_s_table_class_diff_summary_Legend __pyx_mstate_global->__pyx_kp_s_table_class_diff_summary_Legend
#define __pyx_kp_s_table_diff_font_family_Courier __pyx_mstate_global->__pyx_kp_s_table_diff_font_family_Courier
#define __pyx_n_s_table_template __pyx_mstate_global->__pyx_n_s_table_template
#define __pyx_n_s_tabsize __pyx_mstate_global->__pyx_n_s_tabsize
#define __pyx_n_s_tabsize_2 __pyx_mstate_global->__pyx_n_s_tabsize_2
#define __pyx_n_s_tag __pyx_mstate_global->__pyx_n_s_tag
#define __pyx_n_s_tag_s __pyx_mstate_global->__pyx_n_s_tag_s
#define __pyx_kp_s_tbody_tbody __pyx_mstate_global->__pyx_kp_s_tbody_tbody
#define __pyx_kp_s_td_class_diff_header_s_s_td_td __pyx_mstate_global->__pyx_kp_s_td_class_diff_header_s_s_td_td
#define __pyx_kp_s_td_class_diff_next_s_td_s_tr __pyx_mstate_global->__pyx_kp_s_td_class_diff_next_s_td_s_tr
#define __pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t __pyx_mstate_global->__pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t
#define __pyx_kp_s_td_td_td_nbsp_No_Differences_Fo __pyx_mstate_global->__pyx_kp_s_td_td_td_nbsp_No_Differences_Fo
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_text __pyx_mstate_global->__pyx_n_s_text
#define __pyx_kp_s_th_class_diff_next_br_th __pyx_mstate_global->__pyx_kp_s_th_class_diff_next_br_th
#define __pyx_kp_s_th_colspan_2_class_diff_header __pyx_mstate_global->__pyx_kp_s_th_colspan_2_class_diff_header
#define __pyx_kp_s_thead_tr_s_s_s_s_tr_thead __pyx_mstate_global->__pyx_kp_s_thead_tr_s_s_s_s_tr_thead
#define __pyx_n_s_throw __pyx_mstate_global->__pyx_n_s_throw
#define __pyx_kp_s_to_d __pyx_mstate_global->__pyx_kp_s_to_d
#define __pyx_n_s_to_diff __pyx_mstate_global->__pyx_n_s_to_diff
#define __pyx_n_s_to_line __pyx_mstate_global->__pyx_n_s_to_line
#define __pyx_n_s_todata __pyx_mstate_global->__pyx_n_s_todata
#define __pyx_n_s_todate __pyx_mstate_global->__pyx_n_s_todate
#define __pyx_n_s_todesc __pyx_mstate_global->__pyx_n_s_todesc
#define __pyx_n_s_tofile __pyx_mstate_global->__pyx_n_s_tofile
#define __pyx_n_s_tofiledate __pyx_mstate_global->__pyx_n_s_tofiledate
#define __pyx_n_s_toline __pyx_mstate_global->__pyx_n_s_toline
#define __pyx_n_s_tolines __pyx_mstate_global->__pyx_n_s_tolines
#define __pyx_n_s_tolist __pyx_mstate_global->__pyx_n_s_tolist
#define __pyx_n_s_toprefix __pyx_mstate_global->__pyx_n_s_toprefix
#define __pyx_n_s_totext __pyx_mstate_global->__pyx_n_s_totext
#define __pyx_kp_s_tr_td_class_diff_next_s_s_td_s __pyx_mstate_global->__pyx_kp_s_tr_td_class_diff_next_s_s_td_s
#define __pyx_n_s_types __pyx_mstate_global->__pyx_n_s_types
#define __pyx_n_s_unified_diff __pyx_mstate_global->__pyx_n_s_unified_diff
#define __pyx_kp_u_unified_diff_line_1236 __pyx_mstate_global->__pyx_kp_u_unified_diff_line_1236
#define __pyx_kp_s_unknown_delta_choice_must_be_1_o __pyx_mstate_global->__pyx_kp_s_unknown_delta_choice_must_be_1_o
#define __pyx_kp_s_unknown_tag_r __pyx_mstate_global->__pyx_kp_s_unknown_tag_r
#define __pyx_kp_s_utf_8 __pyx_mstate_global->__pyx_kp_s_utf_8
#define __pyx_n_s_which __pyx_mstate_global->__pyx_n_s_which
#define __pyx_n_s_which_2 __pyx_mstate_global->__pyx_n_s_which_2
#define __pyx_n_s_word __pyx_mstate_global->__pyx_n_s_word
#define __pyx_n_s_wrapcolumn __pyx_mstate_global->__pyx_n_s_wrapcolumn
#define __pyx_n_s_wrapcolumn_2 __pyx_mstate_global->__pyx_n_s_wrapcolumn_2
#define __pyx_n_s_ws __pyx_mstate_global->__pyx_n_s_ws
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_s_xmlcharrefreplace __pyx_mstate_global->__pyx_n_s_xmlcharrefreplace
#define __pyx_n_s_zip __pyx_mstate_global->__pyx_n_s_zip
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_0_6 __pyx_mstate_global->__pyx_float_0_6
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_float_0_74 __pyx_mstate_global->__pyx_float_0_74
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_5 __pyx_mstate_global->__pyx_int_5
#define __pyx_int_8 __pyx_mstate_global->__pyx_int_8
#define __pyx_int_100 __pyx_mstate_global->__pyx_int_100
#define __pyx_int_200 __pyx_mstate_global->__pyx_int_200
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_slice__38 __pyx_mstate_global->__pyx_slice__38
#define __pyx_slice__90 __pyx_mstate_global->__pyx_slice__90
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__68 __pyx_mstate_global->__pyx_tuple__68
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__77 __pyx_mstate_global->__pyx_tuple__77
#define __pyx_tuple__79 __pyx_mstate_global->__pyx_tuple__79
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__87 __pyx_mstate_global->__pyx_tuple__87
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_tuple__94 __pyx_mstate_global->__pyx_tuple__94
#define __pyx_tuple__96 __pyx_mstate_global->__pyx_tuple__96
#define __pyx_tuple__98 __pyx_mstate_global->__pyx_tuple__98
#define __pyx_codeobj__2 __pyx_mstate_global->__pyx_codeobj__2
#define __pyx_codeobj__5 __pyx_mstate_global->__pyx_codeobj__5
#define __pyx_codeobj__8 __pyx_mstate_global->__pyx_codeobj__8
#define __pyx_codeobj__9 __pyx_mstate_global->__pyx_codeobj__9
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_tuple__101 __pyx_mstate_global->__pyx_tuple__101
#define __pyx_tuple__103 __pyx_mstate_global->__pyx_tuple__103
#define __pyx_tuple__105 __pyx_mstate_global->__pyx_tuple__105
#define __pyx_tuple__106 __pyx_mstate_global->__pyx_tuple__106
#define __pyx_tuple__107 __pyx_mstate_global->__pyx_tuple__107
#define __pyx_tuple__109 __pyx_mstate_global->__pyx_tuple__109
#define __pyx_tuple__111 __pyx_mstate_global->__pyx_tuple__111
#define __pyx_tuple__113 __pyx_mstate_global->__pyx_tuple__113
#define __pyx_tuple__115 __pyx_mstate_global->__pyx_tuple__115
#define __pyx_tuple__117 __pyx_mstate_global->__pyx_tuple__117
#define __pyx_tuple__119 __pyx_mstate_global->__pyx_tuple__119
#define __pyx_tuple__120 __pyx_mstate_global->__pyx_tuple__120
#define __pyx_tuple__122 __pyx_mstate_global->__pyx_tuple__122
#define __pyx_tuple__124 __pyx_mstate_global->__pyx_tuple__124
#define __pyx_tuple__125 __pyx_mstate_global->__pyx_tuple__125
#define __pyx_tuple__126 __pyx_mstate_global->__pyx_tuple__126
#define __pyx_tuple__127 __pyx_mstate_global->__pyx_tuple__127
#define __pyx_tuple__128 __pyx_mstate_global->__pyx_tuple__128
#define __pyx_tuple__129 __pyx_mstate_global->__pyx_tuple__129
#define __pyx_tuple__130 __pyx_mstate_global->__pyx_tuple__130
#define __pyx_tuple__131 __pyx_mstate_global->__pyx_tuple__131
#define __pyx_tuple__133 __pyx_mstate_global->__pyx_tuple__133
#define __pyx_tuple__134 __pyx_mstate_global->__pyx_tuple__134
#define __pyx_tuple__136 __pyx_mstate_global->__pyx_tuple__136
#define __pyx_tuple__137 __pyx_mstate_global->__pyx_tuple__137
#define __pyx_tuple__139 __pyx_mstate_global->__pyx_tuple__139
#define __pyx_tuple__140 __pyx_mstate_global->__pyx_tuple__140
#define __pyx_tuple__141 __pyx_mstate_global->__pyx_tuple__141
#define __pyx_tuple__144 __pyx_mstate_global->__pyx_tuple__144
#define __pyx_tuple__145 __pyx_mstate_global->__pyx_tuple__145
#define __pyx_tuple__146 __pyx_mstate_global->__pyx_tuple__146
#define __pyx_tuple__148 __pyx_mstate_global->__pyx_tuple__148
#define __pyx_tuple__149 __pyx_mstate_global->__pyx_tuple__149
#define __pyx_tuple__150 __pyx_mstate_global->__pyx_tuple__150
#define __pyx_tuple__152 __pyx_mstate_global->__pyx_tuple__152
#define __pyx_tuple__153 __pyx_mstate_global->__pyx_tuple__153
#define __pyx_tuple__154 __pyx_mstate_global->__pyx_tuple__154
#define __pyx_tuple__155 __pyx_mstate_global->__pyx_tuple__155
#define __pyx_tuple__157 __pyx_mstate_global->__pyx_tuple__157
#define __pyx_tuple__159 __pyx_mstate_global->__pyx_tuple__159
#define __pyx_tuple__160 __pyx_mstate_global->__pyx_tuple__160
#define __pyx_tuple__162 __pyx_mstate_global->__pyx_tuple__162
#define __pyx_tuple__164 __pyx_mstate_global->__pyx_tuple__164
#define __pyx_tuple__165 __pyx_mstate_global->__pyx_tuple__165
#define __pyx_tuple__167 __pyx_mstate_global->__pyx_tuple__167
#define __pyx_tuple__169 __pyx_mstate_global->__pyx_tuple__169
#define __pyx_tuple__171 __pyx_mstate_global->__pyx_tuple__171
#define __pyx_tuple__173 __pyx_mstate_global->__pyx_tuple__173
#define __pyx_tuple__175 __pyx_mstate_global->__pyx_tuple__175
#define __pyx_tuple__176 __pyx_mstate_global->__pyx_tuple__176
#define __pyx_codeobj__10 __pyx_mstate_global->__pyx_codeobj__10
#define __pyx_codeobj__13 __pyx_mstate_global->__pyx_codeobj__13
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__112 __pyx_mstate_global->__pyx_codeobj__112
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__118 __pyx_mstate_global->__pyx_codeobj__118
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__123 __pyx_mstate_global->__pyx_codeobj__123
#define __pyx_codeobj__132 __pyx_mstate_global->__pyx_codeobj__132
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__138 __pyx_mstate_global->__pyx_codeobj__138
#define __pyx_codeobj__142 __pyx_mstate_global->__pyx_codeobj__142
#define __pyx_codeobj__147 __pyx_mstate_global->__pyx_codeobj__147
#define __pyx_codeobj__151 __pyx_mstate_global->__pyx_codeobj__151
#define __pyx_codeobj__156 __pyx_mstate_global->__pyx_codeobj__156
#define __pyx_codeobj__158 __pyx_mstate_global->__pyx_codeobj__158
#define __pyx_codeobj__161 __pyx_mstate_global->__pyx_codeobj__161
#define __pyx_codeobj__163 __pyx_mstate_global->__pyx_codeobj__163
#define __pyx_codeobj__166 __pyx_mstate_global->__pyx_codeobj__166
#define __pyx_codeobj__168 __pyx_mstate_global->__pyx_codeobj__168
#define __pyx_codeobj__170 __pyx_mstate_global->__pyx_codeobj__170
#define __pyx_codeobj__172 __pyx_mstate_global->__pyx_codeobj__172
#define __pyx_codeobj__174 __pyx_mstate_global->__pyx_codeobj__174
#endif
/* #### Code section: module_code ### */

/* "cydifflib.pyx":62
 * 
 * @cython.cdivision(True)
 * cdef double _calculate_ratio(Py_ssize_t matches, Py_ssize_t length) except -1.0:             # <<<<<<<<<<<<<<
 *     if length:
 *         return 2.0 * matches / length
 */

static double __pyx_f_9cydifflib__calculate_ratio(Py_ssize_t __pyx_v_matches, Py_ssize_t __pyx_v_length) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_calculate_ratio", 0);

  /* "cydifflib.pyx":63
 * @cython.cdivision(True)
 * cdef double _calculate_ratio(Py_ssize_t matches, Py_ssize_t length) except -1.0:
 *     if length:             # <<<<<<<<<<<<<<
 *         return 2.0 * matches / length
 *     return 1.0
 */
  __pyx_t_1 = (__pyx_v_length != 0);
  if (__pyx_t_1) {

    /* "cydifflib.pyx":64
 * cdef double _calculate_ratio(Py_ssize_t matches, Py_ssize_t length) except -1.0:
 *     if length:
 *         return 2.0 * matches / length             # <<<<<<<<<<<<<<
 *     return 1.0
 * 
 */
    __pyx_r = ((2.0 * __pyx_v_matches) / ((double)__pyx_v_length));
    goto __pyx_L0;

    /* "cydifflib.pyx":63
 * @cython.cdivision(True)
 * cdef double _calculate_ratio(Py_ssize_t matches, Py_ssize_t length) except -1.0:
 *     if length:             # <<<<<<<<<<<<<<
 *         return 2.0 * matches / length
 *     return 1.0
 */
  }

  /* "cydifflib.pyx":65
 *     if length:
 *         return 2.0 * matches / length
 *     return 1.0             # <<<<<<<<<<<<<<
 * 
 * ctypedef struct MatchingBlockQueueElem:
 */
  __pyx_r = 1.0;
  goto __pyx_L0;

  /* "cydifflib.pyx":62
 * 
 * @cython.cdivision(True)
 * cdef double _calculate_ratio(Py_ssize_t matches, Py_ssize_t length) except -1.0:             # <<<<<<<<<<<<<<
 *     if length:
 *         return 2.0 * matches / length
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":78
 *     Py_ssize_t size
 * 
 * cdef int CMatch_sorter(const CMatch& lhs, const CMatch& rhs):             # <<<<<<<<<<<<<<
 *     if lhs.a != rhs.a:
 *         return lhs.a < rhs.a
 */

static int __pyx_f_9cydifflib_CMatch_sorter(__pyx_t_9cydifflib_CMatch const &__pyx_v_lhs, __pyx_t_9cydifflib_CMatch const &__pyx_v_rhs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("CMatch_sorter", 0);

  /* "cydifflib.pyx":79
 * 
 * cdef int CMatch_sorter(const CMatch& lhs, const CMatch& rhs):
 *     if lhs.a != rhs.a:             # <<<<<<<<<<<<<<
 *         return lhs.a < rhs.a
 *     if lhs.b != rhs.b:
 */
  __pyx_t_1 = ((__pyx_v_lhs.a != __pyx_v_rhs.a) != 0);
  if (__pyx_t_1) {

    /* "cydifflib.pyx":80
 * cdef int CMatch_sorter(const CMatch& lhs, const CMatch& rhs):
 *     if lhs.a != rhs.a:
 *         return lhs.a < rhs.a             # <<<<<<<<<<<<<<
 *     if lhs.b != rhs.b:
 *         return lhs.b < rhs.b
 */
    __pyx_r = (__pyx_v_lhs.a < __pyx_v_rhs.a);
    goto __pyx_L0;

    /* "cydifflib.pyx":79
 * 
 * cdef int CMatch_sorter(const CMatch& lhs, const CMatch& rhs):
 *     if lhs.a != rhs.a:             # <<<<<<<<<<<<<<
 *         return lhs.a < rhs.a
 *     if lhs.b != rhs.b:
 */
  }

  /* "cydifflib.pyx":81
 *     if lhs.a != rhs.a:
 *         return lhs.a < rhs.a
 *     if lhs.b != rhs.b:             # <<<<<<<<<<<<<<
 *         return lhs.b < rhs.b
 *     return lhs.size < rhs.size
 */
  __pyx_t_1 = ((__pyx_v_lhs.b != __pyx_v_rhs.b) != 0);
  if (__pyx_t_1) {

    /* "cydifflib.pyx":82
 *         return lhs.a < rhs.a
 *     if lhs.b != rhs.b:
 *         return lhs.b < rhs.b             # <<<<<<<<<<<<<<
 *     return lhs.size < rhs.size
 * 
 */
    __pyx_r = (__pyx_v_lhs.b < __pyx_v_rhs.b);
    goto __pyx_L0;

    /* "cydifflib.pyx":81
 *     if lhs.a != rhs.a:
 *         return lhs.a < rhs.a
 *     if lhs.b != rhs.b:             # <<<<<<<<<<<<<<
 *         return lhs.b < rhs.b
 *     return lhs.size < rhs.size
 */
  }

  /* "cydifflib.pyx":83
 *     if lhs.b != rhs.b:
 *         return lhs.b < rhs.b
 *     return lhs.size < rhs.size             # <<<<<<<<<<<<<<
 * 
 * cdef class SequenceMatcher:
 */
  __pyx_r = (__pyx_v_lhs.size < __pyx_v_rhs.size);
  goto __pyx_L0;

  /* "cydifflib.pyx":78
 *     Py_ssize_t size
 * 
 * cdef int CMatch_sorter(const CMatch& lhs, const CMatch& rhs):             # <<<<<<<<<<<<<<
 *     if lhs.a != rhs.a:
 *         return lhs.a < rhs.a
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":210
 *     cdef Py_ssize_t lb
 * 
 *     def __init__(self, isjunk=None, a='', b='', autojunk=True):             # <<<<<<<<<<<<<<
 *         """Construct a SequenceMatcher.
 * 
 */

/* Python wrapper */
static int __pyx_pw_9cydifflib_15SequenceMatcher_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher___init__, "Construct a SequenceMatcher.\n\n        Optional arg isjunk is None (the default), or a one-argument\n        function that takes a sequence element and returns true iff the\n        element is junk.  None is equivalent to passing \"lambda x: 0\", i.e.\n        no elements are considered to be junk.  For example, pass\n            lambda x: x in \" \\t\"\n        if you're comparing lines as sequences of characters, and don't\n        want to synch up on blanks or hard tabs.\n\n        Optional arg a is the first of two sequences to be compared.  By\n        default, an empty string.  The elements of a must be hashable.  See\n        also .set_seqs() and .set_seq1().\n\n        Optional arg b is the second of two sequences to be compared.  By\n        default, an empty string.  The elements of b must be hashable. See\n        also .set_seqs() and .set_seq2().\n\n        Optional arg autojunk should be set to False to disable the\n        \"automatic junk heuristic\" that treats popular elements as junk\n        (see module documentation for more information).\n        ");
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9cydifflib_15SequenceMatcher___init__;
#endif
static int __pyx_pw_9cydifflib_15SequenceMatcher_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_isjunk = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_autojunk = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isjunk,&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_autojunk,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isjunk,&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_autojunk,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_kp_s_);
    values[2] = ((PyObject *)__pyx_kp_s_);
    values[3] = ((PyObject *)Py_True);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_isjunk);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_autojunk);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 210, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_isjunk = values[0];
    __pyx_v_a = values[1];
    __pyx_v_b = values[2];
    __pyx_v_autojunk = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 4, __pyx_nargs); __PYX_ERR(0, 210, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher___init__(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self), __pyx_v_isjunk, __pyx_v_a, __pyx_v_b, __pyx_v_autojunk);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9cydifflib_15SequenceMatcher___init__(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_isjunk, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_autojunk) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cydifflib.pyx":269
 *         #      nonjunk items in b treated as junk by the heuristic (if used).
 * 
 *         self.isjunk = isjunk             # <<<<<<<<<<<<<<
 *         self.a = self.b = None
 *         self.autojunk = autojunk
 */
  __Pyx_INCREF(__pyx_v_isjunk);
  __Pyx_GIVEREF(__pyx_v_isjunk);
  __Pyx_GOTREF(__pyx_v_self->isjunk);
  __Pyx_DECREF(__pyx_v_self->isjunk);
  __pyx_v_self->isjunk = __pyx_v_isjunk;

  /* "cydifflib.pyx":270
 * 
 *         self.isjunk = isjunk
 *         self.a = self.b = None             # <<<<<<<<<<<<<<
 *         self.autojunk = autojunk
 *         self.set_seqs(a, b)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->a);
  __Pyx_DECREF(__pyx_v_self->a);
  __pyx_v_self->a = Py_None;
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->b);
  __Pyx_DECREF(__pyx_v_self->b);
  __pyx_v_self->b = Py_None;

  /* "cydifflib.pyx":271
 *         self.isjunk = isjunk
 *         self.a = self.b = None
 *         self.autojunk = autojunk             # <<<<<<<<<<<<<<
 *         self.set_seqs(a, b)
 * 
 */
  __Pyx_INCREF(__pyx_v_autojunk);
  __Pyx_GIVEREF(__pyx_v_autojunk);
  __Pyx_GOTREF(__pyx_v_self->autojunk);
  __Pyx_DECREF(__pyx_v_self->autojunk);
  __pyx_v_self->autojunk = __pyx_v_autojunk;

  /* "cydifflib.pyx":272
 *         self.a = self.b = None
 *         self.autojunk = autojunk
 *         self.set_seqs(a, b)             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_seqs(self, a, b):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_v_self->__pyx_vtab)->set_seqs(__pyx_v_self, __pyx_v_a, __pyx_v_b, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":210
 *     cdef Py_ssize_t lb
 * 
 *     def __init__(self, isjunk=None, a='', b='', autojunk=True):             # <<<<<<<<<<<<<<
 *         """Construct a SequenceMatcher.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":274
 *         self.set_seqs(a, b)
 * 
 *     cpdef set_seqs(self, a, b):             # <<<<<<<<<<<<<<
 *         """Set the two sequences to be compared.
 * 
 */

static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_3set_seqs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_9cydifflib_15SequenceMatcher_set_seqs(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_seqs", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_seqs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9cydifflib_15SequenceMatcher_3set_seqs)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_a, __pyx_v_b};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cydifflib.pyx":283
 *         """
 * 
 *         self.set_seq1(a)             # <<<<<<<<<<<<<<
 *         self.set_seq2(b)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_v_self->__pyx_vtab)->set_seq1(__pyx_v_self, __pyx_v_a, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":284
 * 
 *         self.set_seq1(a)
 *         self.set_seq2(b)             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_seq1(self, a):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_v_self->__pyx_vtab)->set_seq2(__pyx_v_self, __pyx_v_b, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":274
 *         self.set_seqs(a, b)
 * 
 *     cpdef set_seqs(self, a, b):             # <<<<<<<<<<<<<<
 *         """Set the two sequences to be compared.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.set_seqs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_3set_seqs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_2set_seqs, "Set the two sequences to be compared.\n\n        >>> s = SequenceMatcher()\n        >>> s.set_seqs(\"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_3set_seqs = {"set_seqs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_3set_seqs, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_2set_seqs};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_3set_seqs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_seqs (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_seqs", 1, 2, 2, 1); __PYX_ERR(0, 274, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_seqs") < 0)) __PYX_ERR(0, 274, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_seqs", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 274, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.set_seqs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_2set_seqs(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_2set_seqs(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_seqs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9cydifflib_15SequenceMatcher_set_seqs(__pyx_v_self, __pyx_v_a, __pyx_v_b, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.set_seqs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":286
 *         self.set_seq2(b)
 * 
 *     cpdef set_seq1(self, a):             # <<<<<<<<<<<<<<
 *         """Set the first sequence to be compared.
 * 
 */

static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_5set_seq1(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_9cydifflib_15SequenceMatcher_set_seq1(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_a, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_seq1", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_seq1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9cydifflib_15SequenceMatcher_5set_seq1)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_a};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cydifflib.pyx":307
 *         """
 *         cdef Py_ssize_t i
 *         if a is self.a:             # <<<<<<<<<<<<<<
 *             return
 *         self.a = a
 */
  __pyx_t_6 = (__pyx_v_a == __pyx_v_self->a);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "cydifflib.pyx":308
 *         cdef Py_ssize_t i
 *         if a is self.a:
 *             return             # <<<<<<<<<<<<<<
 *         self.a = a
 *         self.matching_blocks = self.opcodes = None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cydifflib.pyx":307
 *         """
 *         cdef Py_ssize_t i
 *         if a is self.a:             # <<<<<<<<<<<<<<
 *             return
 *         self.a = a
 */
  }

  /* "cydifflib.pyx":309
 *         if a is self.a:
 *             return
 *         self.a = a             # <<<<<<<<<<<<<<
 *         self.matching_blocks = self.opcodes = None
 *         self.la = len(a)
 */
  __Pyx_INCREF(__pyx_v_a);
  __Pyx_GIVEREF(__pyx_v_a);
  __Pyx_GOTREF(__pyx_v_self->a);
  __Pyx_DECREF(__pyx_v_self->a);
  __pyx_v_self->a = __pyx_v_a;

  /* "cydifflib.pyx":310
 *             return
 *         self.a = a
 *         self.matching_blocks = self.opcodes = None             # <<<<<<<<<<<<<<
 *         self.la = len(a)
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->matching_blocks);
  __Pyx_DECREF(__pyx_v_self->matching_blocks);
  __pyx_v_self->matching_blocks = ((PyObject*)Py_None);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->opcodes);
  __Pyx_DECREF(__pyx_v_self->opcodes);
  __pyx_v_self->opcodes = ((PyObject*)Py_None);

  /* "cydifflib.pyx":311
 *         self.a = a
 *         self.matching_blocks = self.opcodes = None
 *         self.la = len(a)             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_seq2(self, b):
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_v_self->la = __pyx_t_8;

  /* "cydifflib.pyx":286
 *         self.set_seq2(b)
 * 
 *     cpdef set_seq1(self, a):             # <<<<<<<<<<<<<<
 *         """Set the first sequence to be compared.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.set_seq1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_5set_seq1(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_4set_seq1, "Set the first sequence to be compared.\n\n        The second sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, \"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq1(\"bcde\")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq2().\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_5set_seq1 = {"set_seq1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_5set_seq1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_4set_seq1};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_5set_seq1(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_a = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_seq1 (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_seq1") < 0)) __PYX_ERR(0, 286, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_a = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_seq1", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 286, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.set_seq1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_4set_seq1(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self), __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_4set_seq1(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_seq1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9cydifflib_15SequenceMatcher_set_seq1(__pyx_v_self, __pyx_v_a, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.set_seq1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":313
 *         self.la = len(a)
 * 
 *     cpdef set_seq2(self, b):             # <<<<<<<<<<<<<<
 *         """Set the second sequence to be compared.
 * 
 */

static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_7set_seq2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_9cydifflib_15SequenceMatcher_set_seq2(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_b, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_seq2", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_seq2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9cydifflib_15SequenceMatcher_7set_seq2)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_b};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cydifflib.pyx":335
 *         cdef Py_ssize_t i
 * 
 *         if b is self.b:             # <<<<<<<<<<<<<<
 *             return
 *         self.b = b
 */
  __pyx_t_6 = (__pyx_v_b == __pyx_v_self->b);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "cydifflib.pyx":336
 * 
 *         if b is self.b:
 *             return             # <<<<<<<<<<<<<<
 *         self.b = b
 *         self.j2len_.resize(<size_t>len(b))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cydifflib.pyx":335
 *         cdef Py_ssize_t i
 * 
 *         if b is self.b:             # <<<<<<<<<<<<<<
 *             return
 *         self.b = b
 */
  }

  /* "cydifflib.pyx":337
 *         if b is self.b:
 *             return
 *         self.b = b             # <<<<<<<<<<<<<<
 *         self.j2len_.resize(<size_t>len(b))
 *         self.matching_blocks = self.opcodes = None
 */
  __Pyx_INCREF(__pyx_v_b);
  __Pyx_GIVEREF(__pyx_v_b);
  __Pyx_GOTREF(__pyx_v_self->b);
  __Pyx_DECREF(__pyx_v_self->b);
  __pyx_v_self->b = __pyx_v_b;

  /* "cydifflib.pyx":338
 *             return
 *         self.b = b
 *         self.j2len_.resize(<size_t>len(b))             # <<<<<<<<<<<<<<
 *         self.matching_blocks = self.opcodes = None
 *         self.fullbcount = None
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_b); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 338, __pyx_L1_error)
  try {
    __pyx_v_self->j2len_.resize(((size_t)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 338, __pyx_L1_error)
  }

  /* "cydifflib.pyx":339
 *         self.b = b
 *         self.j2len_.resize(<size_t>len(b))
 *         self.matching_blocks = self.opcodes = None             # <<<<<<<<<<<<<<
 *         self.fullbcount = None
 *         self.lb = len(b)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->matching_blocks);
  __Pyx_DECREF(__pyx_v_self->matching_blocks);
  __pyx_v_self->matching_blocks = ((PyObject*)Py_None);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->opcodes);
  __Pyx_DECREF(__pyx_v_self->opcodes);
  __pyx_v_self->opcodes = ((PyObject*)Py_None);

  /* "cydifflib.pyx":340
 *         self.j2len_.resize(<size_t>len(b))
 *         self.matching_blocks = self.opcodes = None
 *         self.fullbcount = None             # <<<<<<<<<<<<<<
 *         self.lb = len(b)
 *         self.__chain_b()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fullbcount);
  __Pyx_DECREF(__pyx_v_self->fullbcount);
  __pyx_v_self->fullbcount = ((PyObject*)Py_None);

  /* "cydifflib.pyx":341
 *         self.matching_blocks = self.opcodes = None
 *         self.fullbcount = None
 *         self.lb = len(b)             # <<<<<<<<<<<<<<
 *         self.__chain_b()
 * 
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_b); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 341, __pyx_L1_error)
  __pyx_v_self->lb = __pyx_t_8;

  /* "cydifflib.pyx":342
 *         self.fullbcount = None
 *         self.lb = len(b)
 *         self.__chain_b()             # <<<<<<<<<<<<<<
 * 
 *     # For each element x in b, set b2j[x] to a list of the indices in
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_v_self->__pyx_vtab)->_SequenceMatcher__chain_b(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":313
 *         self.la = len(a)
 * 
 *     cpdef set_seq2(self, b):             # <<<<<<<<<<<<<<
 *         """Set the second sequence to be compared.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.set_seq2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_7set_seq2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_6set_seq2, "Set the second sequence to be compared.\n\n        The first sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, \"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq2(\"abcd\")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq1().\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_7set_seq2 = {"set_seq2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_7set_seq2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_6set_seq2};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_7set_seq2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_b = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_seq2 (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_b,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_b,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_seq2") < 0)) __PYX_ERR(0, 313, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_b = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_seq2", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 313, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.set_seq2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_6set_seq2(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self), __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_6set_seq2(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_seq2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9cydifflib_15SequenceMatcher_set_seq2(__pyx_v_self, __pyx_v_b, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.set_seq2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":360
 *     # repeatedly
 * 
 *     cdef __chain_b(self):             # <<<<<<<<<<<<<<
 *         # Because isjunk is a user-defined (not C) function, and we test
 *         # for junk a LOT, it's important to minimize the number of calls.
 */

static PyObject *__pyx_f_9cydifflib_15SequenceMatcher__SequenceMatcher__chain_b(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_b2j = NULL;
  PyObject *__pyx_v_elt = NULL;
  PyObject *__pyx_v_indices = NULL;
  PyObject *__pyx_v_junk = NULL;
  PyObject *__pyx_v_isjunk = NULL;
  PyObject *__pyx_v_popular = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_ntest = NULL;
  PyObject *__pyx_v_idxs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_SequenceMatcher__chain_b", 0);

  /* "cydifflib.pyx":372
 *         # from the start.
 *         cdef Py_ssize_t i
 *         b = self.b             # <<<<<<<<<<<<<<
 *         self.b2j = b2j = {}
 * 
 */
  __pyx_t_1 = __pyx_v_self->b;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_b = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":373
 *         cdef Py_ssize_t i
 *         b = self.b
 *         self.b2j = b2j = {}             # <<<<<<<<<<<<<<
 * 
 *         for i, elt in enumerate(b):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->b2j);
  __Pyx_DECREF(__pyx_v_self->b2j);
  __pyx_v_self->b2j = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_b2j = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":375
 *         self.b2j = b2j = {}
 * 
 *         for i, elt in enumerate(b):             # <<<<<<<<<<<<<<
 *             indices = b2j.setdefault(elt, [])
 *             indices.append(i)
 */
  __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_v_b)) || PyTuple_CheckExact(__pyx_v_b)) {
    __pyx_t_1 = __pyx_v_b; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 375, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 375, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 375, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 375, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_elt, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_i = __pyx_t_2;
    __pyx_t_2 = (__pyx_t_2 + 1);

    /* "cydifflib.pyx":376
 * 
 *         for i, elt in enumerate(b):
 *             indices = b2j.setdefault(elt, [])             # <<<<<<<<<<<<<<
 *             indices.append(i)
 * 
 */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyDict_SetDefault(__pyx_v_b2j, __pyx_v_elt, __pyx_t_5, -1L); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_indices, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cydifflib.pyx":377
 *         for i, elt in enumerate(b):
 *             indices = b2j.setdefault(elt, [])
 *             indices.append(i)             # <<<<<<<<<<<<<<
 * 
 *         # Purge junk elements
 */
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_Append(__pyx_v_indices, __pyx_t_6); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "cydifflib.pyx":375
 *         self.b2j = b2j = {}
 * 
 *         for i, elt in enumerate(b):             # <<<<<<<<<<<<<<
 *             indices = b2j.setdefault(elt, [])
 *             indices.append(i)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":380
 * 
 *         # Purge junk elements
 *         self.bjunk = junk = set()             # <<<<<<<<<<<<<<
 *         isjunk = self.isjunk
 *         if isjunk:
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->bjunk);
  __Pyx_DECREF(__pyx_v_self->bjunk);
  __pyx_v_self->bjunk = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_junk = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":381
 *         # Purge junk elements
 *         self.bjunk = junk = set()
 *         isjunk = self.isjunk             # <<<<<<<<<<<<<<
 *         if isjunk:
 *             for elt in b2j.keys():
 */
  __pyx_t_1 = __pyx_v_self->isjunk;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_isjunk = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":382
 *         self.bjunk = junk = set()
 *         isjunk = self.isjunk
 *         if isjunk:             # <<<<<<<<<<<<<<
 *             for elt in b2j.keys():
 *                 if isjunk(elt):
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_isjunk); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "cydifflib.pyx":383
 *         isjunk = self.isjunk
 *         if isjunk:
 *             for elt in b2j.keys():             # <<<<<<<<<<<<<<
 *                 if isjunk(elt):
 *                     junk.add(elt)
 */
    __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_b2j, 1, __pyx_n_s_keys, (&__pyx_t_3), (&__pyx_t_9)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_6, NULL, NULL, __pyx_t_9);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_elt, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":384
 *         if isjunk:
 *             for elt in b2j.keys():
 *                 if isjunk(elt):             # <<<<<<<<<<<<<<
 *                     junk.add(elt)
 *             for elt in junk: # separate loop avoids separate list of keys
 */
      __Pyx_INCREF(__pyx_v_isjunk);
      __pyx_t_5 = __pyx_v_isjunk; __pyx_t_11 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_10 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_v_elt};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 384, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_8) {

        /* "cydifflib.pyx":385
 *             for elt in b2j.keys():
 *                 if isjunk(elt):
 *                     junk.add(elt)             # <<<<<<<<<<<<<<
 *             for elt in junk: # separate loop avoids separate list of keys
 *                 del b2j[elt]
 */
        __pyx_t_7 = PySet_Add(__pyx_v_junk, __pyx_v_elt); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 385, __pyx_L1_error)

        /* "cydifflib.pyx":384
 *         if isjunk:
 *             for elt in b2j.keys():
 *                 if isjunk(elt):             # <<<<<<<<<<<<<<
 *                     junk.add(elt)
 *             for elt in junk: # separate loop avoids separate list of keys
 */
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cydifflib.pyx":386
 *                 if isjunk(elt):
 *                     junk.add(elt)
 *             for elt in junk: # separate loop avoids separate list of keys             # <<<<<<<<<<<<<<
 *                 del b2j[elt]
 * 
 */
    __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_set_iterator(__pyx_v_junk, 1, (&__pyx_t_2), (&__pyx_t_9)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_2, &__pyx_t_3, &__pyx_t_6, __pyx_t_9);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_elt, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":387
 *                     junk.add(elt)
 *             for elt in junk: # separate loop avoids separate list of keys
 *                 del b2j[elt]             # <<<<<<<<<<<<<<
 * 
 *         # Purge popular elements that are not junk
 */
      if (unlikely((PyDict_DelItem(__pyx_v_b2j, __pyx_v_elt) < 0))) __PYX_ERR(0, 387, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cydifflib.pyx":382
 *         self.bjunk = junk = set()
 *         isjunk = self.isjunk
 *         if isjunk:             # <<<<<<<<<<<<<<
 *             for elt in b2j.keys():
 *                 if isjunk(elt):
 */
  }

  /* "cydifflib.pyx":390
 * 
 *         # Purge popular elements that are not junk
 *         self.bpopular = popular = set()             # <<<<<<<<<<<<<<
 *         n = len(b)
 *         if self.autojunk and n >= 200:
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->bpopular);
  __Pyx_DECREF(__pyx_v_self->bpopular);
  __pyx_v_self->bpopular = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_popular = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":391
 *         # Purge popular elements that are not junk
 *         self.bpopular = popular = set()
 *         n = len(b)             # <<<<<<<<<<<<<<
 *         if self.autojunk and n >= 200:
 *             ntest = n // 100 + 1
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_b); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_n = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":392
 *         self.bpopular = popular = set()
 *         n = len(b)
 *         if self.autojunk and n >= 200:             # <<<<<<<<<<<<<<
 *             ntest = n // 100 + 1
 *             for elt, idxs in b2j.items():
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->autojunk); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 392, __pyx_L1_error)
  if (__pyx_t_12) {
  } else {
    __pyx_t_8 = __pyx_t_12;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_n, __pyx_int_200, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __pyx_t_12;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_8) {

    /* "cydifflib.pyx":393
 *         n = len(b)
 *         if self.autojunk and n >= 200:
 *             ntest = n // 100 + 1             # <<<<<<<<<<<<<<
 *             for elt, idxs in b2j.items():
 *                 if len(idxs) > ntest:
 */
    __pyx_t_1 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_n, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ntest = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "cydifflib.pyx":394
 *         if self.autojunk and n >= 200:
 *             ntest = n // 100 + 1
 *             for elt, idxs in b2j.items():             # <<<<<<<<<<<<<<
 *                 if len(idxs) > ntest:
 *                     popular.add(elt)
 */
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_b2j, 1, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_6, __pyx_t_3, &__pyx_t_2, &__pyx_t_1, &__pyx_t_5, NULL, __pyx_t_9);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 394, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_elt, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_idxs, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "cydifflib.pyx":395
 *             ntest = n // 100 + 1
 *             for elt, idxs in b2j.items():
 *                 if len(idxs) > ntest:             # <<<<<<<<<<<<<<
 *                     popular.add(elt)
 *             for elt in popular: # ditto; as fast for 1% deletion
 */
      __pyx_t_13 = PyObject_Length(__pyx_v_idxs); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 395, __pyx_L1_error)
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_v_ntest, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 395, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_8) {

        /* "cydifflib.pyx":396
 *             for elt, idxs in b2j.items():
 *                 if len(idxs) > ntest:
 *                     popular.add(elt)             # <<<<<<<<<<<<<<
 *             for elt in popular: # ditto; as fast for 1% deletion
 *                 del b2j[elt]
 */
        __pyx_t_7 = PySet_Add(__pyx_v_popular, __pyx_v_elt); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 396, __pyx_L1_error)

        /* "cydifflib.pyx":395
 *             ntest = n // 100 + 1
 *             for elt, idxs in b2j.items():
 *                 if len(idxs) > ntest:             # <<<<<<<<<<<<<<
 *                     popular.add(elt)
 *             for elt in popular: # ditto; as fast for 1% deletion
 */
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "cydifflib.pyx":397
 *                 if len(idxs) > ntest:
 *                     popular.add(elt)
 *             for elt in popular: # ditto; as fast for 1% deletion             # <<<<<<<<<<<<<<
 *                 del b2j[elt]
 * 
 */
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_set_iterator(__pyx_v_popular, 1, (&__pyx_t_2), (&__pyx_t_9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_set_iter_next(__pyx_t_6, __pyx_t_2, &__pyx_t_3, &__pyx_t_1, __pyx_t_9);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_elt, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":398
 *                     popular.add(elt)
 *             for elt in popular: # ditto; as fast for 1% deletion
 *                 del b2j[elt]             # <<<<<<<<<<<<<<
 * 
 *     cdef CMatch __find_longest_match(self, Py_ssize_t alo, Py_ssize_t ahi, Py_ssize_t blo, Py_ssize_t bhi) except *:
 */
      if (unlikely((PyDict_DelItem(__pyx_v_b2j, __pyx_v_elt) < 0))) __PYX_ERR(0, 398, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "cydifflib.pyx":392
 *         self.bpopular = popular = set()
 *         n = len(b)
 *         if self.autojunk and n >= 200:             # <<<<<<<<<<<<<<
 *             ntest = n // 100 + 1
 *             for elt, idxs in b2j.items():
 */
  }

  /* "cydifflib.pyx":360
 *     # repeatedly
 * 
 *     cdef __chain_b(self):             # <<<<<<<<<<<<<<
 *         # Because isjunk is a user-defined (not C) function, and we test
 *         # for junk a LOT, it's important to minimize the number of calls.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher._SequenceMatcher__chain_b", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_b2j);
  __Pyx_XDECREF(__pyx_v_elt);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XDECREF(__pyx_v_junk);
  __Pyx_XDECREF(__pyx_v_isjunk);
  __Pyx_XDECREF(__pyx_v_popular);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_ntest);
  __Pyx_XDECREF(__pyx_v_idxs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":400
 *                 del b2j[elt]
 * 
 *     cdef CMatch __find_longest_match(self, Py_ssize_t alo, Py_ssize_t ahi, Py_ssize_t blo, Py_ssize_t bhi) except *:             # <<<<<<<<<<<<<<
 *         cdef object a = self.a
 *         cdef object b = self.b
 */

static __pyx_t_9cydifflib_CMatch __pyx_f_9cydifflib_15SequenceMatcher__SequenceMatcher__find_longest_match(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, Py_ssize_t __pyx_v_alo, Py_ssize_t __pyx_v_ahi, Py_ssize_t __pyx_v_blo, Py_ssize_t __pyx_v_bhi) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_indexes = 0;
  Py_ssize_t __pyx_v_besti;
  Py_ssize_t __pyx_v_bestj;
  Py_ssize_t __pyx_v_bestsize;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_index_len;
  Py_ssize_t __pyx_v_pos;
  Py_ssize_t __pyx_v_next_val;
  PyObject *__pyx_v_b2j = NULL;
  PyObject *__pyx_v_isbjunk = NULL;
  PyObject *__pyx_v_isjunk = NULL;
  PyObject *__pyx_v_nothing = NULL;
  __pyx_t_9cydifflib_CMatch __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  std::vector<Py_ssize_t> ::size_type __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  __pyx_t_9cydifflib_CMatch __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_SequenceMatcher__find_longest_match", 0);

  /* "cydifflib.pyx":401
 * 
 *     cdef CMatch __find_longest_match(self, Py_ssize_t alo, Py_ssize_t ahi, Py_ssize_t blo, Py_ssize_t bhi) except *:
 *         cdef object a = self.a             # <<<<<<<<<<<<<<
 *         cdef object b = self.b
 *         cdef list indexes
 */
  __pyx_t_1 = __pyx_v_self->a;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_a = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":402
 *     cdef CMatch __find_longest_match(self, Py_ssize_t alo, Py_ssize_t ahi, Py_ssize_t blo, Py_ssize_t bhi) except *:
 *         cdef object a = self.a
 *         cdef object b = self.b             # <<<<<<<<<<<<<<
 *         cdef list indexes
 *         cdef Py_ssize_t besti, bestj, bestsize
 */
  __pyx_t_1 = __pyx_v_self->b;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_b = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":420
 *         # the unique 'b's and then matching the first two 'a's.
 * 
 *         b2j, isbjunk = self.b2j, self.bjunk.__contains__             # <<<<<<<<<<<<<<
 *         isjunk = self.isjunk
 *         besti, bestj, bestsize = alo, blo, 0
 */
  __pyx_t_1 = __pyx_v_self->b2j;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->bjunk, __pyx_n_s_contains); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_b2j = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_isbjunk = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":421
 * 
 *         b2j, isbjunk = self.b2j, self.bjunk.__contains__
 *         isjunk = self.isjunk             # <<<<<<<<<<<<<<
 *         besti, bestj, bestsize = alo, blo, 0
 *         # find longest junk-free match
 */
  __pyx_t_2 = __pyx_v_self->isjunk;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_isjunk = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":422
 *         b2j, isbjunk = self.b2j, self.bjunk.__contains__
 *         isjunk = self.isjunk
 *         besti, bestj, bestsize = alo, blo, 0             # <<<<<<<<<<<<<<
 *         # find longest junk-free match
 *         # during an iteration of the loop, j2len[j] = length of longest
 */
  __pyx_t_3 = __pyx_v_alo;
  __pyx_t_4 = __pyx_v_blo;
  __pyx_t_5 = 0;
  __pyx_v_besti = __pyx_t_3;
  __pyx_v_bestj = __pyx_t_4;
  __pyx_v_bestsize = __pyx_t_5;

  /* "cydifflib.pyx":426
 *         # during an iteration of the loop, j2len[j] = length of longest
 *         # junk-free match ending with a[i-1] and b[j]
 *         nothing = []             # <<<<<<<<<<<<<<
 *         for i in range(alo, ahi):
 *             # look at all instances of a[i] in b; note that because
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_nothing = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":427
 *         # junk-free match ending with a[i-1] and b[j]
 *         nothing = []
 *         for i in range(alo, ahi):             # <<<<<<<<<<<<<<
 *             # look at all instances of a[i] in b; note that because
 *             # b2j has no junk keys, the loop is skipped if a[i] is junk
 */
  __pyx_t_5 = __pyx_v_ahi;
  __pyx_t_4 = __pyx_t_5;
  for (__pyx_t_3 = __pyx_v_alo; __pyx_t_3 < __pyx_t_4; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cydifflib.pyx":430
 *             # look at all instances of a[i] in b; note that because
 *             # b2j has no junk keys, the loop is skipped if a[i] is junk
 *             indexes = <list>b2j.get(a[i], nothing)             # <<<<<<<<<<<<<<
 *             index_len = len(indexes)
 *             pos = 0
 */
    if (unlikely(__pyx_v_b2j == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
      __PYX_ERR(0, 430, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_a, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_b2j, __pyx_t_2, __pyx_v_nothing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_indexes, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":431
 *             # b2j has no junk keys, the loop is skipped if a[i] is junk
 *             indexes = <list>b2j.get(a[i], nothing)
 *             index_len = len(indexes)             # <<<<<<<<<<<<<<
 *             pos = 0
 *             next_val = 0
 */
    if (unlikely(__pyx_v_indexes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 431, __pyx_L1_error)
    }
    __pyx_t_6 = PyList_GET_SIZE(__pyx_v_indexes); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 431, __pyx_L1_error)
    __pyx_v_index_len = __pyx_t_6;

    /* "cydifflib.pyx":432
 *             indexes = <list>b2j.get(a[i], nothing)
 *             index_len = len(indexes)
 *             pos = 0             # <<<<<<<<<<<<<<
 *             next_val = 0
 *             while pos < index_len:
 */
    __pyx_v_pos = 0;

    /* "cydifflib.pyx":433
 *             index_len = len(indexes)
 *             pos = 0
 *             next_val = 0             # <<<<<<<<<<<<<<
 *             while pos < index_len:
 *                 j = indexes[pos]
 */
    __pyx_v_next_val = 0;

    /* "cydifflib.pyx":434
 *             pos = 0
 *             next_val = 0
 *             while pos < index_len:             # <<<<<<<<<<<<<<
 *                 j = indexes[pos]
 *                 if j < blo:
 */
    while (1) {
      __pyx_t_7 = ((__pyx_v_pos < __pyx_v_index_len) != 0);
      if (!__pyx_t_7) break;

      /* "cydifflib.pyx":435
 *             next_val = 0
 *             while pos < index_len:
 *                 j = indexes[pos]             # <<<<<<<<<<<<<<
 *                 if j < blo:
 *                     pos += 1
 */
      if (unlikely(__pyx_v_indexes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 435, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_indexes, __pyx_v_pos, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 435, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_j = __pyx_t_6;

      /* "cydifflib.pyx":436
 *             while pos < index_len:
 *                 j = indexes[pos]
 *                 if j < blo:             # <<<<<<<<<<<<<<
 *                     pos += 1
 *                     continue
 */
      __pyx_t_7 = ((__pyx_v_j < __pyx_v_blo) != 0);
      if (__pyx_t_7) {

        /* "cydifflib.pyx":437
 *                 j = indexes[pos]
 *                 if j < blo:
 *                     pos += 1             # <<<<<<<<<<<<<<
 *                     continue
 *                 next_val = self.j2len_[j]
 */
        __pyx_v_pos = (__pyx_v_pos + 1);

        /* "cydifflib.pyx":438
 *                 if j < blo:
 *                     pos += 1
 *                     continue             # <<<<<<<<<<<<<<
 *                 next_val = self.j2len_[j]
 *                 break
 */
        goto __pyx_L5_continue;

        /* "cydifflib.pyx":436
 *             while pos < index_len:
 *                 j = indexes[pos]
 *                 if j < blo:             # <<<<<<<<<<<<<<
 *                     pos += 1
 *                     continue
 */
      }

      /* "cydifflib.pyx":439
 *                     pos += 1
 *                     continue
 *                 next_val = self.j2len_[j]             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      __pyx_v_next_val = (__pyx_v_self->j2len_[__pyx_v_j]);

      /* "cydifflib.pyx":440
 *                     continue
 *                 next_val = self.j2len_[j]
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             while pos < index_len:
 */
      goto __pyx_L6_break;
      __pyx_L5_continue:;
    }
    __pyx_L6_break:;

    /* "cydifflib.pyx":442
 *                 break
 * 
 *             while pos < index_len:             # <<<<<<<<<<<<<<
 *                 j = indexes[pos]
 *                 if j >= bhi:
 */
    while (1) {
      __pyx_t_7 = ((__pyx_v_pos < __pyx_v_index_len) != 0);
      if (!__pyx_t_7) break;

      /* "cydifflib.pyx":443
 * 
 *             while pos < index_len:
 *                 j = indexes[pos]             # <<<<<<<<<<<<<<
 *                 if j >= bhi:
 *                     break
 */
      if (unlikely(__pyx_v_indexes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 443, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_indexes, __pyx_v_pos, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_j = __pyx_t_6;

      /* "cydifflib.pyx":444
 *             while pos < index_len:
 *                 j = indexes[pos]
 *                 if j >= bhi:             # <<<<<<<<<<<<<<
 *                     break
 *                 k = next_val + 1
 */
      __pyx_t_7 = ((__pyx_v_j >= __pyx_v_bhi) != 0);
      if (__pyx_t_7) {

        /* "cydifflib.pyx":445
 *                 j = indexes[pos]
 *                 if j >= bhi:
 *                     break             # <<<<<<<<<<<<<<
 *                 k = next_val + 1
 *                 if pos + 1 < index_len:
 */
        goto __pyx_L9_break;

        /* "cydifflib.pyx":444
 *             while pos < index_len:
 *                 j = indexes[pos]
 *                 if j >= bhi:             # <<<<<<<<<<<<<<
 *                     break
 *                 k = next_val + 1
 */
      }

      /* "cydifflib.pyx":446
 *                 if j >= bhi:
 *                     break
 *                 k = next_val + 1             # <<<<<<<<<<<<<<
 *                 if pos + 1 < index_len:
 *                     next_val = self.j2len_[indexes[pos + 1]]
 */
      __pyx_v_k = (__pyx_v_next_val + 1);

      /* "cydifflib.pyx":447
 *                     break
 *                 k = next_val + 1
 *                 if pos + 1 < index_len:             # <<<<<<<<<<<<<<
 *                     next_val = self.j2len_[indexes[pos + 1]]
 *                 self.j2len_[j + 1] = k
 */
      __pyx_t_7 = (((__pyx_v_pos + 1) < __pyx_v_index_len) != 0);
      if (__pyx_t_7) {

        /* "cydifflib.pyx":448
 *                 k = next_val + 1
 *                 if pos + 1 < index_len:
 *                     next_val = self.j2len_[indexes[pos + 1]]             # <<<<<<<<<<<<<<
 *                 self.j2len_[j + 1] = k
 *                 if k > bestsize:
 */
        if (unlikely(__pyx_v_indexes == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 448, __pyx_L1_error)
        }
        __pyx_t_6 = (__pyx_v_pos + 1);
        __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_indexes, __pyx_t_6, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 448, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_next_val = (__pyx_v_self->j2len_[__pyx_t_8]);

        /* "cydifflib.pyx":447
 *                     break
 *                 k = next_val + 1
 *                 if pos + 1 < index_len:             # <<<<<<<<<<<<<<
 *                     next_val = self.j2len_[indexes[pos + 1]]
 *                 self.j2len_[j + 1] = k
 */
      }

      /* "cydifflib.pyx":449
 *                 if pos + 1 < index_len:
 *                     next_val = self.j2len_[indexes[pos + 1]]
 *                 self.j2len_[j + 1] = k             # <<<<<<<<<<<<<<
 *                 if k > bestsize:
 *                     besti = i + k + 1
 */
      (__pyx_v_self->j2len_[(__pyx_v_j + 1)]) = __pyx_v_k;

      /* "cydifflib.pyx":450
 *                     next_val = self.j2len_[indexes[pos + 1]]
 *                 self.j2len_[j + 1] = k
 *                 if k > bestsize:             # <<<<<<<<<<<<<<
 *                     besti = i + k + 1
 *                     bestj = j - k + 1
 */
      __pyx_t_7 = ((__pyx_v_k > __pyx_v_bestsize) != 0);
      if (__pyx_t_7) {

        /* "cydifflib.pyx":451
 *                 self.j2len_[j + 1] = k
 *                 if k > bestsize:
 *                     besti = i + k + 1             # <<<<<<<<<<<<<<
 *                     bestj = j - k + 1
 *                     bestsize = k
 */
        __pyx_v_besti = ((__pyx_v_i + __pyx_v_k) + 1);

        /* "cydifflib.pyx":452
 *                 if k > bestsize:
 *                     besti = i + k + 1
 *                     bestj = j - k + 1             # <<<<<<<<<<<<<<
 *                     bestsize = k
 *                 pos += 1
 */
        __pyx_v_bestj = ((__pyx_v_j - __pyx_v_k) + 1);

        /* "cydifflib.pyx":453
 *                     besti = i + k + 1
 *                     bestj = j - k + 1
 *                     bestsize = k             # <<<<<<<<<<<<<<
 *                 pos += 1
 * 
 */
        __pyx_v_bestsize = __pyx_v_k;

        /* "cydifflib.pyx":450
 *                     next_val = self.j2len_[indexes[pos + 1]]
 *                 self.j2len_[j + 1] = k
 *                 if k > bestsize:             # <<<<<<<<<<<<<<
 *                     besti = i + k + 1
 *                     bestj = j - k + 1
 */
      }

      /* "cydifflib.pyx":454
 *                     bestj = j - k + 1
 *                     bestsize = k
 *                 pos += 1             # <<<<<<<<<<<<<<
 * 
 *         fill(self.j2len_.begin() + blo, self.j2len_.begin() + bhi, 0)
 */
      __pyx_v_pos = (__pyx_v_pos + 1);
    }
    __pyx_L9_break:;
  }

  /* "cydifflib.pyx":456
 *                 pos += 1
 * 
 *         fill(self.j2len_.begin() + blo, self.j2len_.begin() + bhi, 0)             # <<<<<<<<<<<<<<
 * 
 *         # Extend the best by non-junk elements on each end.  In particular,
 */
  try {
    std::fill<std::vector<Py_ssize_t> ::iterator,long>((__pyx_v_self->j2len_.begin() + __pyx_v_blo), (__pyx_v_self->j2len_.begin() + __pyx_v_bhi), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 456, __pyx_L1_error)
  }

  /* "cydifflib.pyx":462
 *         # the inner loop above, but also means "the best" match so far
 *         # doesn't contain any junk *or* popular non-junk elements.
 *         if self.autojunk and len(b) >= 200:             # <<<<<<<<<<<<<<
 *             while besti > alo and bestj > blo and \
 *                   (isjunk is None or not isbjunk(b[bestj-1])) and \
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_self->autojunk); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 462, __pyx_L1_error)
  if (__pyx_t_9) {
  } else {
    __pyx_t_7 = __pyx_t_9;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_5 = PyObject_Length(__pyx_v_b); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 462, __pyx_L1_error)
  __pyx_t_9 = ((__pyx_t_5 >= 0xC8) != 0);
  __pyx_t_7 = __pyx_t_9;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_7) {

    /* "cydifflib.pyx":463
 *         # doesn't contain any junk *or* popular non-junk elements.
 *         if self.autojunk and len(b) >= 200:
 *             while besti > alo and bestj > blo and \             # <<<<<<<<<<<<<<
 *                   (isjunk is None or not isbjunk(b[bestj-1])) and \
 *                   a[besti-1] == b[bestj-1]:
 */
    while (1) {
      __pyx_t_9 = ((__pyx_v_besti > __pyx_v_alo) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_7 = __pyx_t_9;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_9 = ((__pyx_v_bestj > __pyx_v_blo) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_7 = __pyx_t_9;
        goto __pyx_L18_bool_binop_done;
      }

      /* "cydifflib.pyx":464
 *         if self.autojunk and len(b) >= 200:
 *             while besti > alo and bestj > blo and \
 *                   (isjunk is None or not isbjunk(b[bestj-1])) and \             # <<<<<<<<<<<<<<
 *                   a[besti-1] == b[bestj-1]:
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1
 */
      __pyx_t_9 = (__pyx_v_isjunk == Py_None);
      __pyx_t_10 = (__pyx_t_9 != 0);
      if (!__pyx_t_10) {
      } else {
        goto __pyx_L21_next_and;
      }
      __pyx_t_5 = (__pyx_v_bestj - 1);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_b, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_isbjunk);
      __pyx_t_11 = __pyx_v_isbjunk; __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = ((!__pyx_t_10) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_7 = __pyx_t_9;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_L21_next_and:;

      /* "cydifflib.pyx":465
 *             while besti > alo and bestj > blo and \
 *                   (isjunk is None or not isbjunk(b[bestj-1])) and \
 *                   a[besti-1] == b[bestj-1]:             # <<<<<<<<<<<<<<
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \
 */
      __pyx_t_5 = (__pyx_v_besti - 1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_a, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = (__pyx_v_bestj - 1);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_b, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_11, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __pyx_t_9;
      __pyx_L18_bool_binop_done:;
      if (!__pyx_t_7) break;

      /* "cydifflib.pyx":466
 *                   (isjunk is None or not isbjunk(b[bestj-1])) and \
 *                   a[besti-1] == b[bestj-1]:
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1             # <<<<<<<<<<<<<<
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \
 *                   (isjunk is None or not isbjunk(b[bestj+bestsize])) and \
 */
      __pyx_t_5 = (__pyx_v_besti - 1);
      __pyx_t_4 = (__pyx_v_bestj - 1);
      __pyx_t_3 = (__pyx_v_bestsize + 1);
      __pyx_v_besti = __pyx_t_5;
      __pyx_v_bestj = __pyx_t_4;
      __pyx_v_bestsize = __pyx_t_3;
    }

    /* "cydifflib.pyx":467
 *                   a[besti-1] == b[bestj-1]:
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \             # <<<<<<<<<<<<<<
 *                   (isjunk is None or not isbjunk(b[bestj+bestsize])) and \
 *                   a[besti+bestsize] == b[bestj+bestsize]:
 */
    while (1) {
      __pyx_t_9 = (((__pyx_v_besti + __pyx_v_bestsize) < __pyx_v_ahi) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_7 = __pyx_t_9;
        goto __pyx_L25_bool_binop_done;
      }
      __pyx_t_9 = (((__pyx_v_bestj + __pyx_v_bestsize) < __pyx_v_bhi) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_7 = __pyx_t_9;
        goto __pyx_L25_bool_binop_done;
      }

      /* "cydifflib.pyx":468
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \
 *                   (isjunk is None or not isbjunk(b[bestj+bestsize])) and \             # <<<<<<<<<<<<<<
 *                   a[besti+bestsize] == b[bestj+bestsize]:
 *                 bestsize += 1
 */
      __pyx_t_9 = (__pyx_v_isjunk == Py_None);
      __pyx_t_10 = (__pyx_t_9 != 0);
      if (!__pyx_t_10) {
      } else {
        goto __pyx_L28_next_and;
      }
      __pyx_t_3 = (__pyx_v_bestj + __pyx_v_bestsize);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_b, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_v_isbjunk);
      __pyx_t_2 = __pyx_v_isbjunk; __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = ((!__pyx_t_10) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_7 = __pyx_t_9;
        goto __pyx_L25_bool_binop_done;
      }
      __pyx_L28_next_and:;

      /* "cydifflib.pyx":469
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \
 *                   (isjunk is None or not isbjunk(b[bestj+bestsize])) and \
 *                   a[besti+bestsize] == b[bestj+bestsize]:             # <<<<<<<<<<<<<<
 *                 bestsize += 1
 * 
 */
      __pyx_t_3 = (__pyx_v_besti + __pyx_v_bestsize);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_a, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = (__pyx_v_bestj + __pyx_v_bestsize);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_b, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_7 = __pyx_t_9;
      __pyx_L25_bool_binop_done:;
      if (!__pyx_t_7) break;

      /* "cydifflib.pyx":470
 *                   (isjunk is None or not isbjunk(b[bestj+bestsize])) and \
 *                   a[besti+bestsize] == b[bestj+bestsize]:
 *                 bestsize += 1             # <<<<<<<<<<<<<<
 * 
 *         # Now that we have a wholly interesting match (albeit possibly
 */
      __pyx_v_bestsize = (__pyx_v_bestsize + 1);
    }

    /* "cydifflib.pyx":462
 *         # the inner loop above, but also means "the best" match so far
 *         # doesn't contain any junk *or* popular non-junk elements.
 *         if self.autojunk and len(b) >= 200:             # <<<<<<<<<<<<<<
 *             while besti > alo and bestj > blo and \
 *                   (isjunk is None or not isbjunk(b[bestj-1])) and \
 */
  }

  /* "cydifflib.pyx":479
 *         # interesting match, this is clearly the right thing to do,
 *         # because no other kind of match is possible in the regions.
 *         if isjunk is not None:             # <<<<<<<<<<<<<<
 *             while besti > alo and bestj > blo and \
 *                   isbjunk(b[bestj-1]) and \
 */
  __pyx_t_7 = (__pyx_v_isjunk != Py_None);
  __pyx_t_9 = (__pyx_t_7 != 0);
  if (__pyx_t_9) {

    /* "cydifflib.pyx":480
 *         # because no other kind of match is possible in the regions.
 *         if isjunk is not None:
 *             while besti > alo and bestj > blo and \             # <<<<<<<<<<<<<<
 *                   isbjunk(b[bestj-1]) and \
 *                   a[besti-1] == b[bestj-1]:
 */
    while (1) {
      __pyx_t_7 = ((__pyx_v_besti > __pyx_v_alo) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_9 = __pyx_t_7;
        goto __pyx_L33_bool_binop_done;
      }
      __pyx_t_7 = ((__pyx_v_bestj > __pyx_v_blo) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_9 = __pyx_t_7;
        goto __pyx_L33_bool_binop_done;
      }

      /* "cydifflib.pyx":481
 *         if isjunk is not None:
 *             while besti > alo and bestj > blo and \
 *                   isbjunk(b[bestj-1]) and \             # <<<<<<<<<<<<<<
 *                   a[besti-1] == b[bestj-1]:
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1
 */
      __pyx_t_3 = (__pyx_v_bestj - 1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_b, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 481, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_isbjunk);
      __pyx_t_1 = __pyx_v_isbjunk; __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_2};
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 481, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_7) {
      } else {
        __pyx_t_9 = __pyx_t_7;
        goto __pyx_L33_bool_binop_done;
      }

      /* "cydifflib.pyx":482
 *             while besti > alo and bestj > blo and \
 *                   isbjunk(b[bestj-1]) and \
 *                   a[besti-1] == b[bestj-1]:             # <<<<<<<<<<<<<<
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \
 */
      __pyx_t_3 = (__pyx_v_besti - 1);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_a, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = (__pyx_v_bestj - 1);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_b, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_11, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 482, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __pyx_t_7;
      __pyx_L33_bool_binop_done:;
      if (!__pyx_t_9) break;

      /* "cydifflib.pyx":483
 *                   isbjunk(b[bestj-1]) and \
 *                   a[besti-1] == b[bestj-1]:
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1             # <<<<<<<<<<<<<<
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \
 *                   isbjunk(b[bestj+bestsize]) and \
 */
      __pyx_t_3 = (__pyx_v_besti - 1);
      __pyx_t_4 = (__pyx_v_bestj - 1);
      __pyx_t_5 = (__pyx_v_bestsize + 1);
      __pyx_v_besti = __pyx_t_3;
      __pyx_v_bestj = __pyx_t_4;
      __pyx_v_bestsize = __pyx_t_5;
    }

    /* "cydifflib.pyx":484
 *                   a[besti-1] == b[bestj-1]:
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \             # <<<<<<<<<<<<<<
 *                   isbjunk(b[bestj+bestsize]) and \
 *                   a[besti+bestsize] == b[bestj+bestsize]:
 */
    while (1) {
      __pyx_t_7 = (((__pyx_v_besti + __pyx_v_bestsize) < __pyx_v_ahi) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_9 = __pyx_t_7;
        goto __pyx_L39_bool_binop_done;
      }
      __pyx_t_7 = (((__pyx_v_bestj + __pyx_v_bestsize) < __pyx_v_bhi) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_9 = __pyx_t_7;
        goto __pyx_L39_bool_binop_done;
      }

      /* "cydifflib.pyx":485
 *                 besti, bestj, bestsize = besti-1, bestj-1, bestsize+1
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \
 *                   isbjunk(b[bestj+bestsize]) and \             # <<<<<<<<<<<<<<
 *                   a[besti+bestsize] == b[bestj+bestsize]:
 *                 bestsize = bestsize + 1
 */
      __pyx_t_5 = (__pyx_v_bestj + __pyx_v_bestsize);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_b, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_isbjunk);
      __pyx_t_11 = __pyx_v_isbjunk; __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 485, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_7) {
      } else {
        __pyx_t_9 = __pyx_t_7;
        goto __pyx_L39_bool_binop_done;
      }

      /* "cydifflib.pyx":486
 *             while besti+bestsize < ahi and bestj+bestsize < bhi and \
 *                   isbjunk(b[bestj+bestsize]) and \
 *                   a[besti+bestsize] == b[bestj+bestsize]:             # <<<<<<<<<<<<<<
 *                 bestsize = bestsize + 1
 * 
 */
      __pyx_t_5 = (__pyx_v_besti + __pyx_v_bestsize);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_a, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = (__pyx_v_bestj + __pyx_v_bestsize);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_b, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_11, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = __pyx_t_7;
      __pyx_L39_bool_binop_done:;
      if (!__pyx_t_9) break;

      /* "cydifflib.pyx":487
 *                   isbjunk(b[bestj+bestsize]) and \
 *                   a[besti+bestsize] == b[bestj+bestsize]:
 *                 bestsize = bestsize + 1             # <<<<<<<<<<<<<<
 * 
 *         return CMatch(besti, bestj, bestsize)
 */
      __pyx_v_bestsize = (__pyx_v_bestsize + 1);
    }

    /* "cydifflib.pyx":479
 *         # interesting match, this is clearly the right thing to do,
 *         # because no other kind of match is possible in the regions.
 *         if isjunk is not None:             # <<<<<<<<<<<<<<
 *             while besti > alo and bestj > blo and \
 *                   isbjunk(b[bestj-1]) and \
 */
  }

  /* "cydifflib.pyx":489
 *                 bestsize = bestsize + 1
 * 
 *         return CMatch(besti, bestj, bestsize)             # <<<<<<<<<<<<<<
 * 
 *     def find_longest_match(self, alo=0, ahi=None, blo=0, bhi=None):
 */
  __pyx_t_14.a = __pyx_v_besti;
  __pyx_t_14.b = __pyx_v_bestj;
  __pyx_t_14.size = __pyx_v_bestsize;
  __pyx_r = __pyx_t_14;
  goto __pyx_L0;

  /* "cydifflib.pyx":400
 *                 del b2j[elt]
 * 
 *     cdef CMatch __find_longest_match(self, Py_ssize_t alo, Py_ssize_t ahi, Py_ssize_t blo, Py_ssize_t bhi) except *:             # <<<<<<<<<<<<<<
 *         cdef object a = self.a
 *         cdef object b = self.b
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher._SequenceMatcher__find_longest_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_indexes);
  __Pyx_XDECREF(__pyx_v_b2j);
  __Pyx_XDECREF(__pyx_v_isbjunk);
  __Pyx_XDECREF(__pyx_v_isjunk);
  __Pyx_XDECREF(__pyx_v_nothing);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":491
 *         return CMatch(besti, bestj, bestsize)
 * 
 *     def find_longest_match(self, alo=0, ahi=None, blo=0, bhi=None):             # <<<<<<<<<<<<<<
 *         """Find longest matching block in a[alo:ahi] and b[blo:bhi].
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_9find_longest_match(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_8find_longest_match, "Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n        By default it will find the longest match in the entirety of a and b.\n\n        If isjunk is not defined:\n\n        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where\n            alo <= i <= i+k <= ahi\n            blo <= j <= j+k <= bhi\n        and for all (i',j',k') meeting those conditions,\n            k >= k'\n            i <= i'\n            and if i == i', j <= j'\n\n        In other words, of all maximal matching blocks, return one that\n        starts earliest in a, and of all those maximal matching blocks that\n        start earliest in a, return the one that starts earliest in b.\n\n        >>> s = SequenceMatcher(None, \" abcd\", \"abcd abcd\")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=0, b=4, size=5)\n\n        If isjunk is defined, first the longest matching block is\n        determined as above, but with the additional restriction that no\n        junk element appears in the block.  Then that block is extended as\n        far as possible by matching (only) junk elements on both sides.  So\n        the resulting block never matches on junk except as identical junk\n        happens to be adjacent to an \"interesting\" match.\n\n        Here's the same example as before, but considering blanks to be\n        junk.  That prevents \" abcd\" from matching the \" abcd\" at the tail\n        end of the second sequence directly.  Instead only the \"abcd\" can\n        match, and matches the leftmost \"abcd\" in the second sequence:\n\n        >>> s = SequenceMatcher(lambda x: x==\" \", \" abcd\", \"abcd abcd\")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=1, b=0, size=4)\n\n        If no blocks match, return (alo, blo, 0).\n\n        >>> s = SequenceMatcher(None, \"ab\", \"c\")\n        >>> s.find_longest_match(0, 2, 0, 1)\n        Match(a=0, b=0, size=0)\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_9find_longest_match = {"find_longest_match", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_9find_longest_match, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_8find_longest_match};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_9find_longest_match(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_alo = 0;
  PyObject *__pyx_v_ahi = 0;
  PyObject *__pyx_v_blo = 0;
  PyObject *__pyx_v_bhi = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_longest_match (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alo,&__pyx_n_s_ahi,&__pyx_n_s_blo,&__pyx_n_s_bhi,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alo,&__pyx_n_s_ahi,&__pyx_n_s_blo,&__pyx_n_s_bhi,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_int_0);
    values[3] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alo);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ahi);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_blo);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bhi);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "find_longest_match") < 0)) __PYX_ERR(0, 491, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_alo = values[0];
    __pyx_v_ahi = values[1];
    __pyx_v_blo = values[2];
    __pyx_v_bhi = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_longest_match", 0, 0, 4, __pyx_nargs); __PYX_ERR(0, 491, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.find_longest_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_8find_longest_match(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self), __pyx_v_alo, __pyx_v_ahi, __pyx_v_blo, __pyx_v_bhi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_8find_longest_match(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_alo, PyObject *__pyx_v_ahi, PyObject *__pyx_v_blo, PyObject *__pyx_v_bhi) {
  Py_ssize_t __pyx_v_ahi_;
  Py_ssize_t __pyx_v_bhi_;
  __pyx_t_9cydifflib_CMatch __pyx_v_match;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_9cydifflib_CMatch __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_longest_match", 0);

  /* "cydifflib.pyx":536
 *         Match(a=0, b=0, size=0)
 *         """
 *         cdef Py_ssize_t ahi_ = ahi if ahi is not None else len(self.a)             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t bhi_ = bhi if bhi is not None else len(self.b)
 *         match = self.__find_longest_match(alo, ahi_, blo, bhi_)
 */
  __pyx_t_2 = (__pyx_v_ahi != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ahi); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 536, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_v_self->a;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
  }
  __pyx_v_ahi_ = __pyx_t_1;

  /* "cydifflib.pyx":537
 *         """
 *         cdef Py_ssize_t ahi_ = ahi if ahi is not None else len(self.a)
 *         cdef Py_ssize_t bhi_ = bhi if bhi is not None else len(self.b)             # <<<<<<<<<<<<<<
 *         match = self.__find_longest_match(alo, ahi_, blo, bhi_)
 * 
 */
  __pyx_t_2 = (__pyx_v_bhi != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_bhi); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_v_self->b;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
  }
  __pyx_v_bhi_ = __pyx_t_1;

  /* "cydifflib.pyx":538
 *         cdef Py_ssize_t ahi_ = ahi if ahi is not None else len(self.a)
 *         cdef Py_ssize_t bhi_ = bhi if bhi is not None else len(self.b)
 *         match = self.__find_longest_match(alo, ahi_, blo, bhi_)             # <<<<<<<<<<<<<<
 * 
 *         return Match(match.a, match.b, match.size)
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_alo); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_blo); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_v_self->__pyx_vtab)->_SequenceMatcher__find_longest_match(__pyx_v_self, __pyx_t_1, __pyx_v_ahi_, __pyx_t_3, __pyx_v_bhi_); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
  __pyx_v_match = __pyx_t_5;

  /* "cydifflib.pyx":540
 *         match = self.__find_longest_match(alo, ahi_, blo, bhi_)
 * 
 *         return Match(match.a, match.b, match.size)             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_matching_blocks(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Match); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_match.a); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyInt_FromSsize_t(__pyx_v_match.b); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_match.size); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_11 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_10, __pyx_t_7, __pyx_t_8, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_11, 3+__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":491
 *         return CMatch(besti, bestj, bestsize)
 * 
 *     def find_longest_match(self, alo=0, ahi=None, blo=0, bhi=None):             # <<<<<<<<<<<<<<
 *         """Find longest matching block in a[alo:ahi] and b[blo:bhi].
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.find_longest_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":542
 *         return Match(match.a, match.b, match.size)
 * 
 *     cpdef get_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """Return list of triples describing matching subsequences.
 * 
 */

static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_11get_matching_blocks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_9cydifflib_15SequenceMatcher_get_matching_blocks(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_i1;
  Py_ssize_t __pyx_v_j1;
  Py_ssize_t __pyx_v_k1;
  Py_ssize_t __pyx_v_i2;
  Py_ssize_t __pyx_v_j2;
  Py_ssize_t __pyx_v_k2;
  Py_ssize_t __pyx_v_alo;
  Py_ssize_t __pyx_v_ahi;
  Py_ssize_t __pyx_v_blo;
  Py_ssize_t __pyx_v_bhi;
  std::vector<__pyx_t_9cydifflib_MatchingBlockQueueElem>  __pyx_v_queue;
  std::vector<__pyx_t_9cydifflib_CMatch>  __pyx_v_matching_blocks_pass1;
  __pyx_t_9cydifflib_MatchingBlockQueueElem __pyx_v_elem;
  __pyx_t_9cydifflib_CMatch __pyx_v_match;
  PyObject *__pyx_v_non_adjacent = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __pyx_t_9cydifflib_MatchingBlockQueueElem __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __pyx_t_9cydifflib_CMatch __pyx_t_10;
  std::vector<__pyx_t_9cydifflib_CMatch> ::iterator __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_matching_blocks", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_matching_blocks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9cydifflib_15SequenceMatcher_11get_matching_blocks)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cydifflib.pyx":566
 *         cdef vector[CMatch] matching_blocks_pass1
 * 
 *         if self.matching_blocks is not None:             # <<<<<<<<<<<<<<
 *             return self.matching_blocks
 * 
 */
  __pyx_t_6 = (__pyx_v_self->matching_blocks != ((PyObject*)Py_None));
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "cydifflib.pyx":567
 * 
 *         if self.matching_blocks is not None:
 *             return self.matching_blocks             # <<<<<<<<<<<<<<
 * 
 *         # This is most naturally expressed as a recursive algorithm, but
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->matching_blocks);
    __pyx_r = __pyx_v_self->matching_blocks;
    goto __pyx_L0;

    /* "cydifflib.pyx":566
 *         cdef vector[CMatch] matching_blocks_pass1
 * 
 *         if self.matching_blocks is not None:             # <<<<<<<<<<<<<<
 *             return self.matching_blocks
 * 
 */
  }

  /* "cydifflib.pyx":575
 *         # results to `matching_blocks` in a loop; the matches are sorted
 *         # at the end.
 *         queue.push_back(MatchingBlockQueueElem(0, self.la, 0, self.lb))             # <<<<<<<<<<<<<<
 *         while not queue.empty():
 *             elem = queue.back()
 */
  __pyx_t_8.alo = 0;
  __pyx_t_8.ahi = __pyx_v_self->la;
  __pyx_t_8.blo = 0;
  __pyx_t_8.bhi = __pyx_v_self->lb;
  try {
    __pyx_v_queue.push_back(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 575, __pyx_L1_error)
  }

  /* "cydifflib.pyx":576
 *         # at the end.
 *         queue.push_back(MatchingBlockQueueElem(0, self.la, 0, self.lb))
 *         while not queue.empty():             # <<<<<<<<<<<<<<
 *             elem = queue.back()
 *             alo = elem.alo
 */
  while (1) {
    __pyx_t_7 = ((!(__pyx_v_queue.empty() != 0)) != 0);
    if (!__pyx_t_7) break;

    /* "cydifflib.pyx":577
 *         queue.push_back(MatchingBlockQueueElem(0, self.la, 0, self.lb))
 *         while not queue.empty():
 *             elem = queue.back()             # <<<<<<<<<<<<<<
 *             alo = elem.alo
 *             ahi = elem.ahi
 */
    __pyx_v_elem = __pyx_v_queue.back();

    /* "cydifflib.pyx":578
 *         while not queue.empty():
 *             elem = queue.back()
 *             alo = elem.alo             # <<<<<<<<<<<<<<
 *             ahi = elem.ahi
 *             blo = elem.blo
 */
    __pyx_t_9 = __pyx_v_elem.alo;
    __pyx_v_alo = __pyx_t_9;

    /* "cydifflib.pyx":579
 *             elem = queue.back()
 *             alo = elem.alo
 *             ahi = elem.ahi             # <<<<<<<<<<<<<<
 *             blo = elem.blo
 *             bhi = elem.bhi
 */
    __pyx_t_9 = __pyx_v_elem.ahi;
    __pyx_v_ahi = __pyx_t_9;

    /* "cydifflib.pyx":580
 *             alo = elem.alo
 *             ahi = elem.ahi
 *             blo = elem.blo             # <<<<<<<<<<<<<<
 *             bhi = elem.bhi
 *             queue.pop_back()
 */
    __pyx_t_9 = __pyx_v_elem.blo;
    __pyx_v_blo = __pyx_t_9;

    /* "cydifflib.pyx":581
 *             ahi = elem.ahi
 *             blo = elem.blo
 *             bhi = elem.bhi             # <<<<<<<<<<<<<<
 *             queue.pop_back()
 *             match = self.__find_longest_match(alo, ahi, blo, bhi)
 */
    __pyx_t_9 = __pyx_v_elem.bhi;
    __pyx_v_bhi = __pyx_t_9;

    /* "cydifflib.pyx":582
 *             blo = elem.blo
 *             bhi = elem.bhi
 *             queue.pop_back()             # <<<<<<<<<<<<<<
 *             match = self.__find_longest_match(alo, ahi, blo, bhi)
 *             # a[alo:i] vs b[blo:j] unknown
 */
    __pyx_v_queue.pop_back();

    /* "cydifflib.pyx":583
 *             bhi = elem.bhi
 *             queue.pop_back()
 *             match = self.__find_longest_match(alo, ahi, blo, bhi)             # <<<<<<<<<<<<<<
 *             # a[alo:i] vs b[blo:j] unknown
 *             # a[i:i+k] same as b[j:j+k]
 */
    __pyx_t_10 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_v_self->__pyx_vtab)->_SequenceMatcher__find_longest_match(__pyx_v_self, __pyx_v_alo, __pyx_v_ahi, __pyx_v_blo, __pyx_v_bhi); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 583, __pyx_L1_error)
    __pyx_v_match = __pyx_t_10;

    /* "cydifflib.pyx":587
 *             # a[i:i+k] same as b[j:j+k]
 *             # a[i+k:ahi] vs b[j+k:bhi] unknown
 *             if match.size:   # if k is 0, there was no matching block             # <<<<<<<<<<<<<<
 *                 matching_blocks_pass1.push_back(match)
 *                 if alo < match.a and blo < match.b:
 */
    __pyx_t_7 = (__pyx_v_match.size != 0);
    if (__pyx_t_7) {

      /* "cydifflib.pyx":588
 *             # a[i+k:ahi] vs b[j+k:bhi] unknown
 *             if match.size:   # if k is 0, there was no matching block
 *                 matching_blocks_pass1.push_back(match)             # <<<<<<<<<<<<<<
 *                 if alo < match.a and blo < match.b:
 *                     queue.push_back(MatchingBlockQueueElem(alo, match.a, blo, match.b))
 */
      try {
        __pyx_v_matching_blocks_pass1.push_back(__pyx_v_match);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 588, __pyx_L1_error)
      }

      /* "cydifflib.pyx":589
 *             if match.size:   # if k is 0, there was no matching block
 *                 matching_blocks_pass1.push_back(match)
 *                 if alo < match.a and blo < match.b:             # <<<<<<<<<<<<<<
 *                     queue.push_back(MatchingBlockQueueElem(alo, match.a, blo, match.b))
 *                 if match.a+match.size < ahi and match.b+match.size < bhi:
 */
      __pyx_t_6 = ((__pyx_v_alo < __pyx_v_match.a) != 0);
      if (__pyx_t_6) {
      } else {
        __pyx_t_7 = __pyx_t_6;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_6 = ((__pyx_v_blo < __pyx_v_match.b) != 0);
      __pyx_t_7 = __pyx_t_6;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_7) {

        /* "cydifflib.pyx":590
 *                 matching_blocks_pass1.push_back(match)
 *                 if alo < match.a and blo < match.b:
 *                     queue.push_back(MatchingBlockQueueElem(alo, match.a, blo, match.b))             # <<<<<<<<<<<<<<
 *                 if match.a+match.size < ahi and match.b+match.size < bhi:
 *                     queue.push_back(MatchingBlockQueueElem(match.a+match.size, ahi, match.b+match.size, bhi))
 */
        __pyx_t_8.alo = __pyx_v_alo;
        __pyx_t_8.ahi = __pyx_v_match.a;
        __pyx_t_8.blo = __pyx_v_blo;
        __pyx_t_8.bhi = __pyx_v_match.b;
        try {
          __pyx_v_queue.push_back(__pyx_t_8);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 590, __pyx_L1_error)
        }

        /* "cydifflib.pyx":589
 *             if match.size:   # if k is 0, there was no matching block
 *                 matching_blocks_pass1.push_back(match)
 *                 if alo < match.a and blo < match.b:             # <<<<<<<<<<<<<<
 *                     queue.push_back(MatchingBlockQueueElem(alo, match.a, blo, match.b))
 *                 if match.a+match.size < ahi and match.b+match.size < bhi:
 */
      }

      /* "cydifflib.pyx":591
 *                 if alo < match.a and blo < match.b:
 *                     queue.push_back(MatchingBlockQueueElem(alo, match.a, blo, match.b))
 *                 if match.a+match.size < ahi and match.b+match.size < bhi:             # <<<<<<<<<<<<<<
 *                     queue.push_back(MatchingBlockQueueElem(match.a+match.size, ahi, match.b+match.size, bhi))
 *         cpp_sort(matching_blocks_pass1.begin(), matching_blocks_pass1.end(), &CMatch_sorter)
 */
      __pyx_t_6 = (((__pyx_v_match.a + __pyx_v_match.size) < __pyx_v_ahi) != 0);
      if (__pyx_t_6) {
      } else {
        __pyx_t_7 = __pyx_t_6;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_6 = (((__pyx_v_match.b + __pyx_v_match.size) < __pyx_v_bhi) != 0);
      __pyx_t_7 = __pyx_t_6;
      __pyx_L11_bool_binop_done:;
      if (__pyx_t_7) {

        /* "cydifflib.pyx":592
 *                     queue.push_back(MatchingBlockQueueElem(alo, match.a, blo, match.b))
 *                 if match.a+match.size < ahi and match.b+match.size < bhi:
 *                     queue.push_back(MatchingBlockQueueElem(match.a+match.size, ahi, match.b+match.size, bhi))             # <<<<<<<<<<<<<<
 *         cpp_sort(matching_blocks_pass1.begin(), matching_blocks_pass1.end(), &CMatch_sorter)
 * 
 */
        __pyx_t_8.alo = (__pyx_v_match.a + __pyx_v_match.size);
        __pyx_t_8.ahi = __pyx_v_ahi;
        __pyx_t_8.blo = (__pyx_v_match.b + __pyx_v_match.size);
        __pyx_t_8.bhi = __pyx_v_bhi;
        try {
          __pyx_v_queue.push_back(__pyx_t_8);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 592, __pyx_L1_error)
        }

        /* "cydifflib.pyx":591
 *                 if alo < match.a and blo < match.b:
 *                     queue.push_back(MatchingBlockQueueElem(alo, match.a, blo, match.b))
 *                 if match.a+match.size < ahi and match.b+match.size < bhi:             # <<<<<<<<<<<<<<
 *                     queue.push_back(MatchingBlockQueueElem(match.a+match.size, ahi, match.b+match.size, bhi))
 *         cpp_sort(matching_blocks_pass1.begin(), matching_blocks_pass1.end(), &CMatch_sorter)
 */
      }

      /* "cydifflib.pyx":587
 *             # a[i:i+k] same as b[j:j+k]
 *             # a[i+k:ahi] vs b[j+k:bhi] unknown
 *             if match.size:   # if k is 0, there was no matching block             # <<<<<<<<<<<<<<
 *                 matching_blocks_pass1.push_back(match)
 *                 if alo < match.a and blo < match.b:
 */
    }
  }

  /* "cydifflib.pyx":593
 *                 if match.a+match.size < ahi and match.b+match.size < bhi:
 *                     queue.push_back(MatchingBlockQueueElem(match.a+match.size, ahi, match.b+match.size, bhi))
 *         cpp_sort(matching_blocks_pass1.begin(), matching_blocks_pass1.end(), &CMatch_sorter)             # <<<<<<<<<<<<<<
 * 
 *         # It's possible that we have adjacent equal blocks in the
 */
  try {
    std::sort<std::vector<__pyx_t_9cydifflib_CMatch> ::iterator,int (*)(__pyx_t_9cydifflib_CMatch const &, __pyx_t_9cydifflib_CMatch const &)>(__pyx_v_matching_blocks_pass1.begin(), __pyx_v_matching_blocks_pass1.end(), (&__pyx_f_9cydifflib_CMatch_sorter));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 593, __pyx_L1_error)
  }

  /* "cydifflib.pyx":598
 *         # matching_blocks list now.  Starting with 2.5, this code was added
 *         # to collapse them.
 *         i1 = j1 = k1 = 0             # <<<<<<<<<<<<<<
 *         non_adjacent = []
 *         for match in matching_blocks_pass1:
 */
  __pyx_v_i1 = 0;
  __pyx_v_j1 = 0;
  __pyx_v_k1 = 0;

  /* "cydifflib.pyx":599
 *         # to collapse them.
 *         i1 = j1 = k1 = 0
 *         non_adjacent = []             # <<<<<<<<<<<<<<
 *         for match in matching_blocks_pass1:
 *             i2 = match.a
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_non_adjacent = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":600
 *         i1 = j1 = k1 = 0
 *         non_adjacent = []
 *         for match in matching_blocks_pass1:             # <<<<<<<<<<<<<<
 *             i2 = match.a
 *             j2 = match.b
 */
  __pyx_t_11 = __pyx_v_matching_blocks_pass1.begin();
  for (;;) {
    if (!(__pyx_t_11 != __pyx_v_matching_blocks_pass1.end())) break;
    __pyx_t_10 = *__pyx_t_11;
    ++__pyx_t_11;
    __pyx_v_match = __pyx_t_10;

    /* "cydifflib.pyx":601
 *         non_adjacent = []
 *         for match in matching_blocks_pass1:
 *             i2 = match.a             # <<<<<<<<<<<<<<
 *             j2 = match.b
 *             k2 = match.size
 */
    __pyx_t_9 = __pyx_v_match.a;
    __pyx_v_i2 = __pyx_t_9;

    /* "cydifflib.pyx":602
 *         for match in matching_blocks_pass1:
 *             i2 = match.a
 *             j2 = match.b             # <<<<<<<<<<<<<<
 *             k2 = match.size
 *             #for i2, j2, k2 in matching_blocks:
 */
    __pyx_t_9 = __pyx_v_match.b;
    __pyx_v_j2 = __pyx_t_9;

    /* "cydifflib.pyx":603
 *             i2 = match.a
 *             j2 = match.b
 *             k2 = match.size             # <<<<<<<<<<<<<<
 *             #for i2, j2, k2 in matching_blocks:
 *             # Is this block adjacent to i1, j1, k1?
 */
    __pyx_t_9 = __pyx_v_match.size;
    __pyx_v_k2 = __pyx_t_9;

    /* "cydifflib.pyx":606
 *             #for i2, j2, k2 in matching_blocks:
 *             # Is this block adjacent to i1, j1, k1?
 *             if i1 + k1 == i2 and j1 + k1 == j2:             # <<<<<<<<<<<<<<
 *                 # Yes, so collapse them -- this just increases the length of
 *                 # the first block by the length of the second, and the first
 */
    __pyx_t_6 = (((__pyx_v_i1 + __pyx_v_k1) == __pyx_v_i2) != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_6 = (((__pyx_v_j1 + __pyx_v_k1) == __pyx_v_j2) != 0);
    __pyx_t_7 = __pyx_t_6;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_7) {

      /* "cydifflib.pyx":610
 *                 # the first block by the length of the second, and the first
 *                 # block so lengthened remains the block to compare against.
 *                 k1 += k2             # <<<<<<<<<<<<<<
 *             else:
 *                 # Not adjacent.  Remember the first block (k1==0 means it's
 */
      __pyx_v_k1 = (__pyx_v_k1 + __pyx_v_k2);

      /* "cydifflib.pyx":606
 *             #for i2, j2, k2 in matching_blocks:
 *             # Is this block adjacent to i1, j1, k1?
 *             if i1 + k1 == i2 and j1 + k1 == j2:             # <<<<<<<<<<<<<<
 *                 # Yes, so collapse them -- this just increases the length of
 *                 # the first block by the length of the second, and the first
 */
      goto __pyx_L15;
    }

    /* "cydifflib.pyx":615
 *                 # the dummy we started with), and make the second block the
 *                 # new block to compare against.
 *                 if k1:             # <<<<<<<<<<<<<<
 *                     non_adjacent.append(Match(i1, j1, k1))
 *                 i1, j1, k1 = i2, j2, k2
 */
    /*else*/ {
      __pyx_t_7 = (__pyx_v_k1 != 0);
      if (__pyx_t_7) {

        /* "cydifflib.pyx":616
 *                 # new block to compare against.
 *                 if k1:
 *                     non_adjacent.append(Match(i1, j1, k1))             # <<<<<<<<<<<<<<
 *                 i1, j1, k1 = i2, j2, k2
 *         if k1:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Match); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_i1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_j1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = PyInt_FromSsize_t(__pyx_v_k1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_13, __pyx_t_3, __pyx_t_4, __pyx_t_12};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_non_adjacent, __pyx_t_1); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "cydifflib.pyx":615
 *                 # the dummy we started with), and make the second block the
 *                 # new block to compare against.
 *                 if k1:             # <<<<<<<<<<<<<<
 *                     non_adjacent.append(Match(i1, j1, k1))
 *                 i1, j1, k1 = i2, j2, k2
 */
      }

      /* "cydifflib.pyx":617
 *                 if k1:
 *                     non_adjacent.append(Match(i1, j1, k1))
 *                 i1, j1, k1 = i2, j2, k2             # <<<<<<<<<<<<<<
 *         if k1:
 *             non_adjacent.append(Match(i1, j1, k1))
 */
      __pyx_t_9 = __pyx_v_i2;
      __pyx_t_15 = __pyx_v_j2;
      __pyx_t_16 = __pyx_v_k2;
      __pyx_v_i1 = __pyx_t_9;
      __pyx_v_j1 = __pyx_t_15;
      __pyx_v_k1 = __pyx_t_16;
    }
    __pyx_L15:;

    /* "cydifflib.pyx":600
 *         i1 = j1 = k1 = 0
 *         non_adjacent = []
 *         for match in matching_blocks_pass1:             # <<<<<<<<<<<<<<
 *             i2 = match.a
 *             j2 = match.b
 */
  }

  /* "cydifflib.pyx":618
 *                     non_adjacent.append(Match(i1, j1, k1))
 *                 i1, j1, k1 = i2, j2, k2
 *         if k1:             # <<<<<<<<<<<<<<
 *             non_adjacent.append(Match(i1, j1, k1))
 * 
 */
  __pyx_t_7 = (__pyx_v_k1 != 0);
  if (__pyx_t_7) {

    /* "cydifflib.pyx":619
 *                 i1, j1, k1 = i2, j2, k2
 *         if k1:
 *             non_adjacent.append(Match(i1, j1, k1))             # <<<<<<<<<<<<<<
 * 
 *         non_adjacent.append(Match(self.la, self.lb, 0))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Match); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = PyInt_FromSsize_t(__pyx_v_i1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_j1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_k1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_13, __pyx_t_12, __pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 619, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_non_adjacent, __pyx_t_1); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cydifflib.pyx":618
 *                     non_adjacent.append(Match(i1, j1, k1))
 *                 i1, j1, k1 = i2, j2, k2
 *         if k1:             # <<<<<<<<<<<<<<
 *             non_adjacent.append(Match(i1, j1, k1))
 * 
 */
  }

  /* "cydifflib.pyx":621
 *             non_adjacent.append(Match(i1, j1, k1))
 * 
 *         non_adjacent.append(Match(self.la, self.lb, 0))             # <<<<<<<<<<<<<<
 *         self.matching_blocks = non_adjacent
 *         return self.matching_blocks
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Match); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_self->la); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_self->lb); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_12, __pyx_t_3, __pyx_t_4, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_non_adjacent, __pyx_t_1); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":622
 * 
 *         non_adjacent.append(Match(self.la, self.lb, 0))
 *         self.matching_blocks = non_adjacent             # <<<<<<<<<<<<<<
 *         return self.matching_blocks
 * 
 */
  __Pyx_INCREF(__pyx_v_non_adjacent);
  __Pyx_GIVEREF(__pyx_v_non_adjacent);
  __Pyx_GOTREF(__pyx_v_self->matching_blocks);
  __Pyx_DECREF(__pyx_v_self->matching_blocks);
  __pyx_v_self->matching_blocks = __pyx_v_non_adjacent;

  /* "cydifflib.pyx":623
 *         non_adjacent.append(Match(self.la, self.lb, 0))
 *         self.matching_blocks = non_adjacent
 *         return self.matching_blocks             # <<<<<<<<<<<<<<
 * 
 *     def get_opcodes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->matching_blocks);
  __pyx_r = __pyx_v_self->matching_blocks;
  goto __pyx_L0;

  /* "cydifflib.pyx":542
 *         return Match(match.a, match.b, match.size)
 * 
 *     cpdef get_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """Return list of triples describing matching subsequences.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.get_matching_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_non_adjacent);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_11get_matching_blocks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_10get_matching_blocks, "Return list of triples describing matching subsequences.\n\n        Each triple is of the form (i, j, n), and means that\n        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in\n        i and in j.  New in Python 2.5, it's also guaranteed that if\n        (i, j, n) and (i', j', n') are adjacent triples in the list, and\n        the second is not the last triple in the list, then i+n != i' or\n        j+n != j'.  IOW, adjacent triples never describe adjacent equal\n        blocks.\n\n        The last triple is a dummy, (len(a), len(b), 0), and is the only\n        triple with n==0.\n\n        >>> s = SequenceMatcher(None, \"abxcd\", \"abcd\")\n        >>> list(s.get_matching_blocks())\n        [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_11get_matching_blocks = {"get_matching_blocks", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_11get_matching_blocks, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_10get_matching_blocks};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_11get_matching_blocks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_matching_blocks (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_matching_blocks", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_matching_blocks", 0))) return NULL;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_10get_matching_blocks(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_10get_matching_blocks(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_matching_blocks", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9cydifflib_15SequenceMatcher_get_matching_blocks(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.get_matching_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":625
 *         return self.matching_blocks
 * 
 *     def get_opcodes(self):             # <<<<<<<<<<<<<<
 *         """Return list of 5-tuples describing how to turn a into b.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_13get_opcodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_12get_opcodes, "Return list of 5-tuples describing how to turn a into b.\n\n        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple\n        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the\n        tuple preceding it, and likewise for j1 == the previous j2.\n\n        The tags are strings, with these meanings:\n\n        'replace':  a[i1:i2] should be replaced by b[j1:j2]\n        'delete':   a[i1:i2] should be deleted.\n                    Note that j1==j2 in this case.\n        'insert':   b[j1:j2] should be inserted at a[i1:i1].\n                    Note that i1==i2 in this case.\n        'equal':    a[i1:i2] == b[j1:j2]\n\n        >>> a = \"qabxcd\"\n        >>> b = \"abycdf\"\n        >>> s = SequenceMatcher(None, a, b)\n        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():\n        ...    print((\"%7s a[%d:%d] (%s) b[%d:%d] (%s)\" %\n        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2])))\n         delete a[0:1] (q) b[0:0] ()\n          equal a[1:3] (ab) b[0:2] (ab)\n        replace a[3:4] (x) b[2:3] (y)\n          equal a[4:6] (cd) b[3:5] (cd)\n         insert a[6:6] () b[5:6] (f)\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_13get_opcodes = {"get_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_13get_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_12get_opcodes};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_13get_opcodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_opcodes (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_opcodes", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_opcodes", 0))) return NULL;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_12get_opcodes(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_12get_opcodes(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_answer = NULL;
  PyObject *__pyx_v_ai = NULL;
  PyObject *__pyx_v_bj = NULL;
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_v_tag = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_opcodes", 0);

  /* "cydifflib.pyx":654
 *         """
 * 
 *         if self.opcodes is not None:             # <<<<<<<<<<<<<<
 *             return self.opcodes
 *         i = j = 0
 */
  __pyx_t_1 = (__pyx_v_self->opcodes != ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cydifflib.pyx":655
 * 
 *         if self.opcodes is not None:
 *             return self.opcodes             # <<<<<<<<<<<<<<
 *         i = j = 0
 *         self.opcodes = answer = []
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->opcodes);
    __pyx_r = __pyx_v_self->opcodes;
    goto __pyx_L0;

    /* "cydifflib.pyx":654
 *         """
 * 
 *         if self.opcodes is not None:             # <<<<<<<<<<<<<<
 *             return self.opcodes
 *         i = j = 0
 */
  }

  /* "cydifflib.pyx":656
 *         if self.opcodes is not None:
 *             return self.opcodes
 *         i = j = 0             # <<<<<<<<<<<<<<
 *         self.opcodes = answer = []
 *         for ai, bj, size in self.get_matching_blocks():
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_i = __pyx_int_0;
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_j = __pyx_int_0;

  /* "cydifflib.pyx":657
 *             return self.opcodes
 *         i = j = 0
 *         self.opcodes = answer = []             # <<<<<<<<<<<<<<
 *         for ai, bj, size in self.get_matching_blocks():
 *             # invariant:  we've pumped out correct diffs to change
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->opcodes);
  __Pyx_DECREF(__pyx_v_self->opcodes);
  __pyx_v_self->opcodes = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_answer = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cydifflib.pyx":658
 *         i = j = 0
 *         self.opcodes = answer = []
 *         for ai, bj, size in self.get_matching_blocks():             # <<<<<<<<<<<<<<
 *             # invariant:  we've pumped out correct diffs to change
 *             # a[:i] into b[:j], and the next matching block is
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_v_self->__pyx_vtab)->get_matching_blocks(__pyx_v_self, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 658, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 658, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      index = 0; __pyx_t_7 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_8 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      index = 2; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 3) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 658, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_ai, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_bj, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_size, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "cydifflib.pyx":664
 *             # out a diff to change a[i:ai] into b[j:bj], pump out
 *             # the matching block, and move (i,j) beyond the match
 *             tag = ''             # <<<<<<<<<<<<<<
 *             if i < ai and j < bj:
 *                 tag = 'replace'
 */
    __Pyx_INCREF(__pyx_kp_s_);
    __Pyx_XDECREF_SET(__pyx_v_tag, __pyx_kp_s_);

    /* "cydifflib.pyx":665
 *             # the matching block, and move (i,j) beyond the match
 *             tag = ''
 *             if i < ai and j < bj:             # <<<<<<<<<<<<<<
 *                 tag = 'replace'
 *             elif i < ai:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_i, __pyx_v_ai, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_j, __pyx_v_bj, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cydifflib.pyx":666
 *             tag = ''
 *             if i < ai and j < bj:
 *                 tag = 'replace'             # <<<<<<<<<<<<<<
 *             elif i < ai:
 *                 tag = 'delete'
 */
      __Pyx_INCREF(__pyx_n_s_replace);
      __Pyx_DECREF_SET(__pyx_v_tag, __pyx_n_s_replace);

      /* "cydifflib.pyx":665
 *             # the matching block, and move (i,j) beyond the match
 *             tag = ''
 *             if i < ai and j < bj:             # <<<<<<<<<<<<<<
 *                 tag = 'replace'
 *             elif i < ai:
 */
      goto __pyx_L8;
    }

    /* "cydifflib.pyx":667
 *             if i < ai and j < bj:
 *                 tag = 'replace'
 *             elif i < ai:             # <<<<<<<<<<<<<<
 *                 tag = 'delete'
 *             elif j < bj:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_i, __pyx_v_ai, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 667, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "cydifflib.pyx":668
 *                 tag = 'replace'
 *             elif i < ai:
 *                 tag = 'delete'             # <<<<<<<<<<<<<<
 *             elif j < bj:
 *                 tag = 'insert'
 */
      __Pyx_INCREF(__pyx_n_s_delete);
      __Pyx_DECREF_SET(__pyx_v_tag, __pyx_n_s_delete);

      /* "cydifflib.pyx":667
 *             if i < ai and j < bj:
 *                 tag = 'replace'
 *             elif i < ai:             # <<<<<<<<<<<<<<
 *                 tag = 'delete'
 *             elif j < bj:
 */
      goto __pyx_L8;
    }

    /* "cydifflib.pyx":669
 *             elif i < ai:
 *                 tag = 'delete'
 *             elif j < bj:             # <<<<<<<<<<<<<<
 *                 tag = 'insert'
 *             if tag:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_j, __pyx_v_bj, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 669, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "cydifflib.pyx":670
 *                 tag = 'delete'
 *             elif j < bj:
 *                 tag = 'insert'             # <<<<<<<<<<<<<<
 *             if tag:
 *                 answer.append( (tag, i, ai, j, bj) )
 */
      __Pyx_INCREF(__pyx_n_s_insert);
      __Pyx_DECREF_SET(__pyx_v_tag, __pyx_n_s_insert);

      /* "cydifflib.pyx":669
 *             elif i < ai:
 *                 tag = 'delete'
 *             elif j < bj:             # <<<<<<<<<<<<<<
 *                 tag = 'insert'
 *             if tag:
 */
    }
    __pyx_L8:;

    /* "cydifflib.pyx":671
 *             elif j < bj:
 *                 tag = 'insert'
 *             if tag:             # <<<<<<<<<<<<<<
 *                 answer.append( (tag, i, ai, j, bj) )
 *             i, j = ai+size, bj+size
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_tag); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 671, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "cydifflib.pyx":672
 *                 tag = 'insert'
 *             if tag:
 *                 answer.append( (tag, i, ai, j, bj) )             # <<<<<<<<<<<<<<
 *             i, j = ai+size, bj+size
 *             # the list of matching blocks is terminated by a
 */
      __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_tag);
      __Pyx_GIVEREF(__pyx_v_tag);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_tag);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_ai);
      __Pyx_GIVEREF(__pyx_v_ai);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_ai);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_j);
      __Pyx_INCREF(__pyx_v_bj);
      __Pyx_GIVEREF(__pyx_v_bj);
      PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_bj);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_answer, __pyx_t_3); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cydifflib.pyx":671
 *             elif j < bj:
 *                 tag = 'insert'
 *             if tag:             # <<<<<<<<<<<<<<
 *                 answer.append( (tag, i, ai, j, bj) )
 *             i, j = ai+size, bj+size
 */
    }

    /* "cydifflib.pyx":673
 *             if tag:
 *                 answer.append( (tag, i, ai, j, bj) )
 *             i, j = ai+size, bj+size             # <<<<<<<<<<<<<<
 *             # the list of matching blocks is terminated by a
 *             # sentinel with size 0
 */
    __pyx_t_3 = PyNumber_Add(__pyx_v_ai, __pyx_v_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_v_bj, __pyx_v_size); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_j, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "cydifflib.pyx":676
 *             # the list of matching blocks is terminated by a
 *             # sentinel with size 0
 *             if size:             # <<<<<<<<<<<<<<
 *                 answer.append( ('equal', ai, i, bj, j) )
 *         return answer
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_size); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 676, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "cydifflib.pyx":677
 *             # sentinel with size 0
 *             if size:
 *                 answer.append( ('equal', ai, i, bj, j) )             # <<<<<<<<<<<<<<
 *         return answer
 * 
 */
      __pyx_t_9 = PyTuple_New(5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_equal);
      __Pyx_GIVEREF(__pyx_n_s_equal);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_equal);
      __Pyx_INCREF(__pyx_v_ai);
      __Pyx_GIVEREF(__pyx_v_ai);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_ai);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_bj);
      __Pyx_GIVEREF(__pyx_v_bj);
      PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_v_bj);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_v_j);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_answer, __pyx_t_9); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "cydifflib.pyx":676
 *             # the list of matching blocks is terminated by a
 *             # sentinel with size 0
 *             if size:             # <<<<<<<<<<<<<<
 *                 answer.append( ('equal', ai, i, bj, j) )
 *         return answer
 */
    }

    /* "cydifflib.pyx":658
 *         i = j = 0
 *         self.opcodes = answer = []
 *         for ai, bj, size in self.get_matching_blocks():             # <<<<<<<<<<<<<<
 *             # invariant:  we've pumped out correct diffs to change
 *             # a[:i] into b[:j], and the next matching block is
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cydifflib.pyx":678
 *             if size:
 *                 answer.append( ('equal', ai, i, bj, j) )
 *         return answer             # <<<<<<<<<<<<<<
 * 
 *     def get_grouped_opcodes(self, n=3):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_answer);
  __pyx_r = __pyx_v_answer;
  goto __pyx_L0;

  /* "cydifflib.pyx":625
 *         return self.matching_blocks
 * 
 *     def get_opcodes(self):             # <<<<<<<<<<<<<<
 *         """Return list of 5-tuples describing how to turn a into b.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.get_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_answer);
  __Pyx_XDECREF(__pyx_v_ai);
  __Pyx_XDECREF(__pyx_v_bj);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_tag);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_15SequenceMatcher_16generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":680
 *         return answer
 * 
 *     def get_grouped_opcodes(self, n=3):             # <<<<<<<<<<<<<<
 *         """ Isolate change clusters by eliminating ranges with no changes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_15get_grouped_opcodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_14get_grouped_opcodes, " Isolate change clusters by eliminating ranges with no changes.\n\n        Return a generator of groups with up to n lines of context.\n        Each group is in the same format as returned by get_opcodes().\n\n        >>> from pprint import pprint\n        >>> a = list(map(str, range(1,40)))\n        >>> b = a[:]\n        >>> b[8:8] = ['i']     # Make an insertion\n        >>> b[20] += 'x'       # Make a replacement\n        >>> b[23:28] = []      # Make a deletion\n        >>> b[30] += 'y'       # Make another replacement\n        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))\n        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],\n         [('equal', 16, 19, 17, 20),\n          ('replace', 19, 20, 20, 21),\n          ('equal', 20, 22, 21, 23),\n          ('delete', 22, 27, 23, 23),\n          ('equal', 27, 30, 23, 26)],\n         [('equal', 31, 34, 27, 30),\n          ('replace', 34, 35, 30, 31),\n          ('equal', 35, 38, 31, 34)]]\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_15get_grouped_opcodes = {"get_grouped_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_15get_grouped_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_14get_grouped_opcodes};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_15get_grouped_opcodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_n = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_grouped_opcodes (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    #endif
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_3);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 680, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_grouped_opcodes") < 0)) __PYX_ERR(0, 680, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_grouped_opcodes", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 680, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.get_grouped_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_14get_grouped_opcodes(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self), __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_14get_grouped_opcodes(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, PyObject *__pyx_v_n) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_grouped_opcodes", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *)__pyx_tp_new_9cydifflib___pyx_scope_struct__get_grouped_opcodes(__pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 680, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_n = __pyx_v_n;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_n);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_15SequenceMatcher_16generator, __pyx_codeobj__2, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_grouped_opcodes, __pyx_n_s_SequenceMatcher_get_grouped_opco, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.get_grouped_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_15SequenceMatcher_16generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_grouped_opcodes", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L18_resume_from_yield;
    case 2: goto __pyx_L24_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 680, __pyx_L1_error)

  /* "cydifflib.pyx":705
 *         """
 * 
 *         codes = self.get_opcodes()             # <<<<<<<<<<<<<<
 *         if not codes:
 *             codes = [("equal", 0, 1, 0, 1)]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_opcodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_codes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":706
 * 
 *         codes = self.get_opcodes()
 *         if not codes:             # <<<<<<<<<<<<<<
 *             codes = [("equal", 0, 1, 0, 1)]
 *         # Fixup leading and trailing groups if they show no changes.
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_codes); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 706, __pyx_L1_error)
  __pyx_t_6 = ((!__pyx_t_5) != 0);
  if (__pyx_t_6) {

    /* "cydifflib.pyx":707
 *         codes = self.get_opcodes()
 *         if not codes:
 *             codes = [("equal", 0, 1, 0, 1)]             # <<<<<<<<<<<<<<
 *         # Fixup leading and trailing groups if they show no changes.
 *         if codes[0][0] == 'equal':
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_tuple__3);
    __Pyx_GIVEREF(__pyx_tuple__3);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_tuple__3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_codes);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_codes, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":706
 * 
 *         codes = self.get_opcodes()
 *         if not codes:             # <<<<<<<<<<<<<<
 *             codes = [("equal", 0, 1, 0, 1)]
 *         # Fixup leading and trailing groups if they show no changes.
 */
  }

  /* "cydifflib.pyx":709
 *             codes = [("equal", 0, 1, 0, 1)]
 *         # Fixup leading and trailing groups if they show no changes.
 *         if codes[0][0] == 'equal':             # <<<<<<<<<<<<<<
 *             tag, i1, i2, j1, j2 = codes[0]
 *             codes[0] = tag, max(i1, i2-n), i2, max(j1, j2-n), j2
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_codes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_equal, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "cydifflib.pyx":710
 *         # Fixup leading and trailing groups if they show no changes.
 *         if codes[0][0] == 'equal':
 *             tag, i1, i2, j1, j2 = codes[0]             # <<<<<<<<<<<<<<
 *             codes[0] = tag, max(i1, i2-n), i2, max(j1, j2-n), j2
 *         if codes[-1][0] == 'equal':
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_codes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 710, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 710, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      __pyx_t_10 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 710, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 5) < 0) __PYX_ERR(0, 710, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 710, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_tag = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_i1 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_cur_scope->__pyx_v_i2 = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_cur_scope->__pyx_v_j1 = __pyx_t_8;
    __pyx_t_8 = 0;
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_cur_scope->__pyx_v_j2 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "cydifflib.pyx":711
 *         if codes[0][0] == 'equal':
 *             tag, i1, i2, j1, j2 = codes[0]
 *             codes[0] = tag, max(i1, i2-n), i2, max(j1, j2-n), j2             # <<<<<<<<<<<<<<
 *         if codes[-1][0] == 'equal':
 *             tag, i1, i2, j1, j2 = codes[-1]
 */
    __pyx_t_2 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_i2, __pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i1);
    __pyx_t_9 = __pyx_cur_scope->__pyx_v_i1;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_t_9, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 711, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_6) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_8 = __pyx_t_2;
    } else {
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_8 = __pyx_t_9;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_j2, __pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j1);
    __pyx_t_9 = __pyx_cur_scope->__pyx_v_j1;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_9, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_7 = __pyx_t_2;
    } else {
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_7 = __pyx_t_9;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_tag);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i2);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i2);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_i2);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_7);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j2);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_j2);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_cur_scope->__pyx_v_j2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely((__Pyx_SetItemInt(__pyx_cur_scope->__pyx_v_codes, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0))) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cydifflib.pyx":709
 *             codes = [("equal", 0, 1, 0, 1)]
 *         # Fixup leading and trailing groups if they show no changes.
 *         if codes[0][0] == 'equal':             # <<<<<<<<<<<<<<
 *             tag, i1, i2, j1, j2 = codes[0]
 *             codes[0] = tag, max(i1, i2-n), i2, max(j1, j2-n), j2
 */
  }

  /* "cydifflib.pyx":712
 *             tag, i1, i2, j1, j2 = codes[0]
 *             codes[0] = tag, max(i1, i2-n), i2, max(j1, j2-n), j2
 *         if codes[-1][0] == 'equal':             # <<<<<<<<<<<<<<
 *             tag, i1, i2, j1, j2 = codes[-1]
 *             codes[-1] = tag, i1, min(i2, i1+n), j1, min(j2, j1+n)
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_codes, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_7, __pyx_n_s_equal, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {

    /* "cydifflib.pyx":713
 *             codes[0] = tag, max(i1, i2-n), i2, max(j1, j2-n), j2
 *         if codes[-1][0] == 'equal':
 *             tag, i1, i2, j1, j2 = codes[-1]             # <<<<<<<<<<<<<<
 *             codes[-1] = tag, i1, min(i2, i1+n), j1, min(j2, j1+n)
 * 
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_codes, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 713, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_2,&__pyx_t_8,&__pyx_t_9,&__pyx_t_3,&__pyx_t_1};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 713, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_2,&__pyx_t_8,&__pyx_t_9,&__pyx_t_3,&__pyx_t_1};
      __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 713, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 5) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 713, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i1);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i2);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i2, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j1);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j2);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j2, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":714
 *         if codes[-1][0] == 'equal':
 *             tag, i1, i2, j1, j2 = codes[-1]
 *             codes[-1] = tag, i1, min(i2, i1+n), j1, min(j2, j1+n)             # <<<<<<<<<<<<<<
 * 
 *         nn = n + n
 */
    __pyx_t_7 = PyNumber_Add(__pyx_cur_scope->__pyx_v_i1, __pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i2);
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_i2;
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_7, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 714, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_6) {
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_cur_scope->__pyx_v_j1, __pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j2);
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_j2;
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_6) {
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_9 = __pyx_t_7;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_9 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_cur_scope->__pyx_v_tag);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i1);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i1);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_cur_scope->__pyx_v_i1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j1);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_j1);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_cur_scope->__pyx_v_j1);
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely((__Pyx_SetItemInt(__pyx_cur_scope->__pyx_v_codes, -1L, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0))) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "cydifflib.pyx":712
 *             tag, i1, i2, j1, j2 = codes[0]
 *             codes[0] = tag, max(i1, i2-n), i2, max(j1, j2-n), j2
 *         if codes[-1][0] == 'equal':             # <<<<<<<<<<<<<<
 *             tag, i1, i2, j1, j2 = codes[-1]
 *             codes[-1] = tag, i1, min(i2, i1+n), j1, min(j2, j1+n)
 */
  }

  /* "cydifflib.pyx":716
 *             codes[-1] = tag, i1, min(i2, i1+n), j1, min(j2, j1+n)
 * 
 *         nn = n + n             # <<<<<<<<<<<<<<
 *         group = []
 *         for tag, i1, i2, j1, j2 in codes:
 */
  __pyx_t_7 = PyNumber_Add(__pyx_cur_scope->__pyx_v_n, __pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_cur_scope->__pyx_v_nn = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "cydifflib.pyx":717
 * 
 *         nn = n + n
 *         group = []             # <<<<<<<<<<<<<<
 *         for tag, i1, i2, j1, j2 in codes:
 *             # End the current group and start a new one whenever
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_cur_scope->__pyx_v_group = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "cydifflib.pyx":718
 *         nn = n + n
 *         group = []
 *         for tag, i1, i2, j1, j2 in codes:             # <<<<<<<<<<<<<<
 *             # End the current group and start a new one whenever
 *             # there is a large range with no changes.
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_codes)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_codes)) {
    __pyx_t_7 = __pyx_cur_scope->__pyx_v_codes; __Pyx_INCREF(__pyx_t_7); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_codes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 718, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 718, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 718, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 718, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 718, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_13(__pyx_t_7);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 718, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
      PyObject* sequence = __pyx_t_9;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 718, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_1,&__pyx_t_8,&__pyx_t_2,&__pyx_t_10};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 718, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_1,&__pyx_t_8,&__pyx_t_2,&__pyx_t_10};
      __pyx_t_14 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 718, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_14);
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_11(__pyx_t_14); if (unlikely(!item)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_14), 5) < 0) __PYX_ERR(0, 718, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      goto __pyx_L14_unpacking_done;
      __pyx_L13_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 718, __pyx_L1_error)
      __pyx_L14_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i1);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i2);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i2, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j1);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j2);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j2, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_10);
    __pyx_t_10 = 0;

    /* "cydifflib.pyx":721
 *             # End the current group and start a new one whenever
 *             # there is a large range with no changes.
 *             if tag == 'equal' and i2-i1 > nn:             # <<<<<<<<<<<<<<
 *                 group.append((tag, i1, min(i2, i1+n), j1, min(j2, j1+n)))
 *                 yield group
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_equal, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 721, __pyx_L1_error)
    if (__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_9 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_i2, __pyx_cur_scope->__pyx_v_i1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 721, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyObject_RichCompare(__pyx_t_9, __pyx_cur_scope->__pyx_v_nn, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 721, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 721, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __pyx_t_5;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_6) {

      /* "cydifflib.pyx":722
 *             # there is a large range with no changes.
 *             if tag == 'equal' and i2-i1 > nn:
 *                 group.append((tag, i1, min(i2, i1+n), j1, min(j2, j1+n)))             # <<<<<<<<<<<<<<
 *                 yield group
 *                 group = []
 */
      __pyx_t_10 = PyNumber_Add(__pyx_cur_scope->__pyx_v_i1, __pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i2);
      __pyx_t_9 = __pyx_cur_scope->__pyx_v_i2;
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_10, __pyx_t_9, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 722, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_6) {
        __Pyx_INCREF(__pyx_t_10);
        __pyx_t_2 = __pyx_t_10;
      } else {
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_2 = __pyx_t_9;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Add(__pyx_cur_scope->__pyx_v_j1, __pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j2);
      __pyx_t_9 = __pyx_cur_scope->__pyx_v_j2;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_10, __pyx_t_9, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_6) {
        __Pyx_INCREF(__pyx_t_10);
        __pyx_t_8 = __pyx_t_10;
      } else {
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_8 = __pyx_t_9;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_cur_scope->__pyx_v_tag);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i1);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i1);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_cur_scope->__pyx_v_i1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_2);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j1);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_j1);
      PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_cur_scope->__pyx_v_j1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_group, __pyx_t_10); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "cydifflib.pyx":723
 *             if tag == 'equal' and i2-i1 > nn:
 *                 group.append((tag, i1, min(i2, i1+n), j1, min(j2, j1+n)))
 *                 yield group             # <<<<<<<<<<<<<<
 *                 group = []
 *                 i1, j1 = max(i1, i2-n), max(j1, j2-n)
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_group);
      __pyx_r = __pyx_cur_scope->__pyx_v_group;
      __Pyx_XGIVEREF(__pyx_t_7);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_7;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_12;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_13;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L18_resume_from_yield:;
      __pyx_t_7 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_7);
      __pyx_t_12 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_13 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 723, __pyx_L1_error)

      /* "cydifflib.pyx":724
 *                 group.append((tag, i1, min(i2, i1+n), j1, min(j2, j1+n)))
 *                 yield group
 *                 group = []             # <<<<<<<<<<<<<<
 *                 i1, j1 = max(i1, i2-n), max(j1, j2-n)
 *             group.append((tag, i1, i2, j1 ,j2))
 */
      __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 724, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_group);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_group, ((PyObject*)__pyx_t_10));
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_10 = 0;

      /* "cydifflib.pyx":725
 *                 yield group
 *                 group = []
 *                 i1, j1 = max(i1, i2-n), max(j1, j2-n)             # <<<<<<<<<<<<<<
 *             group.append((tag, i1, i2, j1 ,j2))
 *         if group and not (len(group)==1 and group[0][0] == 'equal'):
 */
      __pyx_t_10 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_i2, __pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i1);
      __pyx_t_8 = __pyx_cur_scope->__pyx_v_i1;
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_10, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 725, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_6) {
        __Pyx_INCREF(__pyx_t_10);
        __pyx_t_2 = __pyx_t_10;
      } else {
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_2 = __pyx_t_8;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_2;
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_j2, __pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j1);
      __pyx_t_8 = __pyx_cur_scope->__pyx_v_j1;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_6) {
        __Pyx_INCREF(__pyx_t_2);
        __pyx_t_9 = __pyx_t_2;
      } else {
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_9 = __pyx_t_8;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __pyx_t_9;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_i1);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_i1, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_j1);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_j1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cydifflib.pyx":721
 *             # End the current group and start a new one whenever
 *             # there is a large range with no changes.
 *             if tag == 'equal' and i2-i1 > nn:             # <<<<<<<<<<<<<<
 *                 group.append((tag, i1, min(i2, i1+n), j1, min(j2, j1+n)))
 *                 yield group
 */
    }

    /* "cydifflib.pyx":726
 *                 group = []
 *                 i1, j1 = max(i1, i2-n), max(j1, j2-n)
 *             group.append((tag, i1, i2, j1 ,j2))             # <<<<<<<<<<<<<<
 *         if group and not (len(group)==1 and group[0][0] == 'equal'):
 *             yield group
 */
    __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_tag);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i1);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i1);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_i1);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i2);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i2);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_i2);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j1);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_j1);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_cur_scope->__pyx_v_j1);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j2);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_j2);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_cur_scope->__pyx_v_j2);
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_group, __pyx_t_2); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cydifflib.pyx":718
 *         nn = n + n
 *         group = []
 *         for tag, i1, i2, j1, j2 in codes:             # <<<<<<<<<<<<<<
 *             # End the current group and start a new one whenever
 *             # there is a large range with no changes.
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "cydifflib.pyx":727
 *                 i1, j1 = max(i1, i2-n), max(j1, j2-n)
 *             group.append((tag, i1, i2, j1 ,j2))
 *         if group and not (len(group)==1 and group[0][0] == 'equal'):             # <<<<<<<<<<<<<<
 *             yield group
 * 
 */
  __pyx_t_5 = (PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_group) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_12 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_group); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_t_16 = ((__pyx_t_12 == 1) != 0);
  if (__pyx_t_16) {
  } else {
    __pyx_t_5 = __pyx_t_16;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_cur_scope->__pyx_v_group, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_16 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_equal, Py_EQ)); if (unlikely((__pyx_t_16 < 0))) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_t_16;
  __pyx_L22_bool_binop_done:;
  __pyx_t_16 = ((!__pyx_t_5) != 0);
  __pyx_t_6 = __pyx_t_16;
  __pyx_L20_bool_binop_done:;
  if (__pyx_t_6) {

    /* "cydifflib.pyx":728
 *             group.append((tag, i1, i2, j1 ,j2))
 *         if group and not (len(group)==1 and group[0][0] == 'equal'):
 *             yield group             # <<<<<<<<<<<<<<
 * 
 *     def ratio(self):
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_group);
    __pyx_r = __pyx_cur_scope->__pyx_v_group;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 2;
    return __pyx_r;
    __pyx_L24_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 728, __pyx_L1_error)

    /* "cydifflib.pyx":727
 *                 i1, j1 = max(i1, i2-n), max(j1, j2-n)
 *             group.append((tag, i1, i2, j1 ,j2))
 *         if group and not (len(group)==1 and group[0][0] == 'equal'):             # <<<<<<<<<<<<<<
 *             yield group
 * 
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":680
 *         return answer
 * 
 *     def get_grouped_opcodes(self, n=3):             # <<<<<<<<<<<<<<
 *         """ Isolate change clusters by eliminating ranges with no changes.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("get_grouped_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":730
 *             yield group
 * 
 *     def ratio(self):             # <<<<<<<<<<<<<<
 *         """Return a measure of the sequences' similarity (float in [0,1]).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_18ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_17ratio, "Return a measure of the sequences' similarity (float in [0,1]).\n\n        Where T is the total number of elements in both sequences, and\n        M is the number of matches, this is 2.0*M / T.\n        Note that this is 1 if the sequences are identical, and 0 if\n        they have nothing in common.\n\n        .ratio() is expensive to compute if you haven't already computed\n        .get_matching_blocks() or .get_opcodes(), in which case you may\n        want to try .quick_ratio() or .real_quick_ratio() first to get an\n        upper bound.\n\n        >>> s = SequenceMatcher(None, \"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        >>> s.quick_ratio()\n        0.75\n        >>> s.real_quick_ratio()\n        1.0\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_18ratio = {"ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_18ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_17ratio};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_18ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ratio (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("ratio", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "ratio", 0))) return NULL;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_17ratio(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_15SequenceMatcher_5ratio_2generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":752
 *         """
 * 
 *         matches = sum(triple[-1] for triple in self.get_matching_blocks())             # <<<<<<<<<<<<<<
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 */

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_5ratio_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *)__pyx_tp_new_9cydifflib___pyx_scope_struct_2_genexpr(__pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 752, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_15SequenceMatcher_5ratio_2generator13, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_ratio_locals_genexpr, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.ratio.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_15SequenceMatcher_5ratio_2generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 752, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 752, __pyx_L1_error) }
  __pyx_t_1 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->__pyx_vtab)->get_matching_blocks(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 752, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 752, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 752, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 752, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_triple);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_triple, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_triple, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 752, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":730
 *             yield group
 * 
 *     def ratio(self):             # <<<<<<<<<<<<<<
 *         """Return a measure of the sequences' similarity (float in [0,1]).
 * 
 */

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_17ratio(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *__pyx_cur_scope;
  PyObject *__pyx_v_matches = NULL;
  PyObject *__pyx_gb_9cydifflib_15SequenceMatcher_5ratio_2generator13 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ratio", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *)__pyx_tp_new_9cydifflib___pyx_scope_struct_1_ratio(__pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 730, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "cydifflib.pyx":752
 *         """
 * 
 *         matches = sum(triple[-1] for triple in self.get_matching_blocks())             # <<<<<<<<<<<<<<
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 */
  __pyx_t_1 = __pyx_pf_9cydifflib_15SequenceMatcher_5ratio_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_matches = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":753
 * 
 *         matches = sum(triple[-1] for triple in self.get_matching_blocks())
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))             # <<<<<<<<<<<<<<
 * 
 *     def quick_ratio(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_matches); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 753, __pyx_L1_error)
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_self->a;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_self->b;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_f_9cydifflib__calculate_ratio(__pyx_t_3, (__pyx_t_4 + __pyx_t_5)); if (unlikely(__pyx_t_6 == ((double)(-1.0)))) __PYX_ERR(0, 753, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":730
 *             yield group
 * 
 *     def ratio(self):             # <<<<<<<<<<<<<<
 *         """Return a measure of the sequences' similarity (float in [0,1]).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_matches);
  __Pyx_XDECREF(__pyx_gb_9cydifflib_15SequenceMatcher_5ratio_2generator13);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":755
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 *     def quick_ratio(self):             # <<<<<<<<<<<<<<
 *         """Return an upper bound on ratio() relatively quickly.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_20quick_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_19quick_ratio, "Return an upper bound on ratio() relatively quickly.\n\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute.\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_20quick_ratio = {"quick_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_20quick_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_19quick_ratio};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_20quick_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quick_ratio (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("quick_ratio", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "quick_ratio", 0))) return NULL;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_19quick_ratio(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_19quick_ratio(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self) {
  PyObject *__pyx_v_fullbcount = NULL;
  PyObject *__pyx_v_elt = NULL;
  PyObject *__pyx_v_avail = NULL;
  PyObject *__pyx_v_availhas = NULL;
  PyObject *__pyx_v_matches = NULL;
  PyObject *__pyx_v_numb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  double __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quick_ratio", 0);

  /* "cydifflib.pyx":765
 *         # of their intersection; this counts the number of matches
 *         # without regard to order, so is clearly an upper bound
 *         if self.fullbcount is None:             # <<<<<<<<<<<<<<
 *             self.fullbcount = fullbcount = {}
 *             for elt in self.b:
 */
  __pyx_t_1 = (__pyx_v_self->fullbcount == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cydifflib.pyx":766
 *         # without regard to order, so is clearly an upper bound
 *         if self.fullbcount is None:
 *             self.fullbcount = fullbcount = {}             # <<<<<<<<<<<<<<
 *             for elt in self.b:
 *                 fullbcount[elt] = fullbcount.get(elt, 0) + 1
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->fullbcount);
    __Pyx_DECREF(__pyx_v_self->fullbcount);
    __pyx_v_self->fullbcount = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_fullbcount = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cydifflib.pyx":767
 *         if self.fullbcount is None:
 *             self.fullbcount = fullbcount = {}
 *             for elt in self.b:             # <<<<<<<<<<<<<<
 *                 fullbcount[elt] = fullbcount.get(elt, 0) + 1
 *         fullbcount = self.fullbcount
 */
    if (likely(PyList_CheckExact(__pyx_v_self->b)) || PyTuple_CheckExact(__pyx_v_self->b)) {
      __pyx_t_3 = __pyx_v_self->b; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_self->b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 767, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 767, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 767, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 767, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 767, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 767, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_elt, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":768
 *             self.fullbcount = fullbcount = {}
 *             for elt in self.b:
 *                 fullbcount[elt] = fullbcount.get(elt, 0) + 1             # <<<<<<<<<<<<<<
 *         fullbcount = self.fullbcount
 *         # avail[x] is the number of times x appears in 'b' less the
 */
      __pyx_t_6 = __Pyx_PyDict_GetItemDefault(__pyx_v_fullbcount, __pyx_v_elt, __pyx_int_0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely((PyDict_SetItem(__pyx_v_fullbcount, __pyx_v_elt, __pyx_t_7) < 0))) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "cydifflib.pyx":767
 *         if self.fullbcount is None:
 *             self.fullbcount = fullbcount = {}
 *             for elt in self.b:             # <<<<<<<<<<<<<<
 *                 fullbcount[elt] = fullbcount.get(elt, 0) + 1
 *         fullbcount = self.fullbcount
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cydifflib.pyx":765
 *         # of their intersection; this counts the number of matches
 *         # without regard to order, so is clearly an upper bound
 *         if self.fullbcount is None:             # <<<<<<<<<<<<<<
 *             self.fullbcount = fullbcount = {}
 *             for elt in self.b:
 */
  }

  /* "cydifflib.pyx":769
 *             for elt in self.b:
 *                 fullbcount[elt] = fullbcount.get(elt, 0) + 1
 *         fullbcount = self.fullbcount             # <<<<<<<<<<<<<<
 *         # avail[x] is the number of times x appears in 'b' less the
 *         # number of times we've seen it in 'a' so far ... kinda
 */
  __pyx_t_3 = __pyx_v_self->fullbcount;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_XDECREF_SET(__pyx_v_fullbcount, ((PyObject*)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "cydifflib.pyx":772
 *         # avail[x] is the number of times x appears in 'b' less the
 *         # number of times we've seen it in 'a' so far ... kinda
 *         avail = {}             # <<<<<<<<<<<<<<
 *         availhas, matches = avail.__contains__, 0
 *         for elt in self.a:
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_avail = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cydifflib.pyx":773
 *         # number of times we've seen it in 'a' so far ... kinda
 *         avail = {}
 *         availhas, matches = avail.__contains__, 0             # <<<<<<<<<<<<<<
 *         for elt in self.a:
 *             if availhas(elt):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_avail, __pyx_n_s_contains); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_7);
  __pyx_v_availhas = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_matches = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "cydifflib.pyx":774
 *         avail = {}
 *         availhas, matches = avail.__contains__, 0
 *         for elt in self.a:             # <<<<<<<<<<<<<<
 *             if availhas(elt):
 *                 numb = avail[elt]
 */
  if (likely(PyList_CheckExact(__pyx_v_self->a)) || PyTuple_CheckExact(__pyx_v_self->a)) {
    __pyx_t_7 = __pyx_v_self->a; __Pyx_INCREF(__pyx_t_7); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_self->a); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 774, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 774, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 774, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_7);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 774, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_elt, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":775
 *         availhas, matches = avail.__contains__, 0
 *         for elt in self.a:
 *             if availhas(elt):             # <<<<<<<<<<<<<<
 *                 numb = avail[elt]
 *             else:
 */
    __pyx_t_2 = PyDict_Contains(__pyx_v_avail, __pyx_v_elt); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 775, __pyx_L1_error)
    if ((__pyx_t_2 != 0)) {

      /* "cydifflib.pyx":776
 *         for elt in self.a:
 *             if availhas(elt):
 *                 numb = avail[elt]             # <<<<<<<<<<<<<<
 *             else:
 *                 numb = fullbcount.get(elt, 0)
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_avail, __pyx_v_elt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_numb, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "cydifflib.pyx":775
 *         availhas, matches = avail.__contains__, 0
 *         for elt in self.a:
 *             if availhas(elt):             # <<<<<<<<<<<<<<
 *                 numb = avail[elt]
 *             else:
 */
      goto __pyx_L8;
    }

    /* "cydifflib.pyx":778
 *                 numb = avail[elt]
 *             else:
 *                 numb = fullbcount.get(elt, 0)             # <<<<<<<<<<<<<<
 *             avail[elt] = numb - 1
 *             if numb > 0:
 */
    /*else*/ {
      if (unlikely(__pyx_v_fullbcount == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
        __PYX_ERR(0, 778, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_fullbcount, __pyx_v_elt, __pyx_int_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_numb, __pyx_t_3);
      __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "cydifflib.pyx":779
 *             else:
 *                 numb = fullbcount.get(elt, 0)
 *             avail[elt] = numb - 1             # <<<<<<<<<<<<<<
 *             if numb > 0:
 *                 matches = matches + 1
 */
    __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_numb, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_avail, __pyx_v_elt, __pyx_t_3) < 0))) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cydifflib.pyx":780
 *                 numb = fullbcount.get(elt, 0)
 *             avail[elt] = numb - 1
 *             if numb > 0:             # <<<<<<<<<<<<<<
 *                 matches = matches + 1
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_numb, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "cydifflib.pyx":781
 *             avail[elt] = numb - 1
 *             if numb > 0:
 *                 matches = matches + 1             # <<<<<<<<<<<<<<
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_matches, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_matches, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "cydifflib.pyx":780
 *                 numb = fullbcount.get(elt, 0)
 *             avail[elt] = numb - 1
 *             if numb > 0:             # <<<<<<<<<<<<<<
 *                 matches = matches + 1
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 */
    }

    /* "cydifflib.pyx":774
 *         avail = {}
 *         availhas, matches = avail.__contains__, 0
 *         for elt in self.a:             # <<<<<<<<<<<<<<
 *             if availhas(elt):
 *                 numb = avail[elt]
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "cydifflib.pyx":782
 *             if numb > 0:
 *                 matches = matches + 1
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))             # <<<<<<<<<<<<<<
 * 
 *     def real_quick_ratio(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_matches); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L1_error)
  __pyx_t_7 = __pyx_v_self->a;
  __Pyx_INCREF(__pyx_t_7);
  __pyx_t_8 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_v_self->b;
  __Pyx_INCREF(__pyx_t_7);
  __pyx_t_9 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_10 = __pyx_f_9cydifflib__calculate_ratio(__pyx_t_4, (__pyx_t_8 + __pyx_t_9)); if (unlikely(__pyx_t_10 == ((double)(-1.0)))) __PYX_ERR(0, 782, __pyx_L1_error)
  __pyx_t_7 = PyFloat_FromDouble(__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":755
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 *     def quick_ratio(self):             # <<<<<<<<<<<<<<
 *         """Return an upper bound on ratio() relatively quickly.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.quick_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fullbcount);
  __Pyx_XDECREF(__pyx_v_elt);
  __Pyx_XDECREF(__pyx_v_avail);
  __Pyx_XDECREF(__pyx_v_availhas);
  __Pyx_XDECREF(__pyx_v_matches);
  __Pyx_XDECREF(__pyx_v_numb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":784
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 *     def real_quick_ratio(self):             # <<<<<<<<<<<<<<
 *         """Return an upper bound on ratio() very quickly.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_22real_quick_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15SequenceMatcher_21real_quick_ratio, "Return an upper bound on ratio() very quickly.\n\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute than either .ratio() or .quick_ratio().\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_22real_quick_ratio = {"real_quick_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_22real_quick_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_21real_quick_ratio};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_22real_quick_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("real_quick_ratio (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("real_quick_ratio", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "real_quick_ratio", 0))) return NULL;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_21real_quick_ratio(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_21real_quick_ratio(struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self) {
  PyObject *__pyx_v_la = NULL;
  PyObject *__pyx_v_lb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("real_quick_ratio", 0);

  /* "cydifflib.pyx":791
 *         """
 * 
 *         la, lb = len(self.a), len(self.b)             # <<<<<<<<<<<<<<
 *         # can't have more matches than the number of elements in the
 *         # shorter sequence
 */
  __pyx_t_1 = __pyx_v_self->a;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_v_self->b;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_la = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_lb = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cydifflib.pyx":794
 *         # can't have more matches than the number of elements in the
 *         # shorter sequence
 *         return _calculate_ratio(min(la, lb), la + lb)             # <<<<<<<<<<<<<<
 * 
 *     __class_getitem__ = classmethod(GenericAlias)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_lb);
  __pyx_t_3 = __pyx_v_lb;
  __Pyx_INCREF(__pyx_v_la);
  __pyx_t_1 = __pyx_v_la;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 794, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = __pyx_t_1;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_v_la, __pyx_v_lb); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_f_9cydifflib__calculate_ratio(__pyx_t_2, __pyx_t_7); if (unlikely(__pyx_t_8 == ((double)(-1.0)))) __PYX_ERR(0, 794, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":784
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 *     def real_quick_ratio(self):             # <<<<<<<<<<<<<<
 *         """Return an upper bound on ratio() very quickly.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.real_quick_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_la);
  __Pyx_XDECREF(__pyx_v_lb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_24__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_24__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_24__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_24__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_23__reduce_cython__(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_23__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_a__self_b__cannot_be_conver, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_26__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9cydifflib_15SequenceMatcher_26__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_26__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9cydifflib_15SequenceMatcher_26__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_15SequenceMatcher_25__setstate_cython__(((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_15SequenceMatcher_25__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_a__self_b__cannot_be_conver, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.SequenceMatcher.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":799
 * 
 * 
 * def get_close_matches(word, possibilities, n=3, cutoff=0.6):             # <<<<<<<<<<<<<<
 *     """Use SequenceMatcher to return list of the best "good enough" matches.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_1get_close_matches(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_get_close_matches, "Use SequenceMatcher to return list of the best \"good enough\" matches.\n\n    word is a sequence for which close matches are desired (typically a\n    string).\n\n    possibilities is a list of sequences against which to match word\n    (typically a list of strings).\n\n    Optional arg n (default 3) is the maximum number of close matches to\n    return.  n must be > 0.\n\n    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities\n    that don't score at least that similar to word are ignored.\n\n    The best (no more than n) matches among the possibilities are returned\n    in a list, sorted by similarity score, most similar first.\n\n    >>> get_close_matches(\"appel\", [\"ape\", \"apple\", \"peach\", \"puppy\"])\n    ['apple', 'ape']\n    >>> import keyword as _keyword\n    >>> get_close_matches(\"wheel\", _keyword.kwlist)\n    ['while']\n    >>> get_close_matches(\"Apple\", _keyword.kwlist)\n    []\n    >>> get_close_matches(\"accept\", _keyword.kwlist)\n    ['except']\n    ");
static PyMethodDef __pyx_mdef_9cydifflib_1get_close_matches = {"get_close_matches", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_1get_close_matches, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_get_close_matches};
static PyObject *__pyx_pw_9cydifflib_1get_close_matches(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_word = 0;
  PyObject *__pyx_v_possibilities = 0;
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_close_matches (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_word,&__pyx_n_s_possibilities,&__pyx_n_s_n,&__pyx_n_s_cutoff,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_word,&__pyx_n_s_possibilities,&__pyx_n_s_n,&__pyx_n_s_cutoff,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_3));
    values[3] = ((PyObject *)((PyObject*)__pyx_float_0_6));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_word)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 799, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_possibilities)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 799, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_close_matches", 0, 2, 4, 1); __PYX_ERR(0, 799, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 799, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cutoff);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 799, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_close_matches") < 0)) __PYX_ERR(0, 799, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_word = values[0];
    __pyx_v_possibilities = values[1];
    __pyx_v_n = values[2];
    __pyx_v_cutoff = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_close_matches", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 799, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.get_close_matches", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_get_close_matches(__pyx_self, __pyx_v_word, __pyx_v_possibilities, __pyx_v_n, __pyx_v_cutoff);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_get_close_matches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_word, PyObject *__pyx_v_possibilities, PyObject *__pyx_v_n, PyObject *__pyx_v_cutoff) {
  PyObject *__pyx_v_result = NULL;
  struct __pyx_obj_9cydifflib_SequenceMatcher *__pyx_v_s = NULL;
  PyObject *__pyx_v_x = NULL;
  CYTHON_UNUSED PyObject *__pyx_8genexpr1__pyx_v_score = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_close_matches", 0);

  /* "cydifflib.pyx":828
 *     """
 * 
 *     if not n >  0:             # <<<<<<<<<<<<<<
 *         raise ValueError("n must be > 0: %r" % (n,))
 *     if not 0.0 <= cutoff <= 1.0:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_n, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 828, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "cydifflib.pyx":829
 * 
 *     if not n >  0:
 *         raise ValueError("n must be > 0: %r" % (n,))             # <<<<<<<<<<<<<<
 *     if not 0.0 <= cutoff <= 1.0:
 *         raise ValueError("cutoff must be in [0.0, 1.0]: %r" % (cutoff,))
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_n);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_n_must_be_0_r, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 829, __pyx_L1_error)

    /* "cydifflib.pyx":828
 *     """
 * 
 *     if not n >  0:             # <<<<<<<<<<<<<<
 *         raise ValueError("n must be > 0: %r" % (n,))
 *     if not 0.0 <= cutoff <= 1.0:
 */
  }

  /* "cydifflib.pyx":830
 *     if not n >  0:
 *         raise ValueError("n must be > 0: %r" % (n,))
 *     if not 0.0 <= cutoff <= 1.0:             # <<<<<<<<<<<<<<
 *         raise ValueError("cutoff must be in [0.0, 1.0]: %r" % (cutoff,))
 *     result = []
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_float_0_0, __pyx_v_cutoff, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_1)) {
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_cutoff, __pyx_float_1_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = ((!__pyx_t_3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cydifflib.pyx":831
 *         raise ValueError("n must be > 0: %r" % (n,))
 *     if not 0.0 <= cutoff <= 1.0:
 *         raise ValueError("cutoff must be in [0.0, 1.0]: %r" % (cutoff,))             # <<<<<<<<<<<<<<
 *     result = []
 *     s = SequenceMatcher()
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_cutoff);
    __Pyx_GIVEREF(__pyx_v_cutoff);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_cutoff);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_cutoff_must_be_in_0_0_1_0_r, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 831, __pyx_L1_error)

    /* "cydifflib.pyx":830
 *     if not n >  0:
 *         raise ValueError("n must be > 0: %r" % (n,))
 *     if not 0.0 <= cutoff <= 1.0:             # <<<<<<<<<<<<<<
 *         raise ValueError("cutoff must be in [0.0, 1.0]: %r" % (cutoff,))
 *     result = []
 */
  }

  /* "cydifflib.pyx":832
 *     if not 0.0 <= cutoff <= 1.0:
 *         raise ValueError("cutoff must be in [0.0, 1.0]: %r" % (cutoff,))
 *     result = []             # <<<<<<<<<<<<<<
 *     s = SequenceMatcher()
 *     s.set_seq2(word)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":833
 *         raise ValueError("cutoff must be in [0.0, 1.0]: %r" % (cutoff,))
 *     result = []
 *     s = SequenceMatcher()             # <<<<<<<<<<<<<<
 *     s.set_seq2(word)
 *     for x in possibilities:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":834
 *     result = []
 *     s = SequenceMatcher()
 *     s.set_seq2(word)             # <<<<<<<<<<<<<<
 *     for x in possibilities:
 *         s.set_seq1(x)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_v_s->__pyx_vtab)->set_seq2(__pyx_v_s, __pyx_v_word, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":835
 *     s = SequenceMatcher()
 *     s.set_seq2(word)
 *     for x in possibilities:             # <<<<<<<<<<<<<<
 *         s.set_seq1(x)
 *         if s.real_quick_ratio() >= cutoff and \
 */
  if (likely(PyList_CheckExact(__pyx_v_possibilities)) || PyTuple_CheckExact(__pyx_v_possibilities)) {
    __pyx_t_1 = __pyx_v_possibilities; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_possibilities); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 835, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 835, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 835, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 835, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 835, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cydifflib.pyx":836
 *     s.set_seq2(word)
 *     for x in possibilities:
 *         s.set_seq1(x)             # <<<<<<<<<<<<<<
 *         if s.real_quick_ratio() >= cutoff and \
 *            s.quick_ratio() >= cutoff and \
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_v_s->__pyx_vtab)->set_seq1(__pyx_v_s, __pyx_v_x, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cydifflib.pyx":837
 *     for x in possibilities:
 *         s.set_seq1(x)
 *         if s.real_quick_ratio() >= cutoff and \             # <<<<<<<<<<<<<<
 *            s.quick_ratio() >= cutoff and \
 *            s.ratio() >= cutoff:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_s), __pyx_n_s_real_quick_ratio); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_8, };
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_v_cutoff, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }

    /* "cydifflib.pyx":838
 *         s.set_seq1(x)
 *         if s.real_quick_ratio() >= cutoff and \
 *            s.quick_ratio() >= cutoff and \             # <<<<<<<<<<<<<<
 *            s.ratio() >= cutoff:
 *             result.append((s.ratio(), x))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_s), __pyx_n_s_quick_ratio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_8, };
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_7, __pyx_v_cutoff, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }

    /* "cydifflib.pyx":839
 *         if s.real_quick_ratio() >= cutoff and \
 *            s.quick_ratio() >= cutoff and \
 *            s.ratio() >= cutoff:             # <<<<<<<<<<<<<<
 *             result.append((s.ratio(), x))
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_s), __pyx_n_s_ratio); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_8, };
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_v_cutoff, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = __pyx_t_3;
    __pyx_L8_bool_binop_done:;

    /* "cydifflib.pyx":837
 *     for x in possibilities:
 *         s.set_seq1(x)
 *         if s.real_quick_ratio() >= cutoff and \             # <<<<<<<<<<<<<<
 *            s.quick_ratio() >= cutoff and \
 *            s.ratio() >= cutoff:
 */
    if (__pyx_t_2) {

      /* "cydifflib.pyx":840
 *            s.quick_ratio() >= cutoff and \
 *            s.ratio() >= cutoff:
 *             result.append((s.ratio(), x))             # <<<<<<<<<<<<<<
 * 
 *     # Move the best scorers to head of list
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_s), __pyx_n_s_ratio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_9 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_8, };
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_v_x);
      __Pyx_GIVEREF(__pyx_v_x);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_x);
      __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_4); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "cydifflib.pyx":837
 *     for x in possibilities:
 *         s.set_seq1(x)
 *         if s.real_quick_ratio() >= cutoff and \             # <<<<<<<<<<<<<<
 *            s.quick_ratio() >= cutoff and \
 *            s.ratio() >= cutoff:
 */
    }

    /* "cydifflib.pyx":835
 *     s = SequenceMatcher()
 *     s.set_seq2(word)
 *     for x in possibilities:             # <<<<<<<<<<<<<<
 *         s.set_seq1(x)
 *         if s.real_quick_ratio() >= cutoff and \
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":843
 * 
 *     # Move the best scorers to head of list
 *     result = _nlargest(n, result)             # <<<<<<<<<<<<<<
 *     # Strip scores for the best n matches
 *     return [x for score, x in result]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_nlargest); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_v_n, __pyx_v_result};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":845
 *     result = _nlargest(n, result)
 *     # Strip scores for the best n matches
 *     return [x for score, x in result]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L13_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_result)) || PyTuple_CheckExact(__pyx_v_result)) {
      __pyx_t_4 = __pyx_v_result; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 845, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 845, __pyx_L13_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 845, __pyx_L13_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 845, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 845, __pyx_L13_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 845, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 845, __pyx_L13_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
        PyObject* sequence = __pyx_t_7;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 845, __pyx_L13_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 845, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 845, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_12 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 845, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_12);
        index = 0; __pyx_t_8 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_8)) goto __pyx_L16_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L16_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 845, __pyx_L13_error)
        __pyx_t_13 = NULL;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L17_unpacking_done;
        __pyx_L16_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 845, __pyx_L13_error)
        __pyx_L17_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_score, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_x, __pyx_t_11);
      __pyx_t_11 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_x))) __PYX_ERR(0, 845, __pyx_L13_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_score); __pyx_8genexpr1__pyx_v_score = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_x); __pyx_8genexpr1__pyx_v_x = 0;
    goto __pyx_L18_exit_scope;
    __pyx_L13_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_score); __pyx_8genexpr1__pyx_v_score = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_x); __pyx_8genexpr1__pyx_v_x = 0;
    goto __pyx_L1_error;
    __pyx_L18_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":799
 * 
 * 
 * def get_close_matches(word, possibilities, n=3, cutoff=0.6):             # <<<<<<<<<<<<<<
 *     """Use SequenceMatcher to return list of the best "good enough" matches.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("cydifflib.get_close_matches", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_score);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":848
 * 
 * 
 * def _keep_original_ws(s, tag_s):             # <<<<<<<<<<<<<<
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_3_keep_original_ws(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_2_keep_original_ws, "Replace whitespace with the original whitespace characters in `s`");
static PyMethodDef __pyx_mdef_9cydifflib_3_keep_original_ws = {"_keep_original_ws", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_3_keep_original_ws, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_2_keep_original_ws};
static PyObject *__pyx_pw_9cydifflib_3_keep_original_ws(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_tag_s = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_keep_original_ws (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_tag_s,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_tag_s,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 848, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tag_s)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 848, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_keep_original_ws", 1, 2, 2, 1); __PYX_ERR(0, 848, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_keep_original_ws") < 0)) __PYX_ERR(0, 848, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s = values[0];
    __pyx_v_tag_s = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_keep_original_ws", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 848, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib._keep_original_ws", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_2_keep_original_ws(__pyx_self, __pyx_v_s, __pyx_v_tag_s);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_17_keep_original_ws_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":851
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 *         c if tag_c == " " and c.isspace() else tag_c             # <<<<<<<<<<<<<<
 *         for c, tag_c in zip(s, tag_s)
 *     )
 */

static PyObject *__pyx_pf_9cydifflib_17_keep_original_ws_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *)__pyx_tp_new_9cydifflib___pyx_scope_struct_4_genexpr(__pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 851, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_17_keep_original_ws_2generator14, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_keep_original_ws_locals_genexpr, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib._keep_original_ws.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_17_keep_original_ws_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 851, __pyx_L1_error)

  /* "cydifflib.pyx":852
 *     return ''.join(
 *         c if tag_c == " " and c.isspace() else tag_c
 *         for c, tag_c in zip(s, tag_s)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_s)) { __Pyx_RaiseClosureNameError("s"); __PYX_ERR(0, 852, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_tag_s)) { __Pyx_RaiseClosureNameError("tag_s"); __PYX_ERR(0, 852, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_s);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_s);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_tag_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_tag_s);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_tag_s);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 852, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 852, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 852, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 852, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 852, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7);
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 852, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 852, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_c);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_c, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag_c);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag_c, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "cydifflib.pyx":851
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 *         c if tag_c == " " and c.isspace() else tag_c             # <<<<<<<<<<<<<<
 *         for c, tag_c in zip(s, tag_s)
 *     )
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag_c, __pyx_kp_s__4, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 851, __pyx_L1_error)
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_c, __pyx_n_s_isspace); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_11 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_7, };
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_9) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_c);
      __pyx_t_2 = __pyx_cur_scope->__pyx_v_c;
    } else {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag_c);
      __pyx_t_2 = __pyx_cur_scope->__pyx_v_tag_c;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L10_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 851, __pyx_L1_error)

    /* "cydifflib.pyx":852
 *     return ''.join(
 *         c if tag_c == " " and c.isspace() else tag_c
 *         for c, tag_c in zip(s, tag_s)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":851
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 *         c if tag_c == " " and c.isspace() else tag_c             # <<<<<<<<<<<<<<
 *         for c, tag_c in zip(s, tag_s)
 *     )
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":848
 * 
 * 
 * def _keep_original_ws(s, tag_s):             # <<<<<<<<<<<<<<
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 */

static PyObject *__pyx_pf_9cydifflib_2_keep_original_ws(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s, PyObject *__pyx_v_tag_s) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *__pyx_cur_scope;
  PyObject *__pyx_gb_9cydifflib_17_keep_original_ws_2generator14 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_keep_original_ws", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *)__pyx_tp_new_9cydifflib___pyx_scope_struct_3__keep_original_ws(__pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 848, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_s = __pyx_v_s;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_s);
  __pyx_cur_scope->__pyx_v_tag_s = __pyx_v_tag_s;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag_s);

  /* "cydifflib.pyx":850
 * def _keep_original_ws(s, tag_s):
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(             # <<<<<<<<<<<<<<
 *         c if tag_c == " " and c.isspace() else tag_c
 *         for c, tag_c in zip(s, tag_s)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cydifflib.pyx":851
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 *         c if tag_c == " " and c.isspace() else tag_c             # <<<<<<<<<<<<<<
 *         for c, tag_c in zip(s, tag_s)
 *     )
 */
  __pyx_t_1 = __pyx_pf_9cydifflib_17_keep_original_ws_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cydifflib.pyx":850
 * def _keep_original_ws(s, tag_s):
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(             # <<<<<<<<<<<<<<
 *         c if tag_c == " " and c.isspace() else tag_c
 *         for c, tag_c in zip(s, tag_s)
 */
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":848
 * 
 * 
 * def _keep_original_ws(s, tag_s):             # <<<<<<<<<<<<<<
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib._keep_original_ws", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_9cydifflib_17_keep_original_ws_2generator14);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":951
 *     """
 * 
 *     def __init__(self, linejunk=None, charjunk=None):             # <<<<<<<<<<<<<<
 *         """
 *         Construct a text differencer, with optional filters.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6Differ_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_6Differ___init__, "\n        Construct a text differencer, with optional filters.\n\n        The two optional keyword parameters are for filter functions:\n\n        - `linejunk`: A function that should accept a single string argument,\n          and return true iff the string is junk. The module-level function\n          `IS_LINE_JUNK` may be used to filter out lines without visible\n          characters, except for at most one splat ('#').  It is recommended\n          to leave linejunk None; the underlying SequenceMatcher class has\n          an adaptive notion of \"noise\" lines that's better than any static\n          definition the author has ever been able to craft.\n\n        - `charjunk`: A function that should accept a string of length 1. The\n          module-level function `IS_CHARACTER_JUNK` may be used to filter out\n          whitespace characters (a blank or tab; **note**: bad idea to include\n          newline in this!).  Use of IS_CHARACTER_JUNK is recommended.\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_6Differ_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_6Differ_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_6Differ___init__};
static PyObject *__pyx_pw_9cydifflib_6Differ_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_linejunk = 0;
  PyObject *__pyx_v_charjunk = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_linejunk,&__pyx_n_s_charjunk,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_linejunk,&__pyx_n_s_charjunk,0};
    #endif
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    values[2] = ((PyObject *)((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 951, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_linejunk);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 951, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_charjunk);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 951, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 951, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_linejunk = values[1];
    __pyx_v_charjunk = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 951, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.Differ.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6Differ___init__(__pyx_self, __pyx_v_self, __pyx_v_linejunk, __pyx_v_charjunk);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6Differ___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_linejunk, PyObject *__pyx_v_charjunk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cydifflib.pyx":971
 *         """
 * 
 *         self.linejunk = linejunk             # <<<<<<<<<<<<<<
 *         self.charjunk = charjunk
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_linejunk, __pyx_v_linejunk) < 0) __PYX_ERR(0, 971, __pyx_L1_error)

  /* "cydifflib.pyx":972
 * 
 *         self.linejunk = linejunk
 *         self.charjunk = charjunk             # <<<<<<<<<<<<<<
 * 
 *     def compare(self, a, b):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_charjunk, __pyx_v_charjunk) < 0) __PYX_ERR(0, 972, __pyx_L1_error)

  /* "cydifflib.pyx":951
 *     """
 * 
 *     def __init__(self, linejunk=None, charjunk=None):             # <<<<<<<<<<<<<<
 *         """
 *         Construct a text differencer, with optional filters.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.Differ.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_6Differ_4generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":974
 *         self.charjunk = charjunk
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         r"""
 *         Compare two sequences of lines; generate the resulting delta.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6Differ_3compare(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_6Differ_2compare, "\n        Compare two sequences of lines; generate the resulting delta.\n\n        Each sequence must contain individual single-line strings ending with\n        newlines. Such sequences can be obtained from the `readlines()` method\n        of file-like objects.  The delta generated also consists of newline-\n        terminated strings, ready to be printed as-is via the writeline()\n        method of a file-like object.\n\n        Example:\n\n        >>> print(''.join(Differ().compare('one\\ntwo\\nthree\\n'.splitlines(True),\n        ...                                'ore\\ntree\\nemu\\n'.splitlines(True))),\n        ...       end=\"\")\n        - one\n        ?  ^\n        + ore\n        ?  ^\n        - two\n        - three\n        ?  -\n        + tree\n        + emu\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_6Differ_3compare = {"compare", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_6Differ_3compare, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_6Differ_2compare};
static PyObject *__pyx_pw_9cydifflib_6Differ_3compare(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compare (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_a,&__pyx_n_s_b,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_a,&__pyx_n_s_b,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 974, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 974, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("compare", 1, 3, 3, 1); __PYX_ERR(0, 974, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 974, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("compare", 1, 3, 3, 2); __PYX_ERR(0, 974, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "compare") < 0)) __PYX_ERR(0, 974, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_a = values[1];
    __pyx_v_b = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compare", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 974, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.Differ.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6Differ_2compare(__pyx_self, __pyx_v_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6Differ_2compare(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compare", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *)__pyx_tp_new_9cydifflib___pyx_scope_struct_5_compare(__pyx_ptype_9cydifflib___pyx_scope_struct_5_compare, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 974, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_a = __pyx_v_a;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  __pyx_cur_scope->__pyx_v_b = __pyx_v_b;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_6Differ_4generator1, __pyx_codeobj__5, (PyObject *) __pyx_cur_scope, __pyx_n_s_compare, __pyx_n_s_Differ_compare, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.Differ.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_6Differ_4generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compare", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield_from;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 974, __pyx_L1_error)

  /* "cydifflib.pyx":1000
 *         """
 * 
 *         cruncher = SequenceMatcher(self.linejunk, a, b)             # <<<<<<<<<<<<<<
 *         for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
 *             if tag == 'replace':
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_linejunk); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_a);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_b);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_cruncher = ((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1001
 * 
 *         cruncher = SequenceMatcher(self.linejunk, a, b)
 *         for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():             # <<<<<<<<<<<<<<
 *             if tag == 'replace':
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_cruncher), __pyx_n_s_get_opcodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1001, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1001, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1001, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1001, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1001, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1001, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
      __pyx_t_11 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 5) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1001, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_alo);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_alo, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ahi);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ahi, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_blo);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_blo, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bhi);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bhi, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_10);
    __pyx_t_10 = 0;

    /* "cydifflib.pyx":1002
 *         cruncher = SequenceMatcher(self.linejunk, a, b)
 *         for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
 *             if tag == 'replace':             # <<<<<<<<<<<<<<
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 *             elif tag == 'delete':
 */
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_replace, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1002, __pyx_L1_error)
    if (__pyx_t_13) {

      /* "cydifflib.pyx":1003
 *         for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
 *             if tag == 'replace':
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)             # <<<<<<<<<<<<<<
 *             elif tag == 'delete':
 *                 g = self._dump('-', a, alo, ahi)
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_fancy_replace); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1003, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[7] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 6+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1003, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_g);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_g, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1002
 *         cruncher = SequenceMatcher(self.linejunk, a, b)
 *         for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
 *             if tag == 'replace':             # <<<<<<<<<<<<<<
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 *             elif tag == 'delete':
 */
      goto __pyx_L8;
    }

    /* "cydifflib.pyx":1004
 *             if tag == 'replace':
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 *             elif tag == 'delete':             # <<<<<<<<<<<<<<
 *                 g = self._dump('-', a, alo, ahi)
 *             elif tag == 'insert':
 */
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_delete, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1004, __pyx_L1_error)
    if (__pyx_t_13) {

      /* "cydifflib.pyx":1005
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 *             elif tag == 'delete':
 *                 g = self._dump('-', a, alo, ahi)             # <<<<<<<<<<<<<<
 *             elif tag == 'insert':
 *                 g = self._dump('+', b, blo, bhi)
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_dump); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1005, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_9, __pyx_kp_s__6, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_g);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_g, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1004
 *             if tag == 'replace':
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 *             elif tag == 'delete':             # <<<<<<<<<<<<<<
 *                 g = self._dump('-', a, alo, ahi)
 *             elif tag == 'insert':
 */
      goto __pyx_L8;
    }

    /* "cydifflib.pyx":1006
 *             elif tag == 'delete':
 *                 g = self._dump('-', a, alo, ahi)
 *             elif tag == 'insert':             # <<<<<<<<<<<<<<
 *                 g = self._dump('+', b, blo, bhi)
 *             elif tag == 'equal':
 */
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_insert, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1006, __pyx_L1_error)
    if (__pyx_t_13) {

      /* "cydifflib.pyx":1007
 *                 g = self._dump('-', a, alo, ahi)
 *             elif tag == 'insert':
 *                 g = self._dump('+', b, blo, bhi)             # <<<<<<<<<<<<<<
 *             elif tag == 'equal':
 *                 g = self._dump(' ', a, alo, ahi)
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_dump); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_9, __pyx_kp_s__7, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_g);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_g, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1006
 *             elif tag == 'delete':
 *                 g = self._dump('-', a, alo, ahi)
 *             elif tag == 'insert':             # <<<<<<<<<<<<<<
 *                 g = self._dump('+', b, blo, bhi)
 *             elif tag == 'equal':
 */
      goto __pyx_L8;
    }

    /* "cydifflib.pyx":1008
 *             elif tag == 'insert':
 *                 g = self._dump('+', b, blo, bhi)
 *             elif tag == 'equal':             # <<<<<<<<<<<<<<
 *                 g = self._dump(' ', a, alo, ahi)
 *             else:
 */
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_equal, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1008, __pyx_L1_error)
    if (likely(__pyx_t_13)) {

      /* "cydifflib.pyx":1009
 *                 g = self._dump('+', b, blo, bhi)
 *             elif tag == 'equal':
 *                 g = self._dump(' ', a, alo, ahi)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError('unknown tag %r' % (tag,))
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_dump); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1009, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_9, __pyx_kp_s__4, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_g);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_g, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1008
 *             elif tag == 'insert':
 *                 g = self._dump('+', b, blo, bhi)
 *             elif tag == 'equal':             # <<<<<<<<<<<<<<
 *                 g = self._dump(' ', a, alo, ahi)
 *             else:
 */
      goto __pyx_L8;
    }

    /* "cydifflib.pyx":1011
 *                 g = self._dump(' ', a, alo, ahi)
 *             else:
 *                 raise ValueError('unknown tag %r' % (tag,))             # <<<<<<<<<<<<<<
 * 
 *             yield from g
 */
    /*else*/ {
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_tag);
      __pyx_t_10 = __Pyx_PyString_Format(__pyx_kp_s_unknown_tag_r, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 1011, __pyx_L1_error)
    }
    __pyx_L8:;

    /* "cydifflib.pyx":1013
 *                 raise ValueError('unknown tag %r' % (tag,))
 * 
 *             yield from g             # <<<<<<<<<<<<<<
 * 
 *     def _dump(self, tag, x, lo, hi):
 */
    __pyx_r = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_cur_scope->__pyx_v_g);
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield_from:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1013, __pyx_L1_error)
    } else {
      PyObject* exc_type = __Pyx_PyErr_Occurred();
      if (exc_type) {
        if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
        else __PYX_ERR(0, 1013, __pyx_L1_error)
      }
    }

    /* "cydifflib.pyx":1001
 * 
 *         cruncher = SequenceMatcher(self.linejunk, a, b)
 *         for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():             # <<<<<<<<<<<<<<
 *             if tag == 'replace':
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":974
 *         self.charjunk = charjunk
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         r"""
 *         Compare two sequences of lines; generate the resulting delta.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_6Differ_7generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1015
 *             yield from g
 * 
 *     def _dump(self, tag, x, lo, hi):             # <<<<<<<<<<<<<<
 *         """Generate comparison results for a same-tagged range."""
 *         for i in range(lo, hi):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6Differ_6_dump(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_6Differ_5_dump, "Generate comparison results for a same-tagged range.");
static PyMethodDef __pyx_mdef_9cydifflib_6Differ_6_dump = {"_dump", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_6Differ_6_dump, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_6Differ_5_dump};
static PyObject *__pyx_pw_9cydifflib_6Differ_6_dump(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_tag = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_lo = 0;
  PyObject *__pyx_v_hi = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_dump (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_tag,&__pyx_n_s_x,&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_tag,&__pyx_n_s_x,&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tag)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_dump", 1, 5, 5, 1); __PYX_ERR(0, 1015, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_dump", 1, 5, 5, 2); __PYX_ERR(0, 1015, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lo)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_dump", 1, 5, 5, 3); __PYX_ERR(0, 1015, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hi)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_dump", 1, 5, 5, 4); __PYX_ERR(0, 1015, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_dump") < 0)) __PYX_ERR(0, 1015, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_tag = values[1];
    __pyx_v_x = values[2];
    __pyx_v_lo = values[3];
    __pyx_v_hi = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_dump", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 1015, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.Differ._dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6Differ_5_dump(__pyx_self, __pyx_v_self, __pyx_v_tag, __pyx_v_x, __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6Differ_5_dump(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_tag, PyObject *__pyx_v_x, PyObject *__pyx_v_lo, PyObject *__pyx_v_hi) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_dump", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *)__pyx_tp_new_9cydifflib___pyx_scope_struct_6__dump(__pyx_ptype_9cydifflib___pyx_scope_struct_6__dump, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1015, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_tag = __pyx_v_tag;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
  __pyx_cur_scope->__pyx_v_x = __pyx_v_x;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_x);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_x);
  __pyx_cur_scope->__pyx_v_lo = __pyx_v_lo;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lo);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lo);
  __pyx_cur_scope->__pyx_v_hi = __pyx_v_hi;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_hi);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_hi);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_6Differ_7generator2, __pyx_codeobj__8, (PyObject *) __pyx_cur_scope, __pyx_n_s_dump, __pyx_n_s_Differ__dump, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.Differ._dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_6Differ_7generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_dump", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1015, __pyx_L1_error)

  /* "cydifflib.pyx":1017
 *     def _dump(self, tag, x, lo, hi):
 *         """Generate comparison results for a same-tagged range."""
 *         for i in range(lo, hi):             # <<<<<<<<<<<<<<
 *             yield '%s %s' % (tag, x[i])
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lo);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lo);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_lo);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_hi);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_hi);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_hi);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1017, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1017, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1017, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1017, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1017, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1017, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":1018
 *         """Generate comparison results for a same-tagged range."""
 *         for i in range(lo, hi):
 *             yield '%s %s' % (tag, x[i])             # <<<<<<<<<<<<<<
 * 
 *     def _plain_replace(self, a, alo, ahi, b, blo, bhi):
 */
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_x, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_cur_scope->__pyx_v_tag);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1018, __pyx_L1_error)

    /* "cydifflib.pyx":1017
 *     def _dump(self, tag, x, lo, hi):
 *         """Generate comparison results for a same-tagged range."""
 *         for i in range(lo, hi):             # <<<<<<<<<<<<<<
 *             yield '%s %s' % (tag, x[i])
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1015
 *             yield from g
 * 
 *     def _dump(self, tag, x, lo, hi):             # <<<<<<<<<<<<<<
 *         """Generate comparison results for a same-tagged range."""
 *         for i in range(lo, hi):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_6Differ_10generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1020
 *             yield '%s %s' % (tag, x[i])
 * 
 *     def _plain_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         assert alo < ahi and blo < bhi
 *         # dump the shorter block first -- reduces the burden on short-term
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6Differ_9_plain_replace(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9cydifflib_6Differ_9_plain_replace = {"_plain_replace", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_6Differ_9_plain_replace, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9cydifflib_6Differ_9_plain_replace(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_alo = 0;
  PyObject *__pyx_v_ahi = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_blo = 0;
  PyObject *__pyx_v_bhi = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_plain_replace (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_a,&__pyx_n_s_alo,&__pyx_n_s_ahi,&__pyx_n_s_b,&__pyx_n_s_blo,&__pyx_n_s_bhi,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_a,&__pyx_n_s_alo,&__pyx_n_s_ahi,&__pyx_n_s_b,&__pyx_n_s_blo,&__pyx_n_s_bhi,0};
    #endif
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_plain_replace", 1, 7, 7, 1); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alo)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_plain_replace", 1, 7, 7, 2); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ahi)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_plain_replace", 1, 7, 7, 3); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_plain_replace", 1, 7, 7, 4); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_blo)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_plain_replace", 1, 7, 7, 5); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bhi)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_plain_replace", 1, 7, 7, 6); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_plain_replace") < 0)) __PYX_ERR(0, 1020, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 7)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
      values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
    }
    __pyx_v_self = values[0];
    __pyx_v_a = values[1];
    __pyx_v_alo = values[2];
    __pyx_v_ahi = values[3];
    __pyx_v_b = values[4];
    __pyx_v_blo = values[5];
    __pyx_v_bhi = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_plain_replace", 1, 7, 7, __pyx_nargs); __PYX_ERR(0, 1020, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.Differ._plain_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6Differ_8_plain_replace(__pyx_self, __pyx_v_self, __pyx_v_a, __pyx_v_alo, __pyx_v_ahi, __pyx_v_b, __pyx_v_blo, __pyx_v_bhi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6Differ_8_plain_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_alo, PyObject *__pyx_v_ahi, PyObject *__pyx_v_b, PyObject *__pyx_v_blo, PyObject *__pyx_v_bhi) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_plain_replace", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *)__pyx_tp_new_9cydifflib___pyx_scope_struct_7__plain_replace(__pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1020, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_a = __pyx_v_a;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  __pyx_cur_scope->__pyx_v_alo = __pyx_v_alo;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_alo);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_alo);
  __pyx_cur_scope->__pyx_v_ahi = __pyx_v_ahi;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ahi);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ahi);
  __pyx_cur_scope->__pyx_v_b = __pyx_v_b;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  __pyx_cur_scope->__pyx_v_blo = __pyx_v_blo;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_blo);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_blo);
  __pyx_cur_scope->__pyx_v_bhi = __pyx_v_bhi;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_bhi);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_bhi);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_6Differ_10generator3, __pyx_codeobj__9, (PyObject *) __pyx_cur_scope, __pyx_n_s_plain_replace, __pyx_n_s_Differ__plain_replace, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1020, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.Differ._plain_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_6Differ_10generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_plain_replace", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield_from;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1020, __pyx_L1_error)

  /* "cydifflib.pyx":1021
 * 
 *     def _plain_replace(self, a, alo, ahi, b, blo, bhi):
 *         assert alo < ahi and blo < bhi             # <<<<<<<<<<<<<<
 *         # dump the shorter block first -- reduces the burden on short-term
 *         # memory if the blocks are of very different sizes
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1021, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1021, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 1021, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1021, __pyx_L1_error)
  #endif

  /* "cydifflib.pyx":1024
 *         # dump the shorter block first -- reduces the burden on short-term
 *         # memory if the blocks are of very different sizes
 *         if bhi - blo < ahi - alo:             # <<<<<<<<<<<<<<
 *             first  = self._dump('+', b, blo, bhi)
 *             second = self._dump('-', a, alo, ahi)
 */
  __pyx_t_2 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_bhi, __pyx_cur_scope->__pyx_v_blo); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_ahi, __pyx_cur_scope->__pyx_v_alo); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "cydifflib.pyx":1025
 *         # memory if the blocks are of very different sizes
 *         if bhi - blo < ahi - alo:
 *             first  = self._dump('+', b, blo, bhi)             # <<<<<<<<<<<<<<
 *             second = self._dump('-', a, alo, ahi)
 *         else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_dump); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_2, __pyx_kp_s__7, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 4+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_first = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cydifflib.pyx":1026
 *         if bhi - blo < ahi - alo:
 *             first  = self._dump('+', b, blo, bhi)
 *             second = self._dump('-', a, alo, ahi)             # <<<<<<<<<<<<<<
 *         else:
 *             first  = self._dump('-', a, alo, ahi)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_dump); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_2, __pyx_kp_s__6, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 4+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_second = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cydifflib.pyx":1024
 *         # dump the shorter block first -- reduces the burden on short-term
 *         # memory if the blocks are of very different sizes
 *         if bhi - blo < ahi - alo:             # <<<<<<<<<<<<<<
 *             first  = self._dump('+', b, blo, bhi)
 *             second = self._dump('-', a, alo, ahi)
 */
    goto __pyx_L6;
  }

  /* "cydifflib.pyx":1028
 *             second = self._dump('-', a, alo, ahi)
 *         else:
 *             first  = self._dump('-', a, alo, ahi)             # <<<<<<<<<<<<<<
 *             second = self._dump('+', b, blo, bhi)
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_dump); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_2, __pyx_kp_s__6, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 4+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_first = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cydifflib.pyx":1029
 *         else:
 *             first  = self._dump('-', a, alo, ahi)
 *             second = self._dump('+', b, blo, bhi)             # <<<<<<<<<<<<<<
 * 
 *         for g in first, second:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_dump); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_2, __pyx_kp_s__7, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 4+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_second = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __pyx_L6:;

  /* "cydifflib.pyx":1031
 *             second = self._dump('+', b, blo, bhi)
 * 
 *         for g in first, second:             # <<<<<<<<<<<<<<
 *             yield from g
 * 
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_first);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_first);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_cur_scope->__pyx_v_first);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_second);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_second);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_cur_scope->__pyx_v_second);
  __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_7 >= 2) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1031, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_g);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_g, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "cydifflib.pyx":1032
 * 
 *         for g in first, second:
 *             yield from g             # <<<<<<<<<<<<<<
 * 
 *     def _fancy_replace(self, a, alo, ahi, b, blo, bhi):
 */
    __pyx_r = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_cur_scope->__pyx_v_g);
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_t_4);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_4;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_7;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield_from:;
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_4);
      __pyx_t_7 = __pyx_cur_scope->__pyx_t_1;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1032, __pyx_L1_error)
    } else {
      PyObject* exc_type = __Pyx_PyErr_Occurred();
      if (exc_type) {
        if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
        else __PYX_ERR(0, 1032, __pyx_L1_error)
      }
    }

    /* "cydifflib.pyx":1031
 *             second = self._dump('+', b, blo, bhi)
 * 
 *         for g in first, second:             # <<<<<<<<<<<<<<
 *             yield from g
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1020
 *             yield '%s %s' % (tag, x[i])
 * 
 *     def _plain_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         assert alo < ahi and blo < bhi
 *         # dump the shorter block first -- reduces the burden on short-term
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_plain_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_6Differ_13generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1034
 *             yield from g
 * 
 *     def _fancy_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         r"""
 *         When replacing one block of lines with another, search the blocks
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6Differ_12_fancy_replace(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_6Differ_11_fancy_replace, "\n        When replacing one block of lines with another, search the blocks\n        for *similar* lines; the best-matching pair (if any) is used as a\n        synch point, and intraline difference marking is done on the\n        similar pair. Lots of work, but often worth it.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._fancy_replace(['abcDefghiJkl\\n'], 0, 1,\n        ...                            ['abcdefGhijkl\\n'], 0, 1)\n        >>> print(''.join(results), end=\"\")\n        - abcDefghiJkl\n        ?    ^  ^  ^\n        + abcdefGhijkl\n        ?    ^  ^  ^\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_6Differ_12_fancy_replace = {"_fancy_replace", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_6Differ_12_fancy_replace, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_6Differ_11_fancy_replace};
static PyObject *__pyx_pw_9cydifflib_6Differ_12_fancy_replace(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_alo = 0;
  PyObject *__pyx_v_ahi = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_blo = 0;
  PyObject *__pyx_v_bhi = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fancy_replace (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_a,&__pyx_n_s_alo,&__pyx_n_s_ahi,&__pyx_n_s_b,&__pyx_n_s_blo,&__pyx_n_s_bhi,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_a,&__pyx_n_s_alo,&__pyx_n_s_ahi,&__pyx_n_s_b,&__pyx_n_s_blo,&__pyx_n_s_bhi,0};
    #endif
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_replace", 1, 7, 7, 1); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alo)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_replace", 1, 7, 7, 2); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ahi)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_replace", 1, 7, 7, 3); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_replace", 1, 7, 7, 4); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_blo)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_replace", 1, 7, 7, 5); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bhi)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_replace", 1, 7, 7, 6); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_fancy_replace") < 0)) __PYX_ERR(0, 1034, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 7)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
      values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
    }
    __pyx_v_self = values[0];
    __pyx_v_a = values[1];
    __pyx_v_alo = values[2];
    __pyx_v_ahi = values[3];
    __pyx_v_b = values[4];
    __pyx_v_blo = values[5];
    __pyx_v_bhi = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_fancy_replace", 1, 7, 7, __pyx_nargs); __PYX_ERR(0, 1034, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.Differ._fancy_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6Differ_11_fancy_replace(__pyx_self, __pyx_v_self, __pyx_v_a, __pyx_v_alo, __pyx_v_ahi, __pyx_v_b, __pyx_v_blo, __pyx_v_bhi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6Differ_11_fancy_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_alo, PyObject *__pyx_v_ahi, PyObject *__pyx_v_b, PyObject *__pyx_v_blo, PyObject *__pyx_v_bhi) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fancy_replace", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *)__pyx_tp_new_9cydifflib___pyx_scope_struct_8__fancy_replace(__pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1034, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_a = __pyx_v_a;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  __pyx_cur_scope->__pyx_v_alo = __pyx_v_alo;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_alo);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_alo);
  __pyx_cur_scope->__pyx_v_ahi = __pyx_v_ahi;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ahi);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ahi);
  __pyx_cur_scope->__pyx_v_b = __pyx_v_b;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  __pyx_cur_scope->__pyx_v_blo = __pyx_v_blo;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_blo);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_blo);
  __pyx_cur_scope->__pyx_v_bhi = __pyx_v_bhi;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_bhi);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_bhi);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_6Differ_13generator4, __pyx_codeobj__10, (PyObject *) __pyx_cur_scope, __pyx_n_s_fancy_replace, __pyx_n_s_Differ__fancy_replace, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1034, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.Differ._fancy_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_6Differ_13generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *(*__pyx_t_17)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fancy_replace", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L16_resume_from_yield_from;
    case 2: goto __pyx_L17_resume_from_yield_from;
    case 3: goto __pyx_L24_resume_from_yield_from;
    case 4: goto __pyx_L25_resume_from_yield;
    case 5: goto __pyx_L26_resume_from_yield_from;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1034, __pyx_L1_error)

  /* "cydifflib.pyx":1055
 *         # don't synch up unless the lines have a similarity score of at
 *         # least cutoff; best_ratio tracks the best score seen so far
 *         best_ratio, cutoff = 0.74, 0.75             # <<<<<<<<<<<<<<
 *         cruncher = SequenceMatcher(self.charjunk)
 *         eqi, eqj = None, None   # 1st indices of equal lines (if any)
 */
  __pyx_t_1 = __pyx_float_0_74;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = 0.75;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_best_ratio = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_cur_scope->__pyx_v_cutoff = __pyx_t_2;

  /* "cydifflib.pyx":1056
 *         # least cutoff; best_ratio tracks the best score seen so far
 *         best_ratio, cutoff = 0.74, 0.75
 *         cruncher = SequenceMatcher(self.charjunk)             # <<<<<<<<<<<<<<
 *         eqi, eqj = None, None   # 1st indices of equal lines (if any)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_charjunk); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_cruncher = ((struct __pyx_obj_9cydifflib_SequenceMatcher *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cydifflib.pyx":1057
 *         best_ratio, cutoff = 0.74, 0.75
 *         cruncher = SequenceMatcher(self.charjunk)
 *         eqi, eqj = None, None   # 1st indices of equal lines (if any)             # <<<<<<<<<<<<<<
 * 
 *         # search for the pair that matches best without being identical
 */
  __pyx_t_3 = Py_None;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = Py_None;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_eqi = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_eqj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1062
 *         # (identical lines must be junk lines, & we don't want to synch up
 *         # on junk -- unless we have to)
 *         for j in range(blo, bhi):             # <<<<<<<<<<<<<<
 *             bj = b[j]
 *             cruncher.set_seq2(bj)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_blo);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_blo);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_blo);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_bhi);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_bhi);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_bhi);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1062, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 1062, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 1062, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1062, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1063
 *         # on junk -- unless we have to)
 *         for j in range(blo, bhi):
 *             bj = b[j]             # <<<<<<<<<<<<<<
 *             cruncher.set_seq2(bj)
 *             for i in range(alo, ahi):
 */
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bj);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bj, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1064
 *         for j in range(blo, bhi):
 *             bj = b[j]
 *             cruncher.set_seq2(bj)             # <<<<<<<<<<<<<<
 *             for i in range(alo, ahi):
 *                 ai = a[i]
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_cur_scope->__pyx_v_cruncher->__pyx_vtab)->set_seq2(__pyx_cur_scope->__pyx_v_cruncher, __pyx_cur_scope->__pyx_v_bj, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cydifflib.pyx":1065
 *             bj = b[j]
 *             cruncher.set_seq2(bj)
 *             for i in range(alo, ahi):             # <<<<<<<<<<<<<<
 *                 ai = a[i]
 *                 if ai == bj:
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_alo);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_alo);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_alo);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ahi);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ahi);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_cur_scope->__pyx_v_ahi);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_3 = __pyx_t_6; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1065, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1065, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1065, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1065, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1065, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1065, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1065, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1066
 *             cruncher.set_seq2(bj)
 *             for i in range(alo, ahi):
 *                 ai = a[i]             # <<<<<<<<<<<<<<
 *                 if ai == bj:
 *                     if eqi is None:
 */
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ai);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ai, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1067
 *             for i in range(alo, ahi):
 *                 ai = a[i]
 *                 if ai == bj:             # <<<<<<<<<<<<<<
 *                     if eqi is None:
 *                         eqi, eqj = i, j
 */
      __pyx_t_6 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ai, __pyx_cur_scope->__pyx_v_bj, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_9) {

        /* "cydifflib.pyx":1068
 *                 ai = a[i]
 *                 if ai == bj:
 *                     if eqi is None:             # <<<<<<<<<<<<<<
 *                         eqi, eqj = i, j
 *                     continue
 */
        __pyx_t_9 = (__pyx_cur_scope->__pyx_v_eqi == Py_None);
        __pyx_t_10 = (__pyx_t_9 != 0);
        if (__pyx_t_10) {

          /* "cydifflib.pyx":1069
 *                 if ai == bj:
 *                     if eqi is None:
 *                         eqi, eqj = i, j             # <<<<<<<<<<<<<<
 *                     continue
 *                 cruncher.set_seq1(ai)
 */
          __pyx_t_6 = __pyx_cur_scope->__pyx_v_i;
          __Pyx_INCREF(__pyx_t_6);
          __pyx_t_11 = __pyx_cur_scope->__pyx_v_j;
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_eqi);
          __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_eqi, __pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_eqj);
          __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_eqj, __pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_11);
          __pyx_t_11 = 0;

          /* "cydifflib.pyx":1068
 *                 ai = a[i]
 *                 if ai == bj:
 *                     if eqi is None:             # <<<<<<<<<<<<<<
 *                         eqi, eqj = i, j
 *                     continue
 */
        }

        /* "cydifflib.pyx":1070
 *                     if eqi is None:
 *                         eqi, eqj = i, j
 *                     continue             # <<<<<<<<<<<<<<
 *                 cruncher.set_seq1(ai)
 *                 # computing similarity is expensive, so use the quick
 */
        goto __pyx_L6_continue;

        /* "cydifflib.pyx":1067
 *             for i in range(alo, ahi):
 *                 ai = a[i]
 *                 if ai == bj:             # <<<<<<<<<<<<<<
 *                     if eqi is None:
 *                         eqi, eqj = i, j
 */
      }

      /* "cydifflib.pyx":1071
 *                         eqi, eqj = i, j
 *                     continue
 *                 cruncher.set_seq1(ai)             # <<<<<<<<<<<<<<
 *                 # computing similarity is expensive, so use the quick
 *                 # upper bounds first -- have seen this speed up messy
 */
      __pyx_t_11 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_cur_scope->__pyx_v_cruncher->__pyx_vtab)->set_seq1(__pyx_cur_scope->__pyx_v_cruncher, __pyx_cur_scope->__pyx_v_ai, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "cydifflib.pyx":1078
 *                 # time it's called on a sequence pair; the expensive part
 *                 # of the computation is cached by cruncher
 *                 if cruncher.real_quick_ratio() > best_ratio and \             # <<<<<<<<<<<<<<
 *                       cruncher.quick_ratio() > best_ratio and \
 *                       cruncher.ratio() > best_ratio:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_cruncher), __pyx_n_s_real_quick_ratio); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1078, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_12, };
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1078, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_11, __pyx_cur_scope->__pyx_v_best_ratio, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1078, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1078, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_10 = __pyx_t_9;
        goto __pyx_L11_bool_binop_done;
      }

      /* "cydifflib.pyx":1079
 *                 # of the computation is cached by cruncher
 *                 if cruncher.real_quick_ratio() > best_ratio and \
 *                       cruncher.quick_ratio() > best_ratio and \             # <<<<<<<<<<<<<<
 *                       cruncher.ratio() > best_ratio:
 *                     best_ratio, best_i, best_j = cruncher.ratio(), i, j
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_cruncher), __pyx_n_s_quick_ratio); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1079, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_12, };
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1079, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = PyObject_RichCompare(__pyx_t_6, __pyx_cur_scope->__pyx_v_best_ratio, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1079, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1079, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_10 = __pyx_t_9;
        goto __pyx_L11_bool_binop_done;
      }

      /* "cydifflib.pyx":1080
 *                 if cruncher.real_quick_ratio() > best_ratio and \
 *                       cruncher.quick_ratio() > best_ratio and \
 *                       cruncher.ratio() > best_ratio:             # <<<<<<<<<<<<<<
 *                     best_ratio, best_i, best_j = cruncher.ratio(), i, j
 *         if best_ratio < cutoff:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_cruncher), __pyx_n_s_ratio); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1080, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_12, };
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1080, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_11, __pyx_cur_scope->__pyx_v_best_ratio, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1080, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1080, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_10 = __pyx_t_9;
      __pyx_L11_bool_binop_done:;

      /* "cydifflib.pyx":1078
 *                 # time it's called on a sequence pair; the expensive part
 *                 # of the computation is cached by cruncher
 *                 if cruncher.real_quick_ratio() > best_ratio and \             # <<<<<<<<<<<<<<
 *                       cruncher.quick_ratio() > best_ratio and \
 *                       cruncher.ratio() > best_ratio:
 */
      if (__pyx_t_10) {

        /* "cydifflib.pyx":1081
 *                       cruncher.quick_ratio() > best_ratio and \
 *                       cruncher.ratio() > best_ratio:
 *                     best_ratio, best_i, best_j = cruncher.ratio(), i, j             # <<<<<<<<<<<<<<
 *         if best_ratio < cutoff:
 *             # no non-identical "pretty close" pair
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_cruncher), __pyx_n_s_ratio); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1081, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_12, };
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1081, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = __pyx_cur_scope->__pyx_v_i;
        __Pyx_INCREF(__pyx_t_11);
        __pyx_t_12 = __pyx_cur_scope->__pyx_v_j;
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_best_ratio);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_best_ratio, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_best_i);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_best_i, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_best_j);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_best_j, __pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_12);
        __pyx_t_12 = 0;

        /* "cydifflib.pyx":1078
 *                 # time it's called on a sequence pair; the expensive part
 *                 # of the computation is cached by cruncher
 *                 if cruncher.real_quick_ratio() > best_ratio and \             # <<<<<<<<<<<<<<
 *                       cruncher.quick_ratio() > best_ratio and \
 *                       cruncher.ratio() > best_ratio:
 */
      }

      /* "cydifflib.pyx":1065
 *             bj = b[j]
 *             cruncher.set_seq2(bj)
 *             for i in range(alo, ahi):             # <<<<<<<<<<<<<<
 *                 ai = a[i]
 *                 if ai == bj:
 */
      __pyx_L6_continue:;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cydifflib.pyx":1062
 *         # (identical lines must be junk lines, & we don't want to synch up
 *         # on junk -- unless we have to)
 *         for j in range(blo, bhi):             # <<<<<<<<<<<<<<
 *             bj = b[j]
 *             cruncher.set_seq2(bj)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":1082
 *                       cruncher.ratio() > best_ratio:
 *                     best_ratio, best_i, best_j = cruncher.ratio(), i, j
 *         if best_ratio < cutoff:             # <<<<<<<<<<<<<<
 *             # no non-identical "pretty close" pair
 *             if eqi is None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_cutoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_best_ratio, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_10) {

    /* "cydifflib.pyx":1084
 *         if best_ratio < cutoff:
 *             # no non-identical "pretty close" pair
 *             if eqi is None:             # <<<<<<<<<<<<<<
 *                 # no identical pair either -- treat it as a straight replace
 *                 yield from self._plain_replace(a, alo, ahi, b, blo, bhi)
 */
    __pyx_t_10 = (__pyx_cur_scope->__pyx_v_eqi == Py_None);
    __pyx_t_9 = (__pyx_t_10 != 0);
    if (__pyx_t_9) {

      /* "cydifflib.pyx":1086
 *             if eqi is None:
 *                 # no identical pair either -- treat it as a straight replace
 *                 yield from self._plain_replace(a, alo, ahi, b, blo, bhi)             # <<<<<<<<<<<<<<
 *                 return
 *             # no close pair, but an identical pair -- synch up on that
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_plain_replace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[7] = {__pyx_t_12, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 6+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_r = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L16_resume_from_yield_from:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1086, __pyx_L1_error)
      } else {
        PyObject* exc_type = __Pyx_PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
          else __PYX_ERR(0, 1086, __pyx_L1_error)
        }
      }

      /* "cydifflib.pyx":1087
 *                 # no identical pair either -- treat it as a straight replace
 *                 yield from self._plain_replace(a, alo, ahi, b, blo, bhi)
 *                 return             # <<<<<<<<<<<<<<
 *             # no close pair, but an identical pair -- synch up on that
 *             best_i, best_j, best_ratio = eqi, eqj, 1.0
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "cydifflib.pyx":1084
 *         if best_ratio < cutoff:
 *             # no non-identical "pretty close" pair
 *             if eqi is None:             # <<<<<<<<<<<<<<
 *                 # no identical pair either -- treat it as a straight replace
 *                 yield from self._plain_replace(a, alo, ahi, b, blo, bhi)
 */
    }

    /* "cydifflib.pyx":1089
 *                 return
 *             # no close pair, but an identical pair -- synch up on that
 *             best_i, best_j, best_ratio = eqi, eqj, 1.0             # <<<<<<<<<<<<<<
 *         else:
 *             # there's a close pair, so forget the identical pair (if any)
 */
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_eqi;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_eqj;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_12 = __pyx_float_1_0;
    __Pyx_INCREF(__pyx_t_12);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_best_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_best_i, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_best_j);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_best_j, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_best_ratio);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_best_ratio, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_12);
    __pyx_t_12 = 0;

    /* "cydifflib.pyx":1082
 *                       cruncher.ratio() > best_ratio:
 *                     best_ratio, best_i, best_j = cruncher.ratio(), i, j
 *         if best_ratio < cutoff:             # <<<<<<<<<<<<<<
 *             # no non-identical "pretty close" pair
 *             if eqi is None:
 */
    goto __pyx_L14;
  }

  /* "cydifflib.pyx":1092
 *         else:
 *             # there's a close pair, so forget the identical pair (if any)
 *             eqi = None             # <<<<<<<<<<<<<<
 * 
 *         # a[best_i] very similar to b[best_j]; eqi is None iff they're not
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_eqi);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_eqi, Py_None);
    __Pyx_GIVEREF(Py_None);
  }
  __pyx_L14:;

  /* "cydifflib.pyx":1098
 * 
 *         # pump out diffs from before the synch point
 *         yield from self._fancy_helper(a, alo, best_i, b, blo, best_j)             # <<<<<<<<<<<<<<
 * 
 *         # do intraline marking on the synch pair
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_fancy_helper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_best_i)) { __Pyx_RaiseUnboundLocalError("best_i"); __PYX_ERR(0, 1098, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_best_j)) { __Pyx_RaiseUnboundLocalError("best_j"); __PYX_ERR(0, 1098, __pyx_L1_error) }
  __pyx_t_3 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_13 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[7] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_best_i, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_best_j};
    __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 6+__pyx_t_13);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_t_12);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 2;
    return __pyx_r;
    __pyx_L17_resume_from_yield_from:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1098, __pyx_L1_error)
  } else {
    PyObject* exc_type = __Pyx_PyErr_Occurred();
    if (exc_type) {
      if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
      else __PYX_ERR(0, 1098, __pyx_L1_error)
    }
  }

  /* "cydifflib.pyx":1101
 * 
 *         # do intraline marking on the synch pair
 *         aelt, belt = a[best_i], b[best_j]             # <<<<<<<<<<<<<<
 *         if eqi is None:
 *             # pump out a '-', '?', '+', '?' quad for the synched lines
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_best_i)) { __Pyx_RaiseUnboundLocalError("best_i"); __PYX_ERR(0, 1101, __pyx_L1_error) }
  __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_best_i); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (unlikely(!__pyx_cur_scope->__pyx_v_best_j)) { __Pyx_RaiseUnboundLocalError("best_j"); __PYX_ERR(0, 1101, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_best_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_cur_scope->__pyx_v_aelt = __pyx_t_12;
  __pyx_t_12 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_belt = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1102
 *         # do intraline marking on the synch pair
 *         aelt, belt = a[best_i], b[best_j]
 *         if eqi is None:             # <<<<<<<<<<<<<<
 *             # pump out a '-', '?', '+', '?' quad for the synched lines
 *             atags = btags = ""
 */
  __pyx_t_9 = (__pyx_cur_scope->__pyx_v_eqi == Py_None);
  __pyx_t_10 = (__pyx_t_9 != 0);
  if (__pyx_t_10) {

    /* "cydifflib.pyx":1104
 *         if eqi is None:
 *             # pump out a '-', '?', '+', '?' quad for the synched lines
 *             atags = btags = ""             # <<<<<<<<<<<<<<
 *             cruncher.set_seqs(aelt, belt)
 *             for tag, ai1, ai2, bj1, bj2 in cruncher.get_opcodes():
 */
    __Pyx_INCREF(__pyx_kp_s_);
    __Pyx_GIVEREF(__pyx_kp_s_);
    __pyx_cur_scope->__pyx_v_atags = __pyx_kp_s_;
    __Pyx_INCREF(__pyx_kp_s_);
    __Pyx_GIVEREF(__pyx_kp_s_);
    __pyx_cur_scope->__pyx_v_btags = __pyx_kp_s_;

    /* "cydifflib.pyx":1105
 *             # pump out a '-', '?', '+', '?' quad for the synched lines
 *             atags = btags = ""
 *             cruncher.set_seqs(aelt, belt)             # <<<<<<<<<<<<<<
 *             for tag, ai1, ai2, bj1, bj2 in cruncher.get_opcodes():
 *                 la, lb = ai2 - ai1, bj2 - bj1
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9cydifflib_SequenceMatcher *)__pyx_cur_scope->__pyx_v_cruncher->__pyx_vtab)->set_seqs(__pyx_cur_scope->__pyx_v_cruncher, __pyx_cur_scope->__pyx_v_aelt, __pyx_cur_scope->__pyx_v_belt, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cydifflib.pyx":1106
 *             atags = btags = ""
 *             cruncher.set_seqs(aelt, belt)
 *             for tag, ai1, ai2, bj1, bj2 in cruncher.get_opcodes():             # <<<<<<<<<<<<<<
 *                 la, lb = ai2 - ai1, bj2 - bj1
 *                 if tag == 'replace':
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_cruncher), __pyx_n_s_get_opcodes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_3 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_13 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_12 = __pyx_t_1; __Pyx_INCREF(__pyx_t_12); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1106, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_12))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 1106, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 1106, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_5(__pyx_t_12);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1106, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 5)) {
          if (size > 5) __Pyx_RaiseTooManyValuesError(5);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1106, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_14 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_15 = PyTuple_GET_ITEM(sequence, 4); 
        } else {
          __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_14 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_15 = PyList_GET_ITEM(sequence, 4); 
        }
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_15);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_11,&__pyx_t_6,&__pyx_t_14,&__pyx_t_15};
          for (i=0; i < 5; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1106, __pyx_L1_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_11,&__pyx_t_6,&__pyx_t_14,&__pyx_t_15};
        __pyx_t_16 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1106, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_17 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16);
        for (index=0; index < 5; index++) {
          PyObject* item = __pyx_t_17(__pyx_t_16); if (unlikely(!item)) goto __pyx_L21_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_16), 5) < 0) __PYX_ERR(0, 1106, __pyx_L1_error)
        __pyx_t_17 = NULL;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        goto __pyx_L22_unpacking_done;
        __pyx_L21_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_17 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1106, __pyx_L1_error)
        __pyx_L22_unpacking_done:;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ai1);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ai1, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ai2);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ai2, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bj1);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bj1, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bj2);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bj2, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      __pyx_t_15 = 0;

      /* "cydifflib.pyx":1107
 *             cruncher.set_seqs(aelt, belt)
 *             for tag, ai1, ai2, bj1, bj2 in cruncher.get_opcodes():
 *                 la, lb = ai2 - ai1, bj2 - bj1             # <<<<<<<<<<<<<<
 *                 if tag == 'replace':
 *                     atags += '^' * la
 */
      __pyx_t_1 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_ai2, __pyx_cur_scope->__pyx_v_ai1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_15 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_bj2, __pyx_cur_scope->__pyx_v_bj1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_la);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_la, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_lb);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_lb, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      __pyx_t_15 = 0;

      /* "cydifflib.pyx":1108
 *             for tag, ai1, ai2, bj1, bj2 in cruncher.get_opcodes():
 *                 la, lb = ai2 - ai1, bj2 - bj1
 *                 if tag == 'replace':             # <<<<<<<<<<<<<<
 *                     atags += '^' * la
 *                     btags += '^' * lb
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_replace, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1108, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "cydifflib.pyx":1109
 *                 la, lb = ai2 - ai1, bj2 - bj1
 *                 if tag == 'replace':
 *                     atags += '^' * la             # <<<<<<<<<<<<<<
 *                     btags += '^' * lb
 *                 elif tag == 'delete':
 */
        __pyx_t_15 = PyNumber_Multiply(__pyx_kp_s__11, __pyx_cur_scope->__pyx_v_la); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_atags, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_atags);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_atags, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;

        /* "cydifflib.pyx":1110
 *                 if tag == 'replace':
 *                     atags += '^' * la
 *                     btags += '^' * lb             # <<<<<<<<<<<<<<
 *                 elif tag == 'delete':
 *                     atags += '-' * la
 */
        __pyx_t_1 = PyNumber_Multiply(__pyx_kp_s__11, __pyx_cur_scope->__pyx_v_lb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_15 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_btags, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_btags);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_btags, __pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_15);
        __pyx_t_15 = 0;

        /* "cydifflib.pyx":1108
 *             for tag, ai1, ai2, bj1, bj2 in cruncher.get_opcodes():
 *                 la, lb = ai2 - ai1, bj2 - bj1
 *                 if tag == 'replace':             # <<<<<<<<<<<<<<
 *                     atags += '^' * la
 *                     btags += '^' * lb
 */
        goto __pyx_L23;
      }

      /* "cydifflib.pyx":1111
 *                     atags += '^' * la
 *                     btags += '^' * lb
 *                 elif tag == 'delete':             # <<<<<<<<<<<<<<
 *                     atags += '-' * la
 *                 elif tag == 'insert':
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_delete, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1111, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "cydifflib.pyx":1112
 *                     btags += '^' * lb
 *                 elif tag == 'delete':
 *                     atags += '-' * la             # <<<<<<<<<<<<<<
 *                 elif tag == 'insert':
 *                     btags += '+' * lb
 */
        __pyx_t_15 = PyNumber_Multiply(__pyx_kp_s__6, __pyx_cur_scope->__pyx_v_la); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_atags, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_atags);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_atags, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;

        /* "cydifflib.pyx":1111
 *                     atags += '^' * la
 *                     btags += '^' * lb
 *                 elif tag == 'delete':             # <<<<<<<<<<<<<<
 *                     atags += '-' * la
 *                 elif tag == 'insert':
 */
        goto __pyx_L23;
      }

      /* "cydifflib.pyx":1113
 *                 elif tag == 'delete':
 *                     atags += '-' * la
 *                 elif tag == 'insert':             # <<<<<<<<<<<<<<
 *                     btags += '+' * lb
 *                 elif tag == 'equal':
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_insert, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1113, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "cydifflib.pyx":1114
 *                     atags += '-' * la
 *                 elif tag == 'insert':
 *                     btags += '+' * lb             # <<<<<<<<<<<<<<
 *                 elif tag == 'equal':
 *                     atags += ' ' * la
 */
        __pyx_t_1 = PyNumber_Multiply(__pyx_kp_s__7, __pyx_cur_scope->__pyx_v_lb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_15 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_btags, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_btags);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_btags, __pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_15);
        __pyx_t_15 = 0;

        /* "cydifflib.pyx":1113
 *                 elif tag == 'delete':
 *                     atags += '-' * la
 *                 elif tag == 'insert':             # <<<<<<<<<<<<<<
 *                     btags += '+' * lb
 *                 elif tag == 'equal':
 */
        goto __pyx_L23;
      }

      /* "cydifflib.pyx":1115
 *                 elif tag == 'insert':
 *                     btags += '+' * lb
 *                 elif tag == 'equal':             # <<<<<<<<<<<<<<
 *                     atags += ' ' * la
 *                     btags += ' ' * lb
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_equal, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1115, __pyx_L1_error)
      if (likely(__pyx_t_10)) {

        /* "cydifflib.pyx":1116
 *                     btags += '+' * lb
 *                 elif tag == 'equal':
 *                     atags += ' ' * la             # <<<<<<<<<<<<<<
 *                     btags += ' ' * lb
 *                 else:
 */
        __pyx_t_15 = PyNumber_Multiply(__pyx_kp_s__4, __pyx_cur_scope->__pyx_v_la); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_atags, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_atags);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_atags, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;

        /* "cydifflib.pyx":1117
 *                 elif tag == 'equal':
 *                     atags += ' ' * la
 *                     btags += ' ' * lb             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError('unknown tag %r' % (tag,))
 */
        __pyx_t_1 = PyNumber_Multiply(__pyx_kp_s__4, __pyx_cur_scope->__pyx_v_lb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_15 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_btags, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1117, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_btags);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_btags, __pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_15);
        __pyx_t_15 = 0;

        /* "cydifflib.pyx":1115
 *                 elif tag == 'insert':
 *                     btags += '+' * lb
 *                 elif tag == 'equal':             # <<<<<<<<<<<<<<
 *                     atags += ' ' * la
 *                     btags += ' ' * lb
 */
        goto __pyx_L23;
      }

      /* "cydifflib.pyx":1119
 *                     btags += ' ' * lb
 *                 else:
 *                     raise ValueError('unknown tag %r' % (tag,))             # <<<<<<<<<<<<<<
 *             yield from self._qformat(aelt, belt, atags, btags)
 *         else:
 */
      /*else*/ {
        __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1119, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
        PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_cur_scope->__pyx_v_tag);
        __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_unknown_tag_r, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1119, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1119, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_Raise(__pyx_t_15, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __PYX_ERR(0, 1119, __pyx_L1_error)
      }
      __pyx_L23:;

      /* "cydifflib.pyx":1106
 *             atags = btags = ""
 *             cruncher.set_seqs(aelt, belt)
 *             for tag, ai1, ai2, bj1, bj2 in cruncher.get_opcodes():             # <<<<<<<<<<<<<<
 *                 la, lb = ai2 - ai1, bj2 - bj1
 *                 if tag == 'replace':
 */
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "cydifflib.pyx":1120
 *                 else:
 *                     raise ValueError('unknown tag %r' % (tag,))
 *             yield from self._qformat(aelt, belt, atags, btags)             # <<<<<<<<<<<<<<
 *         else:
 *             # the synch pair is identical
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_qformat); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_1 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_13 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_aelt, __pyx_cur_scope->__pyx_v_belt, __pyx_cur_scope->__pyx_v_atags, __pyx_cur_scope->__pyx_v_btags};
      __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 4+__pyx_t_13);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __pyx_r = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_t_12);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 3;
      return __pyx_r;
      __pyx_L24_resume_from_yield_from:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1120, __pyx_L1_error)
    } else {
      PyObject* exc_type = __Pyx_PyErr_Occurred();
      if (exc_type) {
        if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
        else __PYX_ERR(0, 1120, __pyx_L1_error)
      }
    }

    /* "cydifflib.pyx":1102
 *         # do intraline marking on the synch pair
 *         aelt, belt = a[best_i], b[best_j]
 *         if eqi is None:             # <<<<<<<<<<<<<<
 *             # pump out a '-', '?', '+', '?' quad for the synched lines
 *             atags = btags = ""
 */
    goto __pyx_L18;
  }

  /* "cydifflib.pyx":1123
 *         else:
 *             # the synch pair is identical
 *             yield '  ' + aelt             # <<<<<<<<<<<<<<
 * 
 *         # pump out diffs from after the synch point
 */
  /*else*/ {
    __pyx_t_12 = PyNumber_Add(__pyx_kp_s__12, __pyx_cur_scope->__pyx_v_aelt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_r = __pyx_t_12;
    __pyx_t_12 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 4;
    return __pyx_r;
    __pyx_L25_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1123, __pyx_L1_error)
  }
  __pyx_L18:;

  /* "cydifflib.pyx":1126
 * 
 *         # pump out diffs from after the synch point
 *         yield from self._fancy_helper(a, best_i+1, ahi, b, best_j+1, bhi)             # <<<<<<<<<<<<<<
 * 
 *     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_fancy_helper); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (unlikely(!__pyx_cur_scope->__pyx_v_best_i)) { __Pyx_RaiseUnboundLocalError("best_i"); __PYX_ERR(0, 1126, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_best_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_best_j)) { __Pyx_RaiseUnboundLocalError("best_j"); __PYX_ERR(0, 1126, __pyx_L1_error) }
  __pyx_t_14 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_best_j, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_6 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
      __pyx_t_13 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[7] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_a, __pyx_t_1, __pyx_cur_scope->__pyx_v_ahi, __pyx_cur_scope->__pyx_v_b, __pyx_t_14, __pyx_cur_scope->__pyx_v_bhi};
    __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 6+__pyx_t_13);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __pyx_r = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_t_12);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 5;
    return __pyx_r;
    __pyx_L26_resume_from_yield_from:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1126, __pyx_L1_error)
  } else {
    PyObject* exc_type = __Pyx_PyErr_Occurred();
    if (exc_type) {
      if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
      else __PYX_ERR(0, 1126, __pyx_L1_error)
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1034
 *             yield from g
 * 
 *     def _fancy_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         r"""
 *         When replacing one block of lines with another, search the blocks
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("_fancy_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_6Differ_16generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1128
 *         yield from self._fancy_helper(a, best_i+1, ahi, b, best_j+1, bhi)
 * 
 *     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         g = []
 *         if alo < ahi:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6Differ_15_fancy_helper(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9cydifflib_6Differ_15_fancy_helper = {"_fancy_helper", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_6Differ_15_fancy_helper, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9cydifflib_6Differ_15_fancy_helper(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_alo = 0;
  PyObject *__pyx_v_ahi = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_blo = 0;
  PyObject *__pyx_v_bhi = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fancy_helper (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_a,&__pyx_n_s_alo,&__pyx_n_s_ahi,&__pyx_n_s_b,&__pyx_n_s_blo,&__pyx_n_s_bhi,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_a,&__pyx_n_s_alo,&__pyx_n_s_ahi,&__pyx_n_s_b,&__pyx_n_s_blo,&__pyx_n_s_bhi,0};
    #endif
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1128, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1128, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_helper", 1, 7, 7, 1); __PYX_ERR(0, 1128, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alo)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1128, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_helper", 1, 7, 7, 2); __PYX_ERR(0, 1128, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ahi)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1128, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_helper", 1, 7, 7, 3); __PYX_ERR(0, 1128, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1128, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_helper", 1, 7, 7, 4); __PYX_ERR(0, 1128, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_blo)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1128, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_helper", 1, 7, 7, 5); __PYX_ERR(0, 1128, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bhi)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1128, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_fancy_helper", 1, 7, 7, 6); __PYX_ERR(0, 1128, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_fancy_helper") < 0)) __PYX_ERR(0, 1128, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 7)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
      values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
    }
    __pyx_v_self = values[0];
    __pyx_v_a = values[1];
    __pyx_v_alo = values[2];
    __pyx_v_ahi = values[3];
    __pyx_v_b = values[4];
    __pyx_v_blo = values[5];
    __pyx_v_bhi = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_fancy_helper", 1, 7, 7, __pyx_nargs); __PYX_ERR(0, 1128, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.Differ._fancy_helper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6Differ_14_fancy_helper(__pyx_self, __pyx_v_self, __pyx_v_a, __pyx_v_alo, __pyx_v_ahi, __pyx_v_b, __pyx_v_blo, __pyx_v_bhi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6Differ_14_fancy_helper(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_alo, PyObject *__pyx_v_ahi, PyObject *__pyx_v_b, PyObject *__pyx_v_blo, PyObject *__pyx_v_bhi) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fancy_helper", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *)__pyx_tp_new_9cydifflib___pyx_scope_struct_9__fancy_helper(__pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1128, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_a = __pyx_v_a;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  __pyx_cur_scope->__pyx_v_alo = __pyx_v_alo;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_alo);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_alo);
  __pyx_cur_scope->__pyx_v_ahi = __pyx_v_ahi;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ahi);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ahi);
  __pyx_cur_scope->__pyx_v_b = __pyx_v_b;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  __pyx_cur_scope->__pyx_v_blo = __pyx_v_blo;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_blo);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_blo);
  __pyx_cur_scope->__pyx_v_bhi = __pyx_v_bhi;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_bhi);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_bhi);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_6Differ_16generator5, __pyx_codeobj__13, (PyObject *) __pyx_cur_scope, __pyx_n_s_fancy_helper, __pyx_n_s_Differ__fancy_helper, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.Differ._fancy_helper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_6Differ_16generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fancy_helper", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield_from;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1128, __pyx_L1_error)

  /* "cydifflib.pyx":1129
 * 
 *     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):
 *         g = []             # <<<<<<<<<<<<<<
 *         if alo < ahi:
 *             if blo < bhi:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_g = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1130
 *     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):
 *         g = []
 *         if alo < ahi:             # <<<<<<<<<<<<<<
 *             if blo < bhi:
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "cydifflib.pyx":1131
 *         g = []
 *         if alo < ahi:
 *             if blo < bhi:             # <<<<<<<<<<<<<<
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 *             else:
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "cydifflib.pyx":1132
 *         if alo < ahi:
 *             if blo < bhi:
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)             # <<<<<<<<<<<<<<
 *             else:
 *                 g = self._dump('-', a, alo, ahi)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_fancy_replace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[7] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 6+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_g);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_g, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1131
 *         g = []
 *         if alo < ahi:
 *             if blo < bhi:             # <<<<<<<<<<<<<<
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "cydifflib.pyx":1134
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 *             else:
 *                 g = self._dump('-', a, alo, ahi)             # <<<<<<<<<<<<<<
 *         elif blo < bhi:
 *             g = self._dump('+', b, blo, bhi)
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_dump); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_4, __pyx_kp_s__6, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_alo, __pyx_cur_scope->__pyx_v_ahi};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 4+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_g);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_g, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "cydifflib.pyx":1130
 *     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):
 *         g = []
 *         if alo < ahi:             # <<<<<<<<<<<<<<
 *             if blo < bhi:
 *                 g = self._fancy_replace(a, alo, ahi, b, blo, bhi)
 */
    goto __pyx_L4;
  }

  /* "cydifflib.pyx":1135
 *             else:
 *                 g = self._dump('-', a, alo, ahi)
 *         elif blo < bhi:             # <<<<<<<<<<<<<<
 *             g = self._dump('+', b, blo, bhi)
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "cydifflib.pyx":1136
 *                 g = self._dump('-', a, alo, ahi)
 *         elif blo < bhi:
 *             g = self._dump('+', b, blo, bhi)             # <<<<<<<<<<<<<<
 * 
 *         yield from g
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_dump); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_4, __pyx_kp_s__7, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_blo, __pyx_cur_scope->__pyx_v_bhi};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 4+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_g);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_g, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":1135
 *             else:
 *                 g = self._dump('-', a, alo, ahi)
 *         elif blo < bhi:             # <<<<<<<<<<<<<<
 *             g = self._dump('+', b, blo, bhi)
 * 
 */
  }
  __pyx_L4:;

  /* "cydifflib.pyx":1138
 *             g = self._dump('+', b, blo, bhi)
 * 
 *         yield from g             # <<<<<<<<<<<<<<
 * 
 *     def _qformat(self, aline, bline, atags, btags):
 */
  __pyx_r = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_cur_scope->__pyx_v_g);
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield_from:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1138, __pyx_L1_error)
  } else {
    PyObject* exc_type = __Pyx_PyErr_Occurred();
    if (exc_type) {
      if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
      else __PYX_ERR(0, 1138, __pyx_L1_error)
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1128
 *         yield from self._fancy_helper(a, best_i+1, ahi, b, best_j+1, bhi)
 * 
 *     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         g = []
 *         if alo < ahi:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_fancy_helper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_6Differ_19generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1140
 *         yield from g
 * 
 *     def _qformat(self, aline, bline, atags, btags):             # <<<<<<<<<<<<<<
 *         r"""
 *         Format "?" output and deal with tabs.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6Differ_18_qformat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_6Differ_17_qformat, "\n        Format \"?\" output and deal with tabs.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._qformat('\\tabcDefghiJkl\\n', '\\tabcdefGhijkl\\n',\n        ...                      '  ^ ^  ^      ', '  ^ ^  ^      ')\n        >>> for line in results: print(repr(line))\n        ...\n        '- \\tabcDefghiJkl\\n'\n        '? \\t ^ ^  ^\\n'\n        '+ \\tabcdefGhijkl\\n'\n        '? \\t ^ ^  ^\\n'\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_6Differ_18_qformat = {"_qformat", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_6Differ_18_qformat, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_6Differ_17_qformat};
static PyObject *__pyx_pw_9cydifflib_6Differ_18_qformat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_aline = 0;
  PyObject *__pyx_v_bline = 0;
  PyObject *__pyx_v_atags = 0;
  PyObject *__pyx_v_btags = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_qformat (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_aline,&__pyx_n_s_bline,&__pyx_n_s_atags,&__pyx_n_s_btags,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_aline,&__pyx_n_s_bline,&__pyx_n_s_atags,&__pyx_n_s_btags,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_aline)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_qformat", 1, 5, 5, 1); __PYX_ERR(0, 1140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bline)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_qformat", 1, 5, 5, 2); __PYX_ERR(0, 1140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_atags)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_qformat", 1, 5, 5, 3); __PYX_ERR(0, 1140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_btags)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_qformat", 1, 5, 5, 4); __PYX_ERR(0, 1140, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_qformat") < 0)) __PYX_ERR(0, 1140, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_aline = values[1];
    __pyx_v_bline = values[2];
    __pyx_v_atags = values[3];
    __pyx_v_btags = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_qformat", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 1140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.Differ._qformat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6Differ_17_qformat(__pyx_self, __pyx_v_self, __pyx_v_aline, __pyx_v_bline, __pyx_v_atags, __pyx_v_btags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6Differ_17_qformat(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_aline, PyObject *__pyx_v_bline, PyObject *__pyx_v_atags, PyObject *__pyx_v_btags) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_qformat", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *)__pyx_tp_new_9cydifflib___pyx_scope_struct_10__qformat(__pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1140, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_aline = __pyx_v_aline;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_aline);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_aline);
  __pyx_cur_scope->__pyx_v_bline = __pyx_v_bline;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_bline);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_bline);
  __pyx_cur_scope->__pyx_v_atags = __pyx_v_atags;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_atags);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_atags);
  __pyx_cur_scope->__pyx_v_btags = __pyx_v_btags;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_btags);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_btags);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_6Differ_19generator6, __pyx_codeobj__14, (PyObject *) __pyx_cur_scope, __pyx_n_s_qformat, __pyx_n_s_Differ__qformat, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.Differ._qformat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_6Differ_19generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_qformat", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    case 2: goto __pyx_L6_resume_from_yield;
    case 3: goto __pyx_L7_resume_from_yield;
    case 4: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1140, __pyx_L1_error)

  /* "cydifflib.pyx":1156
 *         '? \t ^ ^  ^\n'
 *         """
 *         atags = _keep_original_ws(aline, atags).rstrip()             # <<<<<<<<<<<<<<
 *         btags = _keep_original_ws(bline, btags).rstrip()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_keep_original_ws); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_aline, __pyx_cur_scope->__pyx_v_atags};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_atags);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_atags, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1157
 *         """
 *         atags = _keep_original_ws(aline, atags).rstrip()
 *         btags = _keep_original_ws(bline, btags).rstrip()             # <<<<<<<<<<<<<<
 * 
 *         yield "- " + aline
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_keep_original_ws); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_bline, __pyx_cur_scope->__pyx_v_btags};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_btags);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_btags, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1159
 *         btags = _keep_original_ws(bline, btags).rstrip()
 * 
 *         yield "- " + aline             # <<<<<<<<<<<<<<
 *         if atags:
 *             yield f"? {atags}\n"
 */
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s__15, __pyx_cur_scope->__pyx_v_aline); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1159, __pyx_L1_error)

  /* "cydifflib.pyx":1160
 * 
 *         yield "- " + aline
 *         if atags:             # <<<<<<<<<<<<<<
 *             yield f"? {atags}\n"
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_atags); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1160, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "cydifflib.pyx":1161
 *         yield "- " + aline
 *         if atags:
 *             yield f"? {atags}\n"             # <<<<<<<<<<<<<<
 * 
 *         yield "+ " + bline
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u__16);
    __pyx_t_7 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__16);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__16);
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_atags, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u__17);
    __pyx_t_7 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__17);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__17);
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 2;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1161, __pyx_L1_error)

    /* "cydifflib.pyx":1160
 * 
 *         yield "- " + aline
 *         if atags:             # <<<<<<<<<<<<<<
 *             yield f"? {atags}\n"
 * 
 */
  }

  /* "cydifflib.pyx":1163
 *             yield f"? {atags}\n"
 * 
 *         yield "+ " + bline             # <<<<<<<<<<<<<<
 *         if btags:
 *             yield f"? {btags}\n"
 */
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s__18, __pyx_cur_scope->__pyx_v_bline); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 3;
  return __pyx_r;
  __pyx_L7_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1163, __pyx_L1_error)

  /* "cydifflib.pyx":1164
 * 
 *         yield "+ " + bline
 *         if btags:             # <<<<<<<<<<<<<<
 *             yield f"? {btags}\n"
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_btags); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1164, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "cydifflib.pyx":1165
 *         yield "+ " + bline
 *         if btags:
 *             yield f"? {btags}\n"             # <<<<<<<<<<<<<<
 * 
 * # With respect to junk, an earlier version of ndiff simply refused to
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u__16);
    __pyx_t_7 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__16);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u__16);
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_btags, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u__17);
    __pyx_t_7 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__17);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__17);
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 4;
    return __pyx_r;
    __pyx_L9_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1165, __pyx_L1_error)

    /* "cydifflib.pyx":1164
 * 
 *         yield "+ " + bline
 *         if btags:             # <<<<<<<<<<<<<<
 *             yield f"? {btags}\n"
 * 
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1140
 *         yield from g
 * 
 *     def _qformat(self, aline, bline, atags, btags):             # <<<<<<<<<<<<<<
 *         r"""
 *         Format "?" output and deal with tabs.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_qformat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1186
 * import re
 * 
 * def IS_LINE_JUNK(line, pat=re.compile(r"\s*(?:#\s*)?$").match):             # <<<<<<<<<<<<<<
 *     r"""
 *     Return True for ignorable line: iff `line` is blank or contains a single '#'.
 */

static PyObject *__pyx_pf_9cydifflib_31__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_pat);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_pat);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_pat);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_5IS_LINE_JUNK(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_4IS_LINE_JUNK, "\n    Return True for ignorable line: iff `line` is blank or contains a single '#'.\n\n    Examples:\n\n    >>> IS_LINE_JUNK('\\n')\n    True\n    >>> IS_LINE_JUNK('  #   \\n')\n    True\n    >>> IS_LINE_JUNK('hello\\n')\n    False\n    ");
static PyMethodDef __pyx_mdef_9cydifflib_5IS_LINE_JUNK = {"IS_LINE_JUNK", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_5IS_LINE_JUNK, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_4IS_LINE_JUNK};
static PyObject *__pyx_pw_9cydifflib_5IS_LINE_JUNK(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_line = 0;
  PyObject *__pyx_v_pat = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IS_LINE_JUNK (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_line,&__pyx_n_s_pat,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_line,&__pyx_n_s_pat,0};
    #endif
    PyObject* values[2] = {0,0};
    __pyx_defaults *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self);
    values[1] = __pyx_dynamic_args->__pyx_arg_pat;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_line)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1186, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pat);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1186, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "IS_LINE_JUNK") < 0)) __PYX_ERR(0, 1186, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_line = values[0];
    __pyx_v_pat = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("IS_LINE_JUNK", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1186, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.IS_LINE_JUNK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_4IS_LINE_JUNK(__pyx_self, __pyx_v_line, __pyx_v_pat);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_4IS_LINE_JUNK(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_line, PyObject *__pyx_v_pat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("IS_LINE_JUNK", 0);

  /* "cydifflib.pyx":1200
 *     """
 * 
 *     return pat(line) is not None             # <<<<<<<<<<<<<<
 * 
 * def IS_CHARACTER_JUNK(ch, ws=" \t"):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pat);
  __pyx_t_2 = __pyx_v_pat; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_line};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1186
 * import re
 * 
 * def IS_LINE_JUNK(line, pat=re.compile(r"\s*(?:#\s*)?$").match):             # <<<<<<<<<<<<<<
 *     r"""
 *     Return True for ignorable line: iff `line` is blank or contains a single '#'.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cydifflib.IS_LINE_JUNK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1202
 *     return pat(line) is not None
 * 
 * def IS_CHARACTER_JUNK(ch, ws=" \t"):             # <<<<<<<<<<<<<<
 *     r"""
 *     Return True for ignorable character: iff `ch` is a space or tab.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_7IS_CHARACTER_JUNK(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_6IS_CHARACTER_JUNK, "\n    Return True for ignorable character: iff `ch` is a space or tab.\n\n    Examples:\n\n    >>> IS_CHARACTER_JUNK(' ')\n    True\n    >>> IS_CHARACTER_JUNK('\\t')\n    True\n    >>> IS_CHARACTER_JUNK('\\n')\n    False\n    >>> IS_CHARACTER_JUNK('x')\n    False\n    ");
static PyMethodDef __pyx_mdef_9cydifflib_7IS_CHARACTER_JUNK = {"IS_CHARACTER_JUNK", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_7IS_CHARACTER_JUNK, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_6IS_CHARACTER_JUNK};
static PyObject *__pyx_pw_9cydifflib_7IS_CHARACTER_JUNK(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ch = 0;
  PyObject *__pyx_v_ws = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IS_CHARACTER_JUNK (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ch,&__pyx_n_s_ws,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ch,&__pyx_n_s_ws,0};
    #endif
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject*)__pyx_kp_s__19));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ch)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1202, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ws);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1202, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "IS_CHARACTER_JUNK") < 0)) __PYX_ERR(0, 1202, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ch = values[0];
    __pyx_v_ws = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("IS_CHARACTER_JUNK", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1202, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.IS_CHARACTER_JUNK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6IS_CHARACTER_JUNK(__pyx_self, __pyx_v_ch, __pyx_v_ws);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6IS_CHARACTER_JUNK(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ch, PyObject *__pyx_v_ws) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("IS_CHARACTER_JUNK", 0);

  /* "cydifflib.pyx":1218
 *     """
 * 
 *     return ch in ws             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_ch, __pyx_v_ws, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1218, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1202
 *     return pat(line) is not None
 * 
 * def IS_CHARACTER_JUNK(ch, ws=" \t"):             # <<<<<<<<<<<<<<
 *     r"""
 *     Return True for ignorable character: iff `ch` is a space or tab.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib.IS_CHARACTER_JUNK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1225
 * ########################################################################
 * 
 * def _format_range_unified(start, stop):             # <<<<<<<<<<<<<<
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_9_format_range_unified(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8_format_range_unified, "Convert range to the \"ed\" format");
static PyMethodDef __pyx_mdef_9cydifflib_9_format_range_unified = {"_format_range_unified", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_9_format_range_unified, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8_format_range_unified};
static PyObject *__pyx_pw_9cydifflib_9_format_range_unified(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_format_range_unified (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_stop,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_stop,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_start)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1225, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_stop)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1225, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_format_range_unified", 1, 2, 2, 1); __PYX_ERR(0, 1225, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_format_range_unified") < 0)) __PYX_ERR(0, 1225, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_start = values[0];
    __pyx_v_stop = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_format_range_unified", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib._format_range_unified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8_format_range_unified(__pyx_self, __pyx_v_start, __pyx_v_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8_format_range_unified(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_start, PyObject *__pyx_v_stop) {
  PyObject *__pyx_v_beginning = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_format_range_unified", 0);

  /* "cydifflib.pyx":1228
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 *     beginning = start + 1     # lines start numbering with one             # <<<<<<<<<<<<<<
 *     length = stop - start
 *     if length == 1:
 */
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_start, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_beginning = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1229
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 *     beginning = start + 1     # lines start numbering with one
 *     length = stop - start             # <<<<<<<<<<<<<<
 *     if length == 1:
 *         return '{}'.format(beginning)
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_stop, __pyx_v_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_length = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1230
 *     beginning = start + 1     # lines start numbering with one
 *     length = stop - start
 *     if length == 1:             # <<<<<<<<<<<<<<
 *         return '{}'.format(beginning)
 *     if not length:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_length, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "cydifflib.pyx":1231
 *     length = stop - start
 *     if length == 1:
 *         return '{}'.format(beginning)             # <<<<<<<<<<<<<<
 *     if not length:
 *         beginning -= 1        # empty ranges begin at line just before the range
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__20, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_beginning};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cydifflib.pyx":1230
 *     beginning = start + 1     # lines start numbering with one
 *     length = stop - start
 *     if length == 1:             # <<<<<<<<<<<<<<
 *         return '{}'.format(beginning)
 *     if not length:
 */
  }

  /* "cydifflib.pyx":1232
 *     if length == 1:
 *         return '{}'.format(beginning)
 *     if not length:             # <<<<<<<<<<<<<<
 *         beginning -= 1        # empty ranges begin at line just before the range
 *     return '{},{}'.format(beginning, length)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_length); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1232, __pyx_L1_error)
  __pyx_t_6 = ((!__pyx_t_2) != 0);
  if (__pyx_t_6) {

    /* "cydifflib.pyx":1233
 *         return '{}'.format(beginning)
 *     if not length:
 *         beginning -= 1        # empty ranges begin at line just before the range             # <<<<<<<<<<<<<<
 *     return '{},{}'.format(beginning, length)
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_beginning, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_beginning, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":1232
 *     if length == 1:
 *         return '{}'.format(beginning)
 *     if not length:             # <<<<<<<<<<<<<<
 *         beginning -= 1        # empty ranges begin at line just before the range
 *     return '{},{}'.format(beginning, length)
 */
  }

  /* "cydifflib.pyx":1234
 *     if not length:
 *         beginning -= 1        # empty ranges begin at line just before the range
 *     return '{},{}'.format(beginning, length)             # <<<<<<<<<<<<<<
 * 
 * def unified_diff(a, b, fromfile='', tofile='', fromfiledate='',
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__21, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_beginning, __pyx_v_length};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1225
 * ########################################################################
 * 
 * def _format_range_unified(start, stop):             # <<<<<<<<<<<<<<
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cydifflib._format_range_unified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_beginning);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_12generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1236
 *     return '{},{}'.format(beginning, length)
 * 
 * def unified_diff(a, b, fromfile='', tofile='', fromfiledate='',             # <<<<<<<<<<<<<<
 *                  tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_11unified_diff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_10unified_diff, "\n    Compare two sequences of lines; generate the delta as a unified diff.\n\n    Unified diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by 'n' which\n    defaults to three.\n\n    By default, the diff control lines (those with ---, +++, or @@) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to \"\" so that the output will be uniformly newline free.\n\n    The unidiff format normally has a header for filenames and modification\n    times.  Any or all of these may be specified using strings for\n    'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n    The modification times are normally expressed in the ISO 8601 format.\n\n    Example:\n\n    >>> for line in unified_diff('one two three four'.split(),\n    ...             'zero one tree four'.split(), 'Original', 'Current',\n    ...             '2005-01-26 23:30:50', '2010-04-02 10:20:52',\n    ...             lineterm=''):\n    ...     print(line)                 # doctest: +NORMALIZE_WHITESPACE\n    --- Original        2005-01-26 23:30:50\n    +++ Current         2010-04-02 10:20:52\n    @@ -1,4 +1,4 @@\n    +zero\n     one\n    -two\n    -three\n    +tree\n     four\n    ");
static PyMethodDef __pyx_mdef_9cydifflib_11unified_diff = {"unified_diff", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_11unified_diff, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_10unified_diff};
static PyObject *__pyx_pw_9cydifflib_11unified_diff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_fromfile = 0;
  PyObject *__pyx_v_tofile = 0;
  PyObject *__pyx_v_fromfiledate = 0;
  PyObject *__pyx_v_tofiledate = 0;
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_lineterm = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unified_diff (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_fromfile,&__pyx_n_s_tofile,&__pyx_n_s_fromfiledate,&__pyx_n_s_tofiledate,&__pyx_n_s_n,&__pyx_n_s_lineterm,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_fromfile,&__pyx_n_s_tofile,&__pyx_n_s_fromfiledate,&__pyx_n_s_tofiledate,&__pyx_n_s_n,&__pyx_n_s_lineterm,0};
    #endif
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[2] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[3] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[4] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[5] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[6] = ((PyObject *)((PyObject *)__pyx_int_3));
    values[7] = ((PyObject *)((PyObject*)__pyx_kp_s__17));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("unified_diff", 0, 2, 8, 1); __PYX_ERR(0, 1236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromfile);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tofile);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromfiledate);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tofiledate);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lineterm);
          if (value) { values[7] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "unified_diff") < 0)) __PYX_ERR(0, 1236, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
    __pyx_v_fromfile = values[2];
    __pyx_v_tofile = values[3];
    __pyx_v_fromfiledate = values[4];
    __pyx_v_tofiledate = values[5];
    __pyx_v_n = values[6];
    __pyx_v_lineterm = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unified_diff", 0, 2, 8, __pyx_nargs); __PYX_ERR(0, 1236, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.unified_diff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_10unified_diff(__pyx_self, __pyx_v_a, __pyx_v_b, __pyx_v_fromfile, __pyx_v_tofile, __pyx_v_fromfiledate, __pyx_v_tofiledate, __pyx_v_n, __pyx_v_lineterm);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_10unified_diff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_fromfile, PyObject *__pyx_v_tofile, PyObject *__pyx_v_fromfiledate, PyObject *__pyx_v_tofiledate, PyObject *__pyx_v_n, PyObject *__pyx_v_lineterm) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unified_diff", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *)__pyx_tp_new_9cydifflib___pyx_scope_struct_11_unified_diff(__pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1236, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_a = __pyx_v_a;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  __pyx_cur_scope->__pyx_v_b = __pyx_v_b;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  __pyx_cur_scope->__pyx_v_fromfile = __pyx_v_fromfile;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromfile);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fromfile);
  __pyx_cur_scope->__pyx_v_tofile = __pyx_v_tofile;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tofile);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tofile);
  __pyx_cur_scope->__pyx_v_fromfiledate = __pyx_v_fromfiledate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromfiledate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fromfiledate);
  __pyx_cur_scope->__pyx_v_tofiledate = __pyx_v_tofiledate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tofiledate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tofiledate);
  __pyx_cur_scope->__pyx_v_n = __pyx_v_n;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_n);
  __pyx_cur_scope->__pyx_v_lineterm = __pyx_v_lineterm;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lineterm);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lineterm);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_12generator7, __pyx_codeobj__22, (PyObject *) __pyx_cur_scope, __pyx_n_s_unified_diff, __pyx_n_s_unified_diff, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1236, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.unified_diff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_12generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  Py_ssize_t __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  int __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unified_diff", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    case 2: goto __pyx_L8_resume_from_yield;
    case 3: goto __pyx_L9_resume_from_yield;
    case 4: goto __pyx_L17_resume_from_yield;
    case 5: goto __pyx_L23_resume_from_yield;
    case 6: goto __pyx_L29_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1236, __pyx_L1_error)

  /* "cydifflib.pyx":1277
 *     """
 * 
 *     _check_types(a, b, fromfile, tofile, fromfiledate, tofiledate, lineterm)             # <<<<<<<<<<<<<<
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_check_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[8] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_fromfile, __pyx_cur_scope->__pyx_v_tofile, __pyx_cur_scope->__pyx_v_fromfiledate, __pyx_cur_scope->__pyx_v_tofiledate, __pyx_cur_scope->__pyx_v_lineterm};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 7+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":1278
 * 
 *     _check_types(a, b, fromfile, tofile, fromfiledate, tofiledate, lineterm)
 *     started = False             # <<<<<<<<<<<<<<
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 *         if not started:
 */
  __pyx_cur_scope->__pyx_v_started = 0;

  /* "cydifflib.pyx":1279
 *     _check_types(a, b, fromfile, tofile, fromfiledate, tofiledate, lineterm)
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):             # <<<<<<<<<<<<<<
 *         if not started:
 *             started = True
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 0, Py_None);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_a);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_b);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_grouped_opcodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_n};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1279, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1279, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1279, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1279, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1279, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1279, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_group);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_group, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":1280
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 *         if not started:             # <<<<<<<<<<<<<<
 *             started = True
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 */
    __pyx_t_7 = ((!(__pyx_cur_scope->__pyx_v_started != 0)) != 0);
    if (__pyx_t_7) {

      /* "cydifflib.pyx":1281
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 *         if not started:
 *             started = True             # <<<<<<<<<<<<<<
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''
 */
      __pyx_cur_scope->__pyx_v_started = 1;

      /* "cydifflib.pyx":1282
 *         if not started:
 *             started = True
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''             # <<<<<<<<<<<<<<
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''
 *             yield '--- {}{}{}'.format(fromfile, fromdate, lineterm)
 */
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_fromfiledate); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1282, __pyx_L1_error)
      if (__pyx_t_7) {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__23, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1282, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_fromfiledate};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1282, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_1 = __pyx_t_3;
        __pyx_t_3 = 0;
      } else {
        __Pyx_INCREF(__pyx_kp_s_);
        __pyx_t_1 = __pyx_kp_s_;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fromdate);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fromdate, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1283
 *             started = True
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''             # <<<<<<<<<<<<<<
 *             yield '--- {}{}{}'.format(fromfile, fromdate, lineterm)
 *             yield '+++ {}{}{}'.format(tofile, todate, lineterm)
 */
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_tofiledate); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1283, __pyx_L1_error)
      if (__pyx_t_7) {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__23, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1283, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_tofiledate};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_1 = __pyx_t_3;
        __pyx_t_3 = 0;
      } else {
        __Pyx_INCREF(__pyx_kp_s_);
        __pyx_t_1 = __pyx_kp_s_;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_todate);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_todate, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1284
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''
 *             yield '--- {}{}{}'.format(fromfile, fromdate, lineterm)             # <<<<<<<<<<<<<<
 *             yield '+++ {}{}{}'.format(tofile, todate, lineterm)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__24, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_8, __pyx_cur_scope->__pyx_v_fromfile, __pyx_cur_scope->__pyx_v_fromdate, __pyx_cur_scope->__pyx_v_lineterm};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1284, __pyx_L1_error)

      /* "cydifflib.pyx":1285
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''
 *             yield '--- {}{}{}'.format(fromfile, fromdate, lineterm)
 *             yield '+++ {}{}{}'.format(tofile, todate, lineterm)             # <<<<<<<<<<<<<<
 * 
 *         first, last = group[0], group[-1]
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__25, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_8, __pyx_cur_scope->__pyx_v_tofile, __pyx_cur_scope->__pyx_v_todate, __pyx_cur_scope->__pyx_v_lineterm};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L8_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1285, __pyx_L1_error)

      /* "cydifflib.pyx":1280
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 *         if not started:             # <<<<<<<<<<<<<<
 *             started = True
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 */
    }

    /* "cydifflib.pyx":1287
 *             yield '+++ {}{}{}'.format(tofile, todate, lineterm)
 * 
 *         first, last = group[0], group[-1]             # <<<<<<<<<<<<<<
 *         file1_range = _format_range_unified(first[1], last[2])
 *         file2_range = _format_range_unified(first[3], last[4])
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_group, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_group, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_first);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_first, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_last);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_last, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1288
 * 
 *         first, last = group[0], group[-1]
 *         file1_range = _format_range_unified(first[1], last[2])             # <<<<<<<<<<<<<<
 *         file2_range = _format_range_unified(first[3], last[4])
 *         yield '@@ -{} +{} @@{}'.format(file1_range, file2_range, lineterm)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_format_range_unified); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_first, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_last, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_t_8, __pyx_t_9};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_file1_range);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_file1_range, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1289
 *         first, last = group[0], group[-1]
 *         file1_range = _format_range_unified(first[1], last[2])
 *         file2_range = _format_range_unified(first[3], last[4])             # <<<<<<<<<<<<<<
 *         yield '@@ -{} +{} @@{}'.format(file1_range, file2_range, lineterm)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_format_range_unified); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_first, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_last, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_t_9, __pyx_t_8};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_file2_range);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_file2_range, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1290
 *         file1_range = _format_range_unified(first[1], last[2])
 *         file2_range = _format_range_unified(first[3], last[4])
 *         yield '@@ -{} +{} @@{}'.format(file1_range, file2_range, lineterm)             # <<<<<<<<<<<<<<
 * 
 *         for tag, i1, i2, j1, j2 in group:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__26, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_8, __pyx_cur_scope->__pyx_v_file1_range, __pyx_cur_scope->__pyx_v_file2_range, __pyx_cur_scope->__pyx_v_lineterm};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 3;
    return __pyx_r;
    __pyx_L9_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1290, __pyx_L1_error)

    /* "cydifflib.pyx":1292
 *         yield '@@ -{} +{} @@{}'.format(file1_range, file2_range, lineterm)
 * 
 *         for tag, i1, i2, j1, j2 in group:             # <<<<<<<<<<<<<<
 *             if tag == 'equal':
 *                 for line in a[i1:i2]:
 */
    if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_group)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_group)) {
      __pyx_t_3 = __pyx_cur_scope->__pyx_v_group; __Pyx_INCREF(__pyx_t_3); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_group); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1292, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 1292, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 1292, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_12(__pyx_t_3);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1292, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 5)) {
          if (size > 5) __Pyx_RaiseTooManyValuesError(5);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1292, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_13 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_14 = PyTuple_GET_ITEM(sequence, 4); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_13 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_14 = PyList_GET_ITEM(sequence, 4); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_14);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[5] = {&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_13,&__pyx_t_14};
          for (i=0; i < 5; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1292, __pyx_L1_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[5] = {&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_13,&__pyx_t_14};
        __pyx_t_15 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15);
        for (index=0; index < 5; index++) {
          PyObject* item = __pyx_t_16(__pyx_t_15); if (unlikely(!item)) goto __pyx_L12_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_15), 5) < 0) __PYX_ERR(0, 1292, __pyx_L1_error)
        __pyx_t_16 = NULL;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        goto __pyx_L13_unpacking_done;
        __pyx_L12_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_16 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1292, __pyx_L1_error)
        __pyx_L13_unpacking_done:;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i1);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i1, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i2);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i2, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j1);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j1, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j2);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j2, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      __pyx_t_14 = 0;

      /* "cydifflib.pyx":1293
 * 
 *         for tag, i1, i2, j1, j2 in group:
 *             if tag == 'equal':             # <<<<<<<<<<<<<<
 *                 for line in a[i1:i2]:
 *                     yield ' ' + line
 */
      __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_equal, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1293, __pyx_L1_error)
      if (__pyx_t_7) {

        /* "cydifflib.pyx":1294
 *         for tag, i1, i2, j1, j2 in group:
 *             if tag == 'equal':
 *                 for line in a[i1:i2]:             # <<<<<<<<<<<<<<
 *                     yield ' ' + line
 *                 continue
 */
        __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_a, 0, 0, &__pyx_cur_scope->__pyx_v_i1, &__pyx_cur_scope->__pyx_v_i2, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1294, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
          __pyx_t_14 = __pyx_t_1; __Pyx_INCREF(__pyx_t_14); __pyx_t_17 = 0;
          __pyx_t_18 = NULL;
        } else {
          __pyx_t_17 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1294, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_18 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_14); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1294, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        for (;;) {
          if (likely(!__pyx_t_18)) {
            if (likely(PyList_CheckExact(__pyx_t_14))) {
              if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_14)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1294, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1294, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            } else {
              if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1294, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1294, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            }
          } else {
            __pyx_t_1 = __pyx_t_18(__pyx_t_14);
            if (unlikely(!__pyx_t_1)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1294, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_1);
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "cydifflib.pyx":1295
 *             if tag == 'equal':
 *                 for line in a[i1:i2]:
 *                     yield ' ' + line             # <<<<<<<<<<<<<<
 *                 continue
 *             if tag in {'replace', 'delete'}:
 */
          __pyx_t_1 = PyNumber_Add(__pyx_kp_s__4, __pyx_cur_scope->__pyx_v_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_3;
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_11;
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_12;
          __Pyx_XGIVEREF(__pyx_t_14);
          __pyx_cur_scope->__pyx_t_6 = __pyx_t_14;
          __pyx_cur_scope->__pyx_t_7 = __pyx_t_17;
          __pyx_cur_scope->__pyx_t_8 = __pyx_t_18;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, yielding value */
          __pyx_generator->resume_label = 4;
          return __pyx_r;
          __pyx_L17_resume_from_yield:;
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
          __pyx_t_11 = __pyx_cur_scope->__pyx_t_4;
          __pyx_t_12 = __pyx_cur_scope->__pyx_t_5;
          __pyx_t_14 = __pyx_cur_scope->__pyx_t_6;
          __pyx_cur_scope->__pyx_t_6 = 0;
          __Pyx_XGOTREF(__pyx_t_14);
          __pyx_t_17 = __pyx_cur_scope->__pyx_t_7;
          __pyx_t_18 = __pyx_cur_scope->__pyx_t_8;
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1295, __pyx_L1_error)

          /* "cydifflib.pyx":1294
 *         for tag, i1, i2, j1, j2 in group:
 *             if tag == 'equal':
 *                 for line in a[i1:i2]:             # <<<<<<<<<<<<<<
 *                     yield ' ' + line
 *                 continue
 */
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "cydifflib.pyx":1296
 *                 for line in a[i1:i2]:
 *                     yield ' ' + line
 *                 continue             # <<<<<<<<<<<<<<
 *             if tag in {'replace', 'delete'}:
 *                 for line in a[i1:i2]:
 */
        goto __pyx_L10_continue;

        /* "cydifflib.pyx":1293
 * 
 *         for tag, i1, i2, j1, j2 in group:
 *             if tag == 'equal':             # <<<<<<<<<<<<<<
 *                 for line in a[i1:i2]:
 *                     yield ' ' + line
 */
      }

      /* "cydifflib.pyx":1297
 *                     yield ' ' + line
 *                 continue
 *             if tag in {'replace', 'delete'}:             # <<<<<<<<<<<<<<
 *                 for line in a[i1:i2]:
 *                     yield '-' + line
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
      __pyx_t_14 = __pyx_cur_scope->__pyx_v_tag;
      __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_t_14, __pyx_n_s_replace, Py_EQ)); if (unlikely((__pyx_t_19 < 0))) __PYX_ERR(0, 1297, __pyx_L1_error)
      if (!__pyx_t_19) {
      } else {
        __pyx_t_7 = __pyx_t_19;
        goto __pyx_L19_bool_binop_done;
      }
      __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_t_14, __pyx_n_s_delete, Py_EQ)); if (unlikely((__pyx_t_19 < 0))) __PYX_ERR(0, 1297, __pyx_L1_error)
      __pyx_t_7 = __pyx_t_19;
      __pyx_L19_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_19 = (__pyx_t_7 != 0);
      if (__pyx_t_19) {

        /* "cydifflib.pyx":1298
 *                 continue
 *             if tag in {'replace', 'delete'}:
 *                 for line in a[i1:i2]:             # <<<<<<<<<<<<<<
 *                     yield '-' + line
 *             if tag in {'replace', 'insert'}:
 */
        __pyx_t_14 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_a, 0, 0, &__pyx_cur_scope->__pyx_v_i1, &__pyx_cur_scope->__pyx_v_i2, NULL, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1298, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
          __pyx_t_1 = __pyx_t_14; __Pyx_INCREF(__pyx_t_1); __pyx_t_17 = 0;
          __pyx_t_18 = NULL;
        } else {
          __pyx_t_17 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_18 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1298, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        for (;;) {
          if (likely(!__pyx_t_18)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_14); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1298, __pyx_L1_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1298, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            } else {
              if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_14); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1298, __pyx_L1_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1298, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            }
          } else {
            __pyx_t_14 = __pyx_t_18(__pyx_t_1);
            if (unlikely(!__pyx_t_14)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1298, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_14);
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_14);
          __Pyx_GIVEREF(__pyx_t_14);
          __pyx_t_14 = 0;

          /* "cydifflib.pyx":1299
 *             if tag in {'replace', 'delete'}:
 *                 for line in a[i1:i2]:
 *                     yield '-' + line             # <<<<<<<<<<<<<<
 *             if tag in {'replace', 'insert'}:
 *                 for line in b[j1:j2]:
 */
          __pyx_t_14 = PyNumber_Add(__pyx_kp_s__6, __pyx_cur_scope->__pyx_v_line); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_r = __pyx_t_14;
          __pyx_t_14 = 0;
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_6 = __pyx_t_3;
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_11;
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_12;
          __pyx_cur_scope->__pyx_t_7 = __pyx_t_17;
          __pyx_cur_scope->__pyx_t_8 = __pyx_t_18;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, yielding value */
          __pyx_generator->resume_label = 5;
          return __pyx_r;
          __pyx_L23_resume_from_yield:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_6;
          __pyx_cur_scope->__pyx_t_6 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
          __pyx_t_11 = __pyx_cur_scope->__pyx_t_4;
          __pyx_t_12 = __pyx_cur_scope->__pyx_t_5;
          __pyx_t_17 = __pyx_cur_scope->__pyx_t_7;
          __pyx_t_18 = __pyx_cur_scope->__pyx_t_8;
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1299, __pyx_L1_error)

          /* "cydifflib.pyx":1298
 *                 continue
 *             if tag in {'replace', 'delete'}:
 *                 for line in a[i1:i2]:             # <<<<<<<<<<<<<<
 *                     yield '-' + line
 *             if tag in {'replace', 'insert'}:
 */
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "cydifflib.pyx":1297
 *                     yield ' ' + line
 *                 continue
 *             if tag in {'replace', 'delete'}:             # <<<<<<<<<<<<<<
 *                 for line in a[i1:i2]:
 *                     yield '-' + line
 */
      }

      /* "cydifflib.pyx":1300
 *                 for line in a[i1:i2]:
 *                     yield '-' + line
 *             if tag in {'replace', 'insert'}:             # <<<<<<<<<<<<<<
 *                 for line in b[j1:j2]:
 *                     yield '+' + line
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
      __pyx_t_1 = __pyx_cur_scope->__pyx_v_tag;
      __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_replace, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1300, __pyx_L1_error)
      if (!__pyx_t_7) {
      } else {
        __pyx_t_19 = __pyx_t_7;
        goto __pyx_L25_bool_binop_done;
      }
      __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_insert, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1300, __pyx_L1_error)
      __pyx_t_19 = __pyx_t_7;
      __pyx_L25_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = (__pyx_t_19 != 0);
      if (__pyx_t_7) {

        /* "cydifflib.pyx":1301
 *                     yield '-' + line
 *             if tag in {'replace', 'insert'}:
 *                 for line in b[j1:j2]:             # <<<<<<<<<<<<<<
 *                     yield '+' + line
 * 
 */
        __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_b, 0, 0, &__pyx_cur_scope->__pyx_v_j1, &__pyx_cur_scope->__pyx_v_j2, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1301, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
          __pyx_t_14 = __pyx_t_1; __Pyx_INCREF(__pyx_t_14); __pyx_t_17 = 0;
          __pyx_t_18 = NULL;
        } else {
          __pyx_t_17 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1301, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_18 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_14); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1301, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        for (;;) {
          if (likely(!__pyx_t_18)) {
            if (likely(PyList_CheckExact(__pyx_t_14))) {
              if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_14)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1301, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1301, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            } else {
              if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1301, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1301, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            }
          } else {
            __pyx_t_1 = __pyx_t_18(__pyx_t_14);
            if (unlikely(!__pyx_t_1)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1301, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_1);
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "cydifflib.pyx":1302
 *             if tag in {'replace', 'insert'}:
 *                 for line in b[j1:j2]:
 *                     yield '+' + line             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_1 = PyNumber_Add(__pyx_kp_s__7, __pyx_cur_scope->__pyx_v_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_3;
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_11;
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_12;
          __Pyx_XGIVEREF(__pyx_t_14);
          __pyx_cur_scope->__pyx_t_6 = __pyx_t_14;
          __pyx_cur_scope->__pyx_t_7 = __pyx_t_17;
          __pyx_cur_scope->__pyx_t_8 = __pyx_t_18;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, yielding value */
          __pyx_generator->resume_label = 6;
          return __pyx_r;
          __pyx_L29_resume_from_yield:;
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
          __pyx_t_11 = __pyx_cur_scope->__pyx_t_4;
          __pyx_t_12 = __pyx_cur_scope->__pyx_t_5;
          __pyx_t_14 = __pyx_cur_scope->__pyx_t_6;
          __pyx_cur_scope->__pyx_t_6 = 0;
          __Pyx_XGOTREF(__pyx_t_14);
          __pyx_t_17 = __pyx_cur_scope->__pyx_t_7;
          __pyx_t_18 = __pyx_cur_scope->__pyx_t_8;
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1302, __pyx_L1_error)

          /* "cydifflib.pyx":1301
 *                     yield '-' + line
 *             if tag in {'replace', 'insert'}:
 *                 for line in b[j1:j2]:             # <<<<<<<<<<<<<<
 *                     yield '+' + line
 * 
 */
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "cydifflib.pyx":1300
 *                 for line in a[i1:i2]:
 *                     yield '-' + line
 *             if tag in {'replace', 'insert'}:             # <<<<<<<<<<<<<<
 *                 for line in b[j1:j2]:
 *                     yield '+' + line
 */
      }

      /* "cydifflib.pyx":1292
 *         yield '@@ -{} +{} @@{}'.format(file1_range, file2_range, lineterm)
 * 
 *         for tag, i1, i2, j1, j2 in group:             # <<<<<<<<<<<<<<
 *             if tag == 'equal':
 *                 for line in a[i1:i2]:
 */
      __pyx_L10_continue:;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cydifflib.pyx":1279
 *     _check_types(a, b, fromfile, tofile, fromfiledate, tofiledate, lineterm)
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):             # <<<<<<<<<<<<<<
 *         if not started:
 *             started = True
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1236
 *     return '{},{}'.format(beginning, length)
 * 
 * def unified_diff(a, b, fromfile='', tofile='', fromfiledate='',             # <<<<<<<<<<<<<<
 *                  tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("unified_diff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1309
 * ########################################################################
 * 
 * def _format_range_context(start, stop):             # <<<<<<<<<<<<<<
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_14_format_range_context(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_13_format_range_context, "Convert range to the \"ed\" format");
static PyMethodDef __pyx_mdef_9cydifflib_14_format_range_context = {"_format_range_context", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_14_format_range_context, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_13_format_range_context};
static PyObject *__pyx_pw_9cydifflib_14_format_range_context(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_format_range_context (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_stop,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_stop,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_start)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1309, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_stop)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1309, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_format_range_context", 1, 2, 2, 1); __PYX_ERR(0, 1309, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_format_range_context") < 0)) __PYX_ERR(0, 1309, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_start = values[0];
    __pyx_v_stop = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_format_range_context", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1309, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib._format_range_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_13_format_range_context(__pyx_self, __pyx_v_start, __pyx_v_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_13_format_range_context(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_start, PyObject *__pyx_v_stop) {
  PyObject *__pyx_v_beginning = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_format_range_context", 0);

  /* "cydifflib.pyx":1312
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 *     beginning = start + 1     # lines start numbering with one             # <<<<<<<<<<<<<<
 *     length = stop - start
 *     if not length:
 */
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_start, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_beginning = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1313
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 *     beginning = start + 1     # lines start numbering with one
 *     length = stop - start             # <<<<<<<<<<<<<<
 *     if not length:
 *         beginning -= 1        # empty ranges begin at line just before the range
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_stop, __pyx_v_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_length = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1314
 *     beginning = start + 1     # lines start numbering with one
 *     length = stop - start
 *     if not length:             # <<<<<<<<<<<<<<
 *         beginning -= 1        # empty ranges begin at line just before the range
 *     if length <= 1:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_length); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1314, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "cydifflib.pyx":1315
 *     length = stop - start
 *     if not length:
 *         beginning -= 1        # empty ranges begin at line just before the range             # <<<<<<<<<<<<<<
 *     if length <= 1:
 *         return '{}'.format(beginning)
 */
    __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_beginning, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_beginning, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":1314
 *     beginning = start + 1     # lines start numbering with one
 *     length = stop - start
 *     if not length:             # <<<<<<<<<<<<<<
 *         beginning -= 1        # empty ranges begin at line just before the range
 *     if length <= 1:
 */
  }

  /* "cydifflib.pyx":1316
 *     if not length:
 *         beginning -= 1        # empty ranges begin at line just before the range
 *     if length <= 1:             # <<<<<<<<<<<<<<
 *         return '{}'.format(beginning)
 *     return '{},{}'.format(beginning, beginning + length - 1)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_length, __pyx_int_1, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "cydifflib.pyx":1317
 *         beginning -= 1        # empty ranges begin at line just before the range
 *     if length <= 1:
 *         return '{}'.format(beginning)             # <<<<<<<<<<<<<<
 *     return '{},{}'.format(beginning, beginning + length - 1)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__20, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_beginning};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cydifflib.pyx":1316
 *     if not length:
 *         beginning -= 1        # empty ranges begin at line just before the range
 *     if length <= 1:             # <<<<<<<<<<<<<<
 *         return '{}'.format(beginning)
 *     return '{},{}'.format(beginning, beginning + length - 1)
 */
  }

  /* "cydifflib.pyx":1318
 *     if length <= 1:
 *         return '{}'.format(beginning)
 *     return '{},{}'.format(beginning, beginning + length - 1)             # <<<<<<<<<<<<<<
 * 
 * # See http://www.unix.org/single_unix_specification/
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__21, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Add(__pyx_v_beginning, __pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_beginning, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1309
 * ########################################################################
 * 
 * def _format_range_context(start, stop):             # <<<<<<<<<<<<<<
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cydifflib._format_range_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_beginning);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_17generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1321
 * 
 * # See http://www.unix.org/single_unix_specification/
 * def context_diff(a, b, fromfile='', tofile='',             # <<<<<<<<<<<<<<
 *                  fromfiledate='', tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_16context_diff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_15context_diff, "\n    Compare two sequences of lines; generate the delta as a context diff.\n\n    Context diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by 'n' which\n    defaults to three.\n\n    By default, the diff control lines (those with *** or ---) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to \"\" so that the output will be uniformly newline free.\n\n    The context diff format normally has a header for filenames and\n    modification times.  Any or all of these may be specified using\n    strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n    The modification times are normally expressed in the ISO 8601 format.\n    If not specified, the strings default to blanks.\n\n    Example:\n\n    >>> print(''.join(context_diff('one\\ntwo\\nthree\\nfour\\n'.splitlines(True),\n    ...       'zero\\none\\ntree\\nfour\\n'.splitlines(True), 'Original', 'Current')),\n    ...       end=\"\")\n    *** Original\n    --- Current\n    ***************\n    *** 1,4 ****\n      one\n    ! two\n    ! three\n      four\n    --- 1,4 ----\n    + zero\n      one\n    ! tree\n      four\n    ");
static PyMethodDef __pyx_mdef_9cydifflib_16context_diff = {"context_diff", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_16context_diff, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15context_diff};
static PyObject *__pyx_pw_9cydifflib_16context_diff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_fromfile = 0;
  PyObject *__pyx_v_tofile = 0;
  PyObject *__pyx_v_fromfiledate = 0;
  PyObject *__pyx_v_tofiledate = 0;
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_lineterm = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("context_diff (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_fromfile,&__pyx_n_s_tofile,&__pyx_n_s_fromfiledate,&__pyx_n_s_tofiledate,&__pyx_n_s_n,&__pyx_n_s_lineterm,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_fromfile,&__pyx_n_s_tofile,&__pyx_n_s_fromfiledate,&__pyx_n_s_tofiledate,&__pyx_n_s_n,&__pyx_n_s_lineterm,0};
    #endif
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[2] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[3] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[4] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[5] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[6] = ((PyObject *)((PyObject *)__pyx_int_3));
    values[7] = ((PyObject *)((PyObject*)__pyx_kp_s__17));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("context_diff", 0, 2, 8, 1); __PYX_ERR(0, 1321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromfile);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tofile);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromfiledate);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tofiledate);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lineterm);
          if (value) { values[7] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "context_diff") < 0)) __PYX_ERR(0, 1321, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
    __pyx_v_fromfile = values[2];
    __pyx_v_tofile = values[3];
    __pyx_v_fromfiledate = values[4];
    __pyx_v_tofiledate = values[5];
    __pyx_v_n = values[6];
    __pyx_v_lineterm = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("context_diff", 0, 2, 8, __pyx_nargs); __PYX_ERR(0, 1321, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.context_diff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_15context_diff(__pyx_self, __pyx_v_a, __pyx_v_b, __pyx_v_fromfile, __pyx_v_tofile, __pyx_v_fromfiledate, __pyx_v_tofiledate, __pyx_v_n, __pyx_v_lineterm);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_12context_diff_2generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1382
 *         yield '*** {} ****{}'.format(file1_range, lineterm)
 * 
 *         if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):             # <<<<<<<<<<<<<<
 *             for tag, i1, i2, _, _ in group:
 *                 if tag != 'insert':
 */

static PyObject *__pyx_pf_9cydifflib_12context_diff_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *)__pyx_tp_new_9cydifflib___pyx_scope_struct_13_genexpr(__pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1382, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_12context_diff_2generator15, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_context_diff_locals_genexpr, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.context_diff.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_12context_diff_2generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1382, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_group)) { __Pyx_RaiseClosureNameError("group"); __PYX_ERR(0, 1382, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_group)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_group)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_group; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_group); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1382, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1382, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1382, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1382, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1382, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1382, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1382, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1382, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 5) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1382, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_tag;
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_replace, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1382, __pyx_L1_error)
    if (!__pyx_t_13) {
    } else {
      __pyx_t_12 = __pyx_t_13;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_delete, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1382, __pyx_L1_error)
    __pyx_t_12 = __pyx_t_13;
    __pyx_L9_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_13 = (__pyx_t_12 != 0);
    if (__pyx_t_13) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_12context_diff_5generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1391
 *         yield '--- {} ----{}'.format(file2_range, lineterm)
 * 
 *         if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):             # <<<<<<<<<<<<<<
 *             for tag, _, _, j1, j2 in group:
 *                 if tag != 'delete':
 */

static PyObject *__pyx_pf_9cydifflib_12context_diff_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *)__pyx_tp_new_9cydifflib___pyx_scope_struct_14_genexpr(__pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1391, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_12context_diff_5generator16, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_context_diff_locals_genexpr, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.context_diff.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_12context_diff_5generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1391, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_group)) { __Pyx_RaiseClosureNameError("group"); __PYX_ERR(0, 1391, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_group)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_group)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_group; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_group); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1391, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1391, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1391, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1391, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1391, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1391, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 5) < 0) __PYX_ERR(0, 1391, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1391, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_tag;
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_replace, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1391, __pyx_L1_error)
    if (!__pyx_t_13) {
    } else {
      __pyx_t_12 = __pyx_t_13;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_insert, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1391, __pyx_L1_error)
    __pyx_t_12 = __pyx_t_13;
    __pyx_L9_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_13 = (__pyx_t_12 != 0);
    if (__pyx_t_13) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1321
 * 
 * # See http://www.unix.org/single_unix_specification/
 * def context_diff(a, b, fromfile='', tofile='',             # <<<<<<<<<<<<<<
 *                  fromfiledate='', tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */

static PyObject *__pyx_pf_9cydifflib_15context_diff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_fromfile, PyObject *__pyx_v_tofile, PyObject *__pyx_v_fromfiledate, PyObject *__pyx_v_tofiledate, PyObject *__pyx_v_n, PyObject *__pyx_v_lineterm) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *__pyx_cur_scope;
  PyObject *__pyx_gb_9cydifflib_12context_diff_2generator15 = 0;
  PyObject *__pyx_gb_9cydifflib_12context_diff_5generator16 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("context_diff", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *)__pyx_tp_new_9cydifflib___pyx_scope_struct_12_context_diff(__pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1321, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_a = __pyx_v_a;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  __pyx_cur_scope->__pyx_v_b = __pyx_v_b;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  __pyx_cur_scope->__pyx_v_fromfile = __pyx_v_fromfile;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromfile);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fromfile);
  __pyx_cur_scope->__pyx_v_tofile = __pyx_v_tofile;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tofile);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tofile);
  __pyx_cur_scope->__pyx_v_fromfiledate = __pyx_v_fromfiledate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromfiledate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fromfiledate);
  __pyx_cur_scope->__pyx_v_tofiledate = __pyx_v_tofiledate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tofiledate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tofiledate);
  __pyx_cur_scope->__pyx_v_n = __pyx_v_n;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_n);
  __pyx_cur_scope->__pyx_v_lineterm = __pyx_v_lineterm;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lineterm);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lineterm);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_17generator8, __pyx_codeobj__27, (PyObject *) __pyx_cur_scope, __pyx_n_s_context_diff, __pyx_n_s_context_diff, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1321, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.context_diff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XDECREF(__pyx_gb_9cydifflib_12context_diff_2generator15);
  __Pyx_XDECREF(__pyx_gb_9cydifflib_12context_diff_5generator16);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_17generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  Py_ssize_t __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("context_diff", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    case 2: goto __pyx_L8_resume_from_yield;
    case 3: goto __pyx_L9_resume_from_yield;
    case 4: goto __pyx_L10_resume_from_yield;
    case 5: goto __pyx_L19_resume_from_yield;
    case 6: goto __pyx_L20_resume_from_yield;
    case 7: goto __pyx_L29_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1321, __pyx_L1_error)

  /* "cydifflib.pyx":1365
 *     """
 * 
 *     _check_types(a, b, fromfile, tofile, fromfiledate, tofiledate, lineterm)             # <<<<<<<<<<<<<<
 *     prefix = dict(insert='+ ', delete='- ', replace='! ', equal='  ')
 *     started = False
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_check_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[8] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_fromfile, __pyx_cur_scope->__pyx_v_tofile, __pyx_cur_scope->__pyx_v_fromfiledate, __pyx_cur_scope->__pyx_v_tofiledate, __pyx_cur_scope->__pyx_v_lineterm};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 7+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":1366
 * 
 *     _check_types(a, b, fromfile, tofile, fromfiledate, tofiledate, lineterm)
 *     prefix = dict(insert='+ ', delete='- ', replace='! ', equal='  ')             # <<<<<<<<<<<<<<
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_insert, __pyx_kp_s__18) < 0) __PYX_ERR(0, 1366, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_delete, __pyx_kp_s__15) < 0) __PYX_ERR(0, 1366, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_replace, __pyx_kp_s__28) < 0) __PYX_ERR(0, 1366, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_equal, __pyx_kp_s__12) < 0) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_prefix = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1367
 *     _check_types(a, b, fromfile, tofile, fromfiledate, tofiledate, lineterm)
 *     prefix = dict(insert='+ ', delete='- ', replace='! ', equal='  ')
 *     started = False             # <<<<<<<<<<<<<<
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 *         if not started:
 */
  __pyx_cur_scope->__pyx_v_started = 0;

  /* "cydifflib.pyx":1368
 *     prefix = dict(insert='+ ', delete='- ', replace='! ', equal='  ')
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):             # <<<<<<<<<<<<<<
 *         if not started:
 *             started = True
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 0, Py_None);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_a);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_b);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_grouped_opcodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_n};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1368, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1368, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1368, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1368, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_group);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_group, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":1369
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 *         if not started:             # <<<<<<<<<<<<<<
 *             started = True
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 */
    __pyx_t_7 = ((!(__pyx_cur_scope->__pyx_v_started != 0)) != 0);
    if (__pyx_t_7) {

      /* "cydifflib.pyx":1370
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 *         if not started:
 *             started = True             # <<<<<<<<<<<<<<
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''
 */
      __pyx_cur_scope->__pyx_v_started = 1;

      /* "cydifflib.pyx":1371
 *         if not started:
 *             started = True
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''             # <<<<<<<<<<<<<<
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''
 *             yield '*** {}{}{}'.format(fromfile, fromdate, lineterm)
 */
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_fromfiledate); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1371, __pyx_L1_error)
      if (__pyx_t_7) {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__23, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_fromfiledate};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1371, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_1 = __pyx_t_3;
        __pyx_t_3 = 0;
      } else {
        __Pyx_INCREF(__pyx_kp_s_);
        __pyx_t_1 = __pyx_kp_s_;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fromdate);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fromdate, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1372
 *             started = True
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''             # <<<<<<<<<<<<<<
 *             yield '*** {}{}{}'.format(fromfile, fromdate, lineterm)
 *             yield '--- {}{}{}'.format(tofile, todate, lineterm)
 */
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_tofiledate); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1372, __pyx_L1_error)
      if (__pyx_t_7) {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__23, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_tofiledate};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1372, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_1 = __pyx_t_3;
        __pyx_t_3 = 0;
      } else {
        __Pyx_INCREF(__pyx_kp_s_);
        __pyx_t_1 = __pyx_kp_s_;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_todate);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_todate, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1373
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''
 *             yield '*** {}{}{}'.format(fromfile, fromdate, lineterm)             # <<<<<<<<<<<<<<
 *             yield '--- {}{}{}'.format(tofile, todate, lineterm)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__29, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_8, __pyx_cur_scope->__pyx_v_fromfile, __pyx_cur_scope->__pyx_v_fromdate, __pyx_cur_scope->__pyx_v_lineterm};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1373, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1373, __pyx_L1_error)

      /* "cydifflib.pyx":1374
 *             todate = '\t{}'.format(tofiledate) if tofiledate else ''
 *             yield '*** {}{}{}'.format(fromfile, fromdate, lineterm)
 *             yield '--- {}{}{}'.format(tofile, todate, lineterm)             # <<<<<<<<<<<<<<
 * 
 *         first, last = group[0], group[-1]
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__24, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_8, __pyx_cur_scope->__pyx_v_tofile, __pyx_cur_scope->__pyx_v_todate, __pyx_cur_scope->__pyx_v_lineterm};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1374, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L8_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1374, __pyx_L1_error)

      /* "cydifflib.pyx":1369
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):
 *         if not started:             # <<<<<<<<<<<<<<
 *             started = True
 *             fromdate = '\t{}'.format(fromfiledate) if fromfiledate else ''
 */
    }

    /* "cydifflib.pyx":1376
 *             yield '--- {}{}{}'.format(tofile, todate, lineterm)
 * 
 *         first, last = group[0], group[-1]             # <<<<<<<<<<<<<<
 *         yield '***************' + lineterm
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_group, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_group, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_first);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_first, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_last);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_last, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1377
 * 
 *         first, last = group[0], group[-1]
 *         yield '***************' + lineterm             # <<<<<<<<<<<<<<
 * 
 *         file1_range = _format_range_context(first[1], last[2])
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s__30, __pyx_cur_scope->__pyx_v_lineterm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 3;
    return __pyx_r;
    __pyx_L9_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1377, __pyx_L1_error)

    /* "cydifflib.pyx":1379
 *         yield '***************' + lineterm
 * 
 *         file1_range = _format_range_context(first[1], last[2])             # <<<<<<<<<<<<<<
 *         yield '*** {} ****{}'.format(file1_range, lineterm)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_format_range_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_first, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_last, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_t_8, __pyx_t_9};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_file1_range);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_file1_range, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1380
 * 
 *         file1_range = _format_range_context(first[1], last[2])
 *         yield '*** {} ****{}'.format(file1_range, lineterm)             # <<<<<<<<<<<<<<
 * 
 *         if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__31, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_file1_range, __pyx_cur_scope->__pyx_v_lineterm};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 4;
    return __pyx_r;
    __pyx_L10_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1380, __pyx_L1_error)

    /* "cydifflib.pyx":1382
 *         yield '*** {} ****{}'.format(file1_range, lineterm)
 * 
 *         if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):             # <<<<<<<<<<<<<<
 *             for tag, i1, i2, _, _ in group:
 *                 if tag != 'insert':
 */
    __pyx_t_3 = __pyx_pf_9cydifflib_12context_diff_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {

      /* "cydifflib.pyx":1383
 * 
 *         if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):
 *             for tag, i1, i2, _, _ in group:             # <<<<<<<<<<<<<<
 *                 if tag != 'insert':
 *                     for line in a[i1:i2]:
 */
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_group)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_group)) {
        __pyx_t_1 = __pyx_cur_scope->__pyx_v_group; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_group); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1383, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_3); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 1383, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1383, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_3); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 1383, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1383, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_12(__pyx_t_1);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1383, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 5)) {
            if (size > 5) __Pyx_RaiseTooManyValuesError(5);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1383, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 3); 
            __pyx_t_14 = PyTuple_GET_ITEM(sequence, 4); 
          } else {
            __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_13 = PyList_GET_ITEM(sequence, 3); 
            __pyx_t_14 = PyList_GET_ITEM(sequence, 4); 
          }
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_14);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[5] = {&__pyx_t_9,&__pyx_t_8,&__pyx_t_10,&__pyx_t_13,&__pyx_t_14};
            for (i=0; i < 5; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1383, __pyx_L1_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[5] = {&__pyx_t_9,&__pyx_t_8,&__pyx_t_10,&__pyx_t_13,&__pyx_t_14};
          __pyx_t_15 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1383, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15);
          for (index=0; index < 5; index++) {
            PyObject* item = __pyx_t_16(__pyx_t_15); if (unlikely(!item)) goto __pyx_L14_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_15), 5) < 0) __PYX_ERR(0, 1383, __pyx_L1_error)
          __pyx_t_16 = NULL;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          goto __pyx_L15_unpacking_done;
          __pyx_L14_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_16 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1383, __pyx_L1_error)
          __pyx_L15_unpacking_done:;
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i1);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i1, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i2);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i2, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v__);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_14);
        __pyx_t_14 = 0;

        /* "cydifflib.pyx":1384
 *         if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):
 *             for tag, i1, i2, _, _ in group:
 *                 if tag != 'insert':             # <<<<<<<<<<<<<<
 *                     for line in a[i1:i2]:
 *                         yield prefix[tag] + line
 */
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_insert, Py_NE)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1384, __pyx_L1_error)
        if (__pyx_t_7) {

          /* "cydifflib.pyx":1385
 *             for tag, i1, i2, _, _ in group:
 *                 if tag != 'insert':
 *                     for line in a[i1:i2]:             # <<<<<<<<<<<<<<
 *                         yield prefix[tag] + line
 * 
 */
          __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_a, 0, 0, &__pyx_cur_scope->__pyx_v_i1, &__pyx_cur_scope->__pyx_v_i2, NULL, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1385, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
            __pyx_t_14 = __pyx_t_3; __Pyx_INCREF(__pyx_t_14); __pyx_t_17 = 0;
            __pyx_t_18 = NULL;
          } else {
            __pyx_t_17 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1385, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_18 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_14); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1385, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          for (;;) {
            if (likely(!__pyx_t_18)) {
              if (likely(PyList_CheckExact(__pyx_t_14))) {
                if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_14)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_3); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1385, __pyx_L1_error)
                #else
                __pyx_t_3 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1385, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              } else {
                if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_3); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1385, __pyx_L1_error)
                #else
                __pyx_t_3 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1385, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              }
            } else {
              __pyx_t_3 = __pyx_t_18(__pyx_t_14);
              if (unlikely(!__pyx_t_3)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1385, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;

            /* "cydifflib.pyx":1386
 *                 if tag != 'insert':
 *                     for line in a[i1:i2]:
 *                         yield prefix[tag] + line             # <<<<<<<<<<<<<<
 * 
 *         file2_range = _format_range_context(first[3], last[4])
 */
            __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_prefix, __pyx_cur_scope->__pyx_v_tag); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1386, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_13 = PyNumber_Add(__pyx_t_3, __pyx_cur_scope->__pyx_v_line); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1386, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_r = __pyx_t_13;
            __pyx_t_13 = 0;
            __Pyx_XGIVEREF(__pyx_t_1);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
            __Pyx_XGIVEREF(__pyx_t_2);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_2;
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_11;
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_12;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_14;
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_17;
            __pyx_cur_scope->__pyx_t_8 = __pyx_t_18;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, yielding value */
            __pyx_generator->resume_label = 5;
            return __pyx_r;
            __pyx_L19_resume_from_yield:;
            __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_1);
            __pyx_t_2 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_2);
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
            __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_4;
            __pyx_t_12 = __pyx_cur_scope->__pyx_t_5;
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_6;
            __pyx_cur_scope->__pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_17 = __pyx_cur_scope->__pyx_t_7;
            __pyx_t_18 = __pyx_cur_scope->__pyx_t_8;
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1386, __pyx_L1_error)

            /* "cydifflib.pyx":1385
 *             for tag, i1, i2, _, _ in group:
 *                 if tag != 'insert':
 *                     for line in a[i1:i2]:             # <<<<<<<<<<<<<<
 *                         yield prefix[tag] + line
 * 
 */
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "cydifflib.pyx":1384
 *         if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):
 *             for tag, i1, i2, _, _ in group:
 *                 if tag != 'insert':             # <<<<<<<<<<<<<<
 *                     for line in a[i1:i2]:
 *                         yield prefix[tag] + line
 */
        }

        /* "cydifflib.pyx":1383
 * 
 *         if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):
 *             for tag, i1, i2, _, _ in group:             # <<<<<<<<<<<<<<
 *                 if tag != 'insert':
 *                     for line in a[i1:i2]:
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cydifflib.pyx":1382
 *         yield '*** {} ****{}'.format(file1_range, lineterm)
 * 
 *         if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):             # <<<<<<<<<<<<<<
 *             for tag, i1, i2, _, _ in group:
 *                 if tag != 'insert':
 */
    }

    /* "cydifflib.pyx":1388
 *                         yield prefix[tag] + line
 * 
 *         file2_range = _format_range_context(first[3], last[4])             # <<<<<<<<<<<<<<
 *         yield '--- {} ----{}'.format(file2_range, lineterm)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_format_range_context); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_first, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_last, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_t_13, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_file2_range);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_file2_range, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":1389
 * 
 *         file2_range = _format_range_context(first[3], last[4])
 *         yield '--- {} ----{}'.format(file2_range, lineterm)             # <<<<<<<<<<<<<<
 * 
 *         if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__32, __pyx_n_s_format); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_file2_range, __pyx_cur_scope->__pyx_v_lineterm};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 6;
    return __pyx_r;
    __pyx_L20_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1389, __pyx_L1_error)

    /* "cydifflib.pyx":1391
 *         yield '--- {} ----{}'.format(file2_range, lineterm)
 * 
 *         if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):             # <<<<<<<<<<<<<<
 *             for tag, _, _, j1, j2 in group:
 *                 if tag != 'delete':
 */
    __pyx_t_1 = __pyx_pf_9cydifflib_12context_diff_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (__pyx_t_7) {

      /* "cydifflib.pyx":1392
 * 
 *         if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):
 *             for tag, _, _, j1, j2 in group:             # <<<<<<<<<<<<<<
 *                 if tag != 'delete':
 *                     for line in b[j1:j2]:
 */
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_group)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_group)) {
        __pyx_t_14 = __pyx_cur_scope->__pyx_v_group; __Pyx_INCREF(__pyx_t_14); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_group); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1392, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_14); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1392, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_14))) {
            if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 1392, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1392, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 1392, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1392, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_12(__pyx_t_14);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1392, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
          PyObject* sequence = __pyx_t_1;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 5)) {
            if (size > 5) __Pyx_RaiseTooManyValuesError(5);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1392, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 4); 
          } else {
            __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 4); 
          }
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_13,&__pyx_t_10,&__pyx_t_8,&__pyx_t_9};
            for (i=0; i < 5; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1392, __pyx_L1_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_13,&__pyx_t_10,&__pyx_t_8,&__pyx_t_9};
          __pyx_t_15 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1392, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15);
          for (index=0; index < 5; index++) {
            PyObject* item = __pyx_t_16(__pyx_t_15); if (unlikely(!item)) goto __pyx_L24_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_15), 5) < 0) __PYX_ERR(0, 1392, __pyx_L1_error)
          __pyx_t_16 = NULL;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          goto __pyx_L25_unpacking_done;
          __pyx_L24_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_16 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1392, __pyx_L1_error)
          __pyx_L25_unpacking_done:;
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v__);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j1);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j1, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j2);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j2, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        __pyx_t_9 = 0;

        /* "cydifflib.pyx":1393
 *         if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):
 *             for tag, _, _, j1, j2 in group:
 *                 if tag != 'delete':             # <<<<<<<<<<<<<<
 *                     for line in b[j1:j2]:
 *                         yield prefix[tag] + line
 */
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_delete, Py_NE)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1393, __pyx_L1_error)
        if (__pyx_t_7) {

          /* "cydifflib.pyx":1394
 *             for tag, _, _, j1, j2 in group:
 *                 if tag != 'delete':
 *                     for line in b[j1:j2]:             # <<<<<<<<<<<<<<
 *                         yield prefix[tag] + line
 * 
 */
          __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_b, 0, 0, &__pyx_cur_scope->__pyx_v_j1, &__pyx_cur_scope->__pyx_v_j2, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1394, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9); __pyx_t_17 = 0;
            __pyx_t_18 = NULL;
          } else {
            __pyx_t_17 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1394, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_18 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1394, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_18)) {
              if (likely(PyList_CheckExact(__pyx_t_9))) {
                if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_9)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1394, __pyx_L1_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1394, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 1394, __pyx_L1_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1394, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_18(__pyx_t_9);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1394, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;

            /* "cydifflib.pyx":1395
 *                 if tag != 'delete':
 *                     for line in b[j1:j2]:
 *                         yield prefix[tag] + line             # <<<<<<<<<<<<<<
 * 
 * def _check_types(a, b, *args):
 */
            __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_prefix, __pyx_cur_scope->__pyx_v_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_8 = PyNumber_Add(__pyx_t_1, __pyx_cur_scope->__pyx_v_line); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1395, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_r = __pyx_t_8;
            __pyx_t_8 = 0;
            __Pyx_XGIVEREF(__pyx_t_2);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_9;
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_11;
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_12;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_14;
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_17;
            __pyx_cur_scope->__pyx_t_8 = __pyx_t_18;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, yielding value */
            __pyx_generator->resume_label = 7;
            return __pyx_r;
            __pyx_L29_resume_from_yield:;
            __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_2);
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
            __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_4;
            __pyx_t_12 = __pyx_cur_scope->__pyx_t_5;
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_6;
            __pyx_cur_scope->__pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_17 = __pyx_cur_scope->__pyx_t_7;
            __pyx_t_18 = __pyx_cur_scope->__pyx_t_8;
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1395, __pyx_L1_error)

            /* "cydifflib.pyx":1394
 *             for tag, _, _, j1, j2 in group:
 *                 if tag != 'delete':
 *                     for line in b[j1:j2]:             # <<<<<<<<<<<<<<
 *                         yield prefix[tag] + line
 * 
 */
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "cydifflib.pyx":1393
 *         if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):
 *             for tag, _, _, j1, j2 in group:
 *                 if tag != 'delete':             # <<<<<<<<<<<<<<
 *                     for line in b[j1:j2]:
 *                         yield prefix[tag] + line
 */
        }

        /* "cydifflib.pyx":1392
 * 
 *         if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):
 *             for tag, _, _, j1, j2 in group:             # <<<<<<<<<<<<<<
 *                 if tag != 'delete':
 *                     for line in b[j1:j2]:
 */
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "cydifflib.pyx":1391
 *         yield '--- {} ----{}'.format(file2_range, lineterm)
 * 
 *         if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):             # <<<<<<<<<<<<<<
 *             for tag, _, _, j1, j2 in group:
 *                 if tag != 'delete':
 */
    }

    /* "cydifflib.pyx":1368
 *     prefix = dict(insert='+ ', delete='- ', replace='! ', equal='  ')
 *     started = False
 *     for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):             # <<<<<<<<<<<<<<
 *         if not started:
 *             started = True
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1321
 * 
 * # See http://www.unix.org/single_unix_specification/
 * def context_diff(a, b, fromfile='', tofile='',             # <<<<<<<<<<<<<<
 *                  fromfiledate='', tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("context_diff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1397
 *                         yield prefix[tag] + line
 * 
 * def _check_types(a, b, *args):             # <<<<<<<<<<<<<<
 *     # Checking types is weird, but the alternative is garbled output when
 *     # someone passes mixed bytes and str to {unified,context}_diff(). E.g.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_19_check_types(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9cydifflib_19_check_types = {"_check_types", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_19_check_types, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9cydifflib_19_check_types(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_args = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_check_types (wrapper)", 0);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 2, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1397, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1397, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_check_types", 0, 2, 2, 1); __PYX_ERR(0, 1397, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 2) ? kwd_pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, used_pos_args, "_check_types") < 0)) __PYX_ERR(0, 1397, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_check_types", 0, 2, 2, __pyx_nargs); __PYX_ERR(0, 1397, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_AddTraceback("cydifflib._check_types", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_18_check_types(__pyx_self, __pyx_v_a, __pyx_v_b, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_18_check_types(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_types", 0);

  /* "cydifflib.pyx":1404
 *     #   +++ b'newfile.txt'
 *     # because of how str.format() incorporates bytes objects.
 *     if a and not isinstance(a[0], str):             # <<<<<<<<<<<<<<
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(a[0]).__name__, a[0]))
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_a); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1404, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyString_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "cydifflib.pyx":1406
 *     if a and not isinstance(a[0], str):
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(a[0]).__name__, a[0]))             # <<<<<<<<<<<<<<
 *     if b and not isinstance(b[0], str):
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_t_3)), __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1405
 *     # because of how str.format() incorporates bytes objects.
 *     if a and not isinstance(a[0], str):
 *         raise TypeError('lines to compare must be str, not %s (%r)' %             # <<<<<<<<<<<<<<
 *                         (type(a[0]).__name__, a[0]))
 *     if b and not isinstance(b[0], str):
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_lines_to_compare_must_be_str_not, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1405, __pyx_L1_error)

    /* "cydifflib.pyx":1404
 *     #   +++ b'newfile.txt'
 *     # because of how str.format() incorporates bytes objects.
 *     if a and not isinstance(a[0], str):             # <<<<<<<<<<<<<<
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(a[0]).__name__, a[0]))
 */
  }

  /* "cydifflib.pyx":1407
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(a[0]).__name__, a[0]))
 *     if b and not isinstance(b[0], str):             # <<<<<<<<<<<<<<
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(b[0]).__name__, b[0]))
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_b); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1407, __pyx_L1_error)
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_b, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyString_Check(__pyx_t_6); 
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = ((!(__pyx_t_4 != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "cydifflib.pyx":1409
 *     if b and not isinstance(b[0], str):
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(b[0]).__name__, b[0]))             # <<<<<<<<<<<<<<
 *     for arg in args:
 *         if not isinstance(arg, str):
 */
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_b, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_t_6)), __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_b, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;

    /* "cydifflib.pyx":1408
 *                         (type(a[0]).__name__, a[0]))
 *     if b and not isinstance(b[0], str):
 *         raise TypeError('lines to compare must be str, not %s (%r)' %             # <<<<<<<<<<<<<<
 *                         (type(b[0]).__name__, b[0]))
 *     for arg in args:
 */
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_lines_to_compare_must_be_str_not, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1408, __pyx_L1_error)

    /* "cydifflib.pyx":1407
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(a[0]).__name__, a[0]))
 *     if b and not isinstance(b[0], str):             # <<<<<<<<<<<<<<
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(b[0]).__name__, b[0]))
 */
  }

  /* "cydifflib.pyx":1410
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(b[0]).__name__, b[0]))
 *     for arg in args:             # <<<<<<<<<<<<<<
 *         if not isinstance(arg, str):
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 */
  __pyx_t_5 = __pyx_v_args; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1410, __pyx_L1_error)
    #else
    __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_arg, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cydifflib.pyx":1411
 *                         (type(b[0]).__name__, b[0]))
 *     for arg in args:
 *         if not isinstance(arg, str):             # <<<<<<<<<<<<<<
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 * 
 */
    __pyx_t_1 = PyString_Check(__pyx_v_arg); 
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "cydifflib.pyx":1412
 *     for arg in args:
 *         if not isinstance(arg, str):
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))             # <<<<<<<<<<<<<<
 * 
 * def diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'',
 */
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_arg);
      __Pyx_GIVEREF(__pyx_v_arg);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_arg);
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_all_arguments_must_be_str_not_r, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 1412, __pyx_L1_error)

      /* "cydifflib.pyx":1411
 *                         (type(b[0]).__name__, b[0]))
 *     for arg in args:
 *         if not isinstance(arg, str):             # <<<<<<<<<<<<<<
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 * 
 */
    }

    /* "cydifflib.pyx":1410
 *         raise TypeError('lines to compare must be str, not %s (%r)' %
 *                         (type(b[0]).__name__, b[0]))
 *     for arg in args:             # <<<<<<<<<<<<<<
 *         if not isinstance(arg, str):
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":1397
 *                         yield prefix[tag] + line
 * 
 * def _check_types(a, b, *args):             # <<<<<<<<<<<<<<
 *     # Checking types is weird, but the alternative is garbled output when
 *     # someone passes mixed bytes and str to {unified,context}_diff(). E.g.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cydifflib._check_types", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_22generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1414
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 * 
 * def diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'',             # <<<<<<<<<<<<<<
 *                fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n'):
 *     r"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_21diff_bytes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_20diff_bytes, "\n    Compare `a` and `b`, two sequences of lines represented as bytes rather\n    than str. This is a wrapper for `dfunc`, which is typically either\n    unified_diff() or context_diff(). Inputs are losslessly converted to\n    strings so that `dfunc` only has to worry about strings, and encoded\n    back to bytes on return. This is necessary to compare files with\n    unknown or inconsistent encoding. All other inputs (except `n`) must be\n    bytes rather than str.\n    ");
static PyMethodDef __pyx_mdef_9cydifflib_21diff_bytes = {"diff_bytes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_21diff_bytes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_20diff_bytes};
static PyObject *__pyx_pw_9cydifflib_21diff_bytes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_dfunc = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_fromfile = 0;
  PyObject *__pyx_v_tofile = 0;
  PyObject *__pyx_v_fromfiledate = 0;
  PyObject *__pyx_v_tofiledate = 0;
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_lineterm = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("diff_bytes (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dfunc,&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_fromfile,&__pyx_n_s_tofile,&__pyx_n_s_fromfiledate,&__pyx_n_s_tofiledate,&__pyx_n_s_n,&__pyx_n_s_lineterm,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dfunc,&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_fromfile,&__pyx_n_s_tofile,&__pyx_n_s_fromfiledate,&__pyx_n_s_tofiledate,&__pyx_n_s_n,&__pyx_n_s_lineterm,0};
    #endif
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[3] = ((PyObject *)((PyObject*)__pyx_kp_b_));
    values[4] = ((PyObject *)((PyObject*)__pyx_kp_b_));
    values[5] = ((PyObject *)((PyObject*)__pyx_kp_b_));
    values[6] = ((PyObject *)((PyObject*)__pyx_kp_b_));
    values[7] = ((PyObject *)((PyObject *)__pyx_int_3));
    values[8] = ((PyObject *)((PyObject*)__pyx_kp_b__17));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dfunc)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("diff_bytes", 0, 3, 9, 1); __PYX_ERR(0, 1414, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("diff_bytes", 0, 3, 9, 2); __PYX_ERR(0, 1414, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromfile);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tofile);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromfiledate);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tofiledate);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n);
          if (value) { values[7] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lineterm);
          if (value) { values[8] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "diff_bytes") < 0)) __PYX_ERR(0, 1414, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dfunc = values[0];
    __pyx_v_a = values[1];
    __pyx_v_b = values[2];
    __pyx_v_fromfile = values[3];
    __pyx_v_tofile = values[4];
    __pyx_v_fromfiledate = values[5];
    __pyx_v_tofiledate = values[6];
    __pyx_v_n = values[7];
    __pyx_v_lineterm = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("diff_bytes", 0, 3, 9, __pyx_nargs); __PYX_ERR(0, 1414, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.diff_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_20diff_bytes(__pyx_self, __pyx_v_dfunc, __pyx_v_a, __pyx_v_b, __pyx_v_fromfile, __pyx_v_tofile, __pyx_v_fromfiledate, __pyx_v_tofiledate, __pyx_v_n, __pyx_v_lineterm);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_20diff_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dfunc, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_fromfile, PyObject *__pyx_v_tofile, PyObject *__pyx_v_fromfiledate, PyObject *__pyx_v_tofiledate, PyObject *__pyx_v_n, PyObject *__pyx_v_lineterm) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("diff_bytes", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *)__pyx_tp_new_9cydifflib___pyx_scope_struct_15_diff_bytes(__pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1414, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_dfunc = __pyx_v_dfunc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_dfunc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_dfunc);
  __pyx_cur_scope->__pyx_v_a = __pyx_v_a;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  __pyx_cur_scope->__pyx_v_b = __pyx_v_b;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  __pyx_cur_scope->__pyx_v_fromfile = __pyx_v_fromfile;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromfile);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fromfile);
  __pyx_cur_scope->__pyx_v_tofile = __pyx_v_tofile;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tofile);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tofile);
  __pyx_cur_scope->__pyx_v_fromfiledate = __pyx_v_fromfiledate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromfiledate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fromfiledate);
  __pyx_cur_scope->__pyx_v_tofiledate = __pyx_v_tofiledate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tofiledate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tofiledate);
  __pyx_cur_scope->__pyx_v_n = __pyx_v_n;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_n);
  __pyx_cur_scope->__pyx_v_lineterm = __pyx_v_lineterm;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lineterm);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lineterm);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_22generator9, __pyx_codeobj__33, (PyObject *) __pyx_cur_scope, __pyx_n_s_diff_bytes, __pyx_n_s_diff_bytes, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.diff_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1425
 *     bytes rather than str.
 *     """
 *     def decode(s):             # <<<<<<<<<<<<<<
 *         try:
 *             return s.decode('ascii', 'surrogateescape')
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_10diff_bytes_1decode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9cydifflib_10diff_bytes_1decode = {"decode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_10diff_bytes_1decode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9cydifflib_10diff_bytes_1decode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decode (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "decode") < 0)) __PYX_ERR(0, 1425, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_s = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decode", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1425, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.diff_bytes.decode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_10diff_bytes_decode(__pyx_self, __pyx_v_s);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_10diff_bytes_decode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_v_err = NULL;
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decode", 0);

  /* "cydifflib.pyx":1426
 *     """
 *     def decode(s):
 *         try:             # <<<<<<<<<<<<<<
 *             return s.decode('ascii', 'surrogateescape')
 *         except AttributeError as err:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "cydifflib.pyx":1427
 *     def decode(s):
 *         try:
 *             return s.decode('ascii', 'surrogateescape')             # <<<<<<<<<<<<<<
 *         except AttributeError as err:
 *             msg = ('all arguments must be bytes, not %s (%r)' %
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1427, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1427, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L7_try_return;

      /* "cydifflib.pyx":1426
 *     """
 *     def decode(s):
 *         try:             # <<<<<<<<<<<<<<
 *             return s.decode('ascii', 'surrogateescape')
 *         except AttributeError as err:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "cydifflib.pyx":1428
 *         try:
 *             return s.decode('ascii', 'surrogateescape')
 *         except AttributeError as err:             # <<<<<<<<<<<<<<
 *             msg = ('all arguments must be bytes, not %s (%r)' %
 *                    (type(s).__name__, s))
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("cydifflib.diff_bytes.decode", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_7) < 0) __PYX_ERR(0, 1428, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_v_err = __pyx_t_4;
      /*try:*/ {

        /* "cydifflib.pyx":1430
 *         except AttributeError as err:
 *             msg = ('all arguments must be bytes, not %s (%r)' %
 *                    (type(s).__name__, s))             # <<<<<<<<<<<<<<
 *             raise TypeError(msg) from err
 *     a = list(map(decode, a))
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_s)), __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1430, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1430, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
        __Pyx_INCREF(__pyx_v_s);
        __Pyx_GIVEREF(__pyx_v_s);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_s);
        __pyx_t_8 = 0;

        /* "cydifflib.pyx":1429
 *             return s.decode('ascii', 'surrogateescape')
 *         except AttributeError as err:
 *             msg = ('all arguments must be bytes, not %s (%r)' %             # <<<<<<<<<<<<<<
 *                    (type(s).__name__, s))
 *             raise TypeError(msg) from err
 */
        __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_all_arguments_must_be_bytes_not, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1429, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_v_msg = ((PyObject*)__pyx_t_8);
        __pyx_t_8 = 0;

        /* "cydifflib.pyx":1431
 *             msg = ('all arguments must be bytes, not %s (%r)' %
 *                    (type(s).__name__, s))
 *             raise TypeError(msg) from err             # <<<<<<<<<<<<<<
 *     a = list(map(decode, a))
 *     b = list(map(decode, b))
 */
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_v_msg); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1431, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_Raise(__pyx_t_8, 0, 0, __pyx_v_err);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 1431, __pyx_L14_error)
      }

      /* "cydifflib.pyx":1428
 *         try:
 *             return s.decode('ascii', 'surrogateescape')
 *         except AttributeError as err:             # <<<<<<<<<<<<<<
 *             msg = ('all arguments must be bytes, not %s (%r)' %
 *                    (type(s).__name__, s))
 */
      /*finally:*/ {
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __pyx_t_6 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_err); __pyx_v_err = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          }
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ErrRestore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
          __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
          goto __pyx_L5_except_error;
        }
      }
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "cydifflib.pyx":1426
 *     """
 *     def decode(s):
 *         try:             # <<<<<<<<<<<<<<
 *             return s.decode('ascii', 'surrogateescape')
 *         except AttributeError as err:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "cydifflib.pyx":1425
 *     bytes rather than str.
 *     """
 *     def decode(s):             # <<<<<<<<<<<<<<
 *         try:
 *             return s.decode('ascii', 'surrogateescape')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cydifflib.diff_bytes.decode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1414
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 * 
 * def diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'',             # <<<<<<<<<<<<<<
 *                fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n'):
 *     r"""
 */

static PyObject *__pyx_gb_9cydifflib_22generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("diff_bytes", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1414, __pyx_L1_error)

  /* "cydifflib.pyx":1425
 *     bytes rather than str.
 *     """
 *     def decode(s):             # <<<<<<<<<<<<<<
 *         try:
 *             return s.decode('ascii', 'surrogateescape')
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_10diff_bytes_1decode, 0, __pyx_n_s_diff_bytes_locals_decode, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_decode = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1432
 *                    (type(s).__name__, s))
 *             raise TypeError(msg) from err
 *     a = list(map(decode, a))             # <<<<<<<<<<<<<<
 *     b = list(map(decode, b))
 *     fromfile = decode(fromfile)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_decode);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_decode);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_decode);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_a);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_a);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PySequence_ListKeepNew(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_a);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_a, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1433
 *             raise TypeError(msg) from err
 *     a = list(map(decode, a))
 *     b = list(map(decode, b))             # <<<<<<<<<<<<<<
 *     fromfile = decode(fromfile)
 *     tofile = decode(tofile)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_decode);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_decode);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_decode);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_b);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_b);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PySequence_ListKeepNew(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_b);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_b, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1434
 *     a = list(map(decode, a))
 *     b = list(map(decode, b))
 *     fromfile = decode(fromfile)             # <<<<<<<<<<<<<<
 *     tofile = decode(tofile)
 *     fromfiledate = decode(fromfiledate)
 */
  __pyx_t_1 = __pyx_pf_9cydifflib_10diff_bytes_decode(__pyx_cur_scope->__pyx_v_decode, __pyx_cur_scope->__pyx_v_fromfile); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_fromfile);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_fromfile, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1435
 *     b = list(map(decode, b))
 *     fromfile = decode(fromfile)
 *     tofile = decode(tofile)             # <<<<<<<<<<<<<<
 *     fromfiledate = decode(fromfiledate)
 *     tofiledate = decode(tofiledate)
 */
  __pyx_t_1 = __pyx_pf_9cydifflib_10diff_bytes_decode(__pyx_cur_scope->__pyx_v_decode, __pyx_cur_scope->__pyx_v_tofile); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tofile);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_tofile, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1436
 *     fromfile = decode(fromfile)
 *     tofile = decode(tofile)
 *     fromfiledate = decode(fromfiledate)             # <<<<<<<<<<<<<<
 *     tofiledate = decode(tofiledate)
 *     lineterm = decode(lineterm)
 */
  __pyx_t_1 = __pyx_pf_9cydifflib_10diff_bytes_decode(__pyx_cur_scope->__pyx_v_decode, __pyx_cur_scope->__pyx_v_fromfiledate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_fromfiledate);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_fromfiledate, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1437
 *     tofile = decode(tofile)
 *     fromfiledate = decode(fromfiledate)
 *     tofiledate = decode(tofiledate)             # <<<<<<<<<<<<<<
 *     lineterm = decode(lineterm)
 * 
 */
  __pyx_t_1 = __pyx_pf_9cydifflib_10diff_bytes_decode(__pyx_cur_scope->__pyx_v_decode, __pyx_cur_scope->__pyx_v_tofiledate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tofiledate);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_tofiledate, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1438
 *     fromfiledate = decode(fromfiledate)
 *     tofiledate = decode(tofiledate)
 *     lineterm = decode(lineterm)             # <<<<<<<<<<<<<<
 * 
 *     lines = dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm)
 */
  __pyx_t_1 = __pyx_pf_9cydifflib_10diff_bytes_decode(__pyx_cur_scope->__pyx_v_decode, __pyx_cur_scope->__pyx_v_lineterm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_lineterm);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_lineterm, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1440
 *     lineterm = decode(lineterm)
 * 
 *     lines = dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm)             # <<<<<<<<<<<<<<
 *     for line in lines:
 *         yield line.encode('ascii', 'surrogateescape')
 */
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_dfunc);
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_dfunc; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[9] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_a, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_fromfile, __pyx_cur_scope->__pyx_v_tofile, __pyx_cur_scope->__pyx_v_fromfiledate, __pyx_cur_scope->__pyx_v_tofiledate, __pyx_cur_scope->__pyx_v_n, __pyx_cur_scope->__pyx_v_lineterm};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 8+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_lines = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1441
 * 
 *     lines = dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm)
 *     for line in lines:             # <<<<<<<<<<<<<<
 *         yield line.encode('ascii', 'surrogateescape')
 * 
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_lines)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_lines)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_lines; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_lines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1441, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1441, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1441, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1441, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":1442
 *     lines = dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm)
 *     for line in lines:
 *         yield line.encode('ascii', 'surrogateescape')             # <<<<<<<<<<<<<<
 * 
 * def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1442, __pyx_L1_error)

    /* "cydifflib.pyx":1441
 * 
 *     lines = dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm)
 *     for line in lines:             # <<<<<<<<<<<<<<
 *         yield line.encode('ascii', 'surrogateescape')
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1414
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 * 
 * def diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'',             # <<<<<<<<<<<<<<
 *                fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n'):
 *     r"""
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("diff_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1444
 *         yield line.encode('ascii', 'surrogateescape')
 * 
 * def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compare `a` and `b` (lists of strings); return a `Differ`-style delta.
 */

static PyObject *__pyx_pf_9cydifflib_33__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_None));
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_charjunk);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_charjunk);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_charjunk);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_24ndiff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_23ndiff, "\n    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.\n\n    Optional keyword parameters `linejunk` and `charjunk` are for filter\n    functions, or can be None:\n\n    - linejunk: A function that should accept a single string argument and\n      return true iff the string is junk.  The default is None, and is\n      recommended; the underlying SequenceMatcher class has an adaptive\n      notion of \"noise\" lines.\n\n    - charjunk: A function that accepts a character (string of length\n      1), and returns true iff the character is junk. The default is\n      the module-level function IS_CHARACTER_JUNK, which filters out\n      whitespace characters (a blank or tab; note: it's a bad idea to\n      include newline in this!).\n\n    Tools/scripts/ndiff.py is a command-line front-end to this function.\n\n    Example:\n\n    >>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n    ...              'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\n    >>> print(''.join(diff), end=\"\")\n    - one\n    ?  ^\n    + ore\n    ?  ^\n    - two\n    - three\n    ?  -\n    + tree\n    + emu\n    ");
static PyMethodDef __pyx_mdef_9cydifflib_24ndiff = {"ndiff", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_24ndiff, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_23ndiff};
static PyObject *__pyx_pw_9cydifflib_24ndiff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_linejunk = 0;
  PyObject *__pyx_v_charjunk = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ndiff (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_linejunk,&__pyx_n_s_charjunk,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_linejunk,&__pyx_n_s_charjunk,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    __pyx_defaults1 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self);
    values[2] = ((PyObject *)((PyObject *)Py_None));
    values[3] = __pyx_dynamic_args->__pyx_arg_charjunk;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1444, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1444, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("ndiff", 0, 2, 4, 1); __PYX_ERR(0, 1444, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_linejunk);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1444, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_charjunk);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1444, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "ndiff") < 0)) __PYX_ERR(0, 1444, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
    __pyx_v_linejunk = values[2];
    __pyx_v_charjunk = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ndiff", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1444, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.ndiff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_23ndiff(__pyx_self, __pyx_v_a, __pyx_v_b, __pyx_v_linejunk, __pyx_v_charjunk);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_23ndiff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_linejunk, PyObject *__pyx_v_charjunk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ndiff", 0);

  /* "cydifflib.pyx":1479
 *     + emu
 *     """
 *     return Differ(linejunk, charjunk).compare(a, b)             # <<<<<<<<<<<<<<
 * 
 * def _mdiff(fromlines, tolines, context=None, linejunk=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Differ); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_linejunk, __pyx_v_charjunk};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_compare); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_a, __pyx_v_b};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1444
 *         yield line.encode('ascii', 'surrogateescape')
 * 
 * def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compare `a` and `b` (lists of strings); return a `Differ`-style delta.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cydifflib.ndiff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_27generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1481
 *     return Differ(linejunk, charjunk).compare(a, b)
 * 
 * def _mdiff(fromlines, tolines, context=None, linejunk=None,             # <<<<<<<<<<<<<<
 *            charjunk=IS_CHARACTER_JUNK):
 *     r"""Returns generator yielding marked up from/to side by side differences.
 */

static PyObject *__pyx_pf_9cydifflib_35__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_None));
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)Py_None));
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_charjunk);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_charjunk);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_charjunk);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_26_mdiff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_25_mdiff, "Returns generator yielding marked up from/to side by side differences.\n\n    Arguments:\n    fromlines -- list of text lines to compared to tolines\n    tolines -- list of text lines to be compared to fromlines\n    context -- number of context lines to display on each side of difference,\n               if None, all from/to text lines will be generated.\n    linejunk -- passed on to ndiff (see ndiff documentation)\n    charjunk -- passed on to ndiff (see ndiff documentation)\n\n    This function returns an iterator which returns a tuple:\n    (from line tuple, to line tuple, boolean flag)\n\n    from/to line tuple -- (line num, line text)\n        line num -- integer or None (to indicate a context separation)\n        line text -- original line text with following markers inserted:\n            '\\0+' -- marks start of added text\n            '\\0-' -- marks start of deleted text\n            '\\0^' -- marks start of changed text\n            '\\1' -- marks end of added/deleted/changed text\n\n    boolean flag -- None indicates context separation, True indicates\n        either \"from\" or \"to\" line contains a change, otherwise False.\n\n    This function/iterator was originally developed to generate side by side\n    file difference for making HTML pages (see HtmlDiff class for example\n    usage).\n\n    Note, this function utilizes the ndiff function to generate the side by\n    side difference markup.  Optional ndiff arguments may be passed to this\n    function and they in turn will be passed to ndiff.\n    ");
static PyMethodDef __pyx_mdef_9cydifflib_26_mdiff = {"_mdiff", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_26_mdiff, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_25_mdiff};
static PyObject *__pyx_pw_9cydifflib_26_mdiff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fromlines = 0;
  PyObject *__pyx_v_tolines = 0;
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_linejunk = 0;
  PyObject *__pyx_v_charjunk = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mdiff (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fromlines,&__pyx_n_s_tolines,&__pyx_n_s_context,&__pyx_n_s_linejunk,&__pyx_n_s_charjunk,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fromlines,&__pyx_n_s_tolines,&__pyx_n_s_context,&__pyx_n_s_linejunk,&__pyx_n_s_charjunk,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    __pyx_defaults2 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self);
    values[2] = ((PyObject *)((PyObject *)Py_None));
    values[3] = ((PyObject *)((PyObject *)Py_None));
    values[4] = __pyx_dynamic_args->__pyx_arg_charjunk;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromlines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1481, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tolines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1481, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_mdiff", 0, 2, 5, 1); __PYX_ERR(0, 1481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_context);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_linejunk);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_charjunk);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1481, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_mdiff") < 0)) __PYX_ERR(0, 1481, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fromlines = values[0];
    __pyx_v_tolines = values[1];
    __pyx_v_context = values[2];
    __pyx_v_linejunk = values[3];
    __pyx_v_charjunk = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_mdiff", 0, 2, 5, __pyx_nargs); __PYX_ERR(0, 1481, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib._mdiff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_25_mdiff(__pyx_self, __pyx_v_fromlines, __pyx_v_tolines, __pyx_v_context, __pyx_v_linejunk, __pyx_v_charjunk);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_25_mdiff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fromlines, PyObject *__pyx_v_tolines, PyObject *__pyx_v_context, PyObject *__pyx_v_linejunk, PyObject *__pyx_v_charjunk) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *__pyx_cur_scope;
  PyObject *__pyx_gb_9cydifflib_6_mdiff_4generator17 = 0;
  PyObject *__pyx_gb_9cydifflib_6_mdiff_7generator18 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mdiff", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *)__pyx_tp_new_9cydifflib___pyx_scope_struct_16__mdiff(__pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1481, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_fromlines = __pyx_v_fromlines;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromlines);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fromlines);
  __pyx_cur_scope->__pyx_v_tolines = __pyx_v_tolines;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tolines);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tolines);
  __pyx_cur_scope->__pyx_v_context = __pyx_v_context;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_context);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_context);
  __pyx_cur_scope->__pyx_v_linejunk = __pyx_v_linejunk;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_linejunk);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_linejunk);
  __pyx_cur_scope->__pyx_v_charjunk = __pyx_v_charjunk;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_charjunk);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_charjunk);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_27generator10, __pyx_codeobj__37, (PyObject *) __pyx_cur_scope, __pyx_n_s_mdiff, __pyx_n_s_mdiff, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib._mdiff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XDECREF(__pyx_gb_9cydifflib_6_mdiff_4generator17);
  __Pyx_XDECREF(__pyx_gb_9cydifflib_6_mdiff_7generator18);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1523
 *     diff_lines_iterator = ndiff(fromlines,tolines,linejunk,charjunk)
 * 
 *     def _make_line(lines, format_key, side, num_lines=[0,0]):             # <<<<<<<<<<<<<<
 *         """Returns line of text with user's change markup and line formatting.
 * 
 */

static PyObject *__pyx_pf_9cydifflib_39__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults4, __pyx_self)->__pyx_arg_num_lines);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults4, __pyx_self)->__pyx_arg_num_lines);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults4, __pyx_self)->__pyx_arg_num_lines);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6_mdiff_1_make_line(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_6_mdiff__make_line, "Returns line of text with user's change markup and line formatting.\n\n        lines -- list of lines from the ndiff generator to produce a line of\n                 text from.  When producing the line of text to return, the\n                 lines used are removed from this list.\n        format_key -- '+' return first line in list with \"add\" markup around\n                          the entire line.\n                      '-' return first line in list with \"delete\" markup around\n                          the entire line.\n                      '?' return first line in list with add/delete/change\n                          intraline markup (indices obtained from second line)\n                      None return first line in list with no markup\n        side -- indice into the num_lines list (0=from,1=to)\n        num_lines -- from/to current line number.  This is NOT intended to be a\n                     passed parameter.  It is present as a keyword argument to\n                     maintain memory of the current line numbers between calls\n                     of this function.\n\n        Note, this function is purposefully not defined at the module scope so\n        that data it needs from its parent function (within whose context it\n        is defined) does not need to be of module scope.\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_6_mdiff_1_make_line = {"_make_line", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_6_mdiff_1_make_line, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_6_mdiff__make_line};
static PyObject *__pyx_pw_9cydifflib_6_mdiff_1_make_line(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_lines = 0;
  PyObject *__pyx_v_format_key = 0;
  PyObject *__pyx_v_side = 0;
  PyObject *__pyx_v_num_lines = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_make_line (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lines,&__pyx_n_s_format_key,&__pyx_n_s_side,&__pyx_n_s_num_lines,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lines,&__pyx_n_s_format_key,&__pyx_n_s_side,&__pyx_n_s_num_lines,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    __pyx_defaults4 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults4, __pyx_self);
    values[3] = __pyx_dynamic_args->__pyx_arg_num_lines;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1523, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_format_key)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1523, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_make_line", 0, 3, 4, 1); __PYX_ERR(0, 1523, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_side)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1523, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_make_line", 0, 3, 4, 2); __PYX_ERR(0, 1523, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num_lines);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1523, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_make_line") < 0)) __PYX_ERR(0, 1523, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_lines = values[0];
    __pyx_v_format_key = values[1];
    __pyx_v_side = values[2];
    __pyx_v_num_lines = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_make_line", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 1523, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib._mdiff._make_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6_mdiff__make_line(__pyx_self, __pyx_v_lines, __pyx_v_format_key, __pyx_v_side, __pyx_v_num_lines);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1556
 *             # find intraline changes (store change type and indices in tuples)
 *             sub_info = []
 *             def record_sub_info(match_object,sub_info=sub_info):             # <<<<<<<<<<<<<<
 *                 sub_info.append([match_object.group(1)[0],match_object.span()])
 *                 return match_object.group(1)
 */

static PyObject *__pyx_pf_9cydifflib_41__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults5, __pyx_self)->__pyx_arg_sub_info);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults5, __pyx_self)->__pyx_arg_sub_info);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults5, __pyx_self)->__pyx_arg_sub_info);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6_mdiff_10_make_line_1record_sub_info(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9cydifflib_6_mdiff_10_make_line_1record_sub_info = {"record_sub_info", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_6_mdiff_10_make_line_1record_sub_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9cydifflib_6_mdiff_10_make_line_1record_sub_info(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_match_object = 0;
  PyObject *__pyx_v_sub_info = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("record_sub_info (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_match_object,&__pyx_n_s_sub_info,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_match_object,&__pyx_n_s_sub_info,0};
    #endif
    PyObject* values[2] = {0,0};
    __pyx_defaults5 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults5, __pyx_self);
    values[1] = __pyx_dynamic_args->__pyx_arg_sub_info;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_match_object)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1556, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sub_info);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1556, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "record_sub_info") < 0)) __PYX_ERR(0, 1556, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_match_object = values[0];
    __pyx_v_sub_info = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("record_sub_info", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1556, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib._mdiff._make_line.record_sub_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_6_mdiff_10_make_line_record_sub_info(__pyx_self, __pyx_v_match_object, __pyx_v_sub_info);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6_mdiff_10_make_line_record_sub_info(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_match_object, PyObject *__pyx_v_sub_info) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("record_sub_info", 0);

  /* "cydifflib.pyx":1557
 *             sub_info = []
 *             def record_sub_info(match_object,sub_info=sub_info):
 *                 sub_info.append([match_object.group(1)[0],match_object.span()])             # <<<<<<<<<<<<<<
 *                 return match_object.group(1)
 *             change_re.sub(record_sub_info,markers)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_match_object, __pyx_n_s_group); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_match_object, __pyx_n_s_span); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_5, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_sub_info, __pyx_t_3); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cydifflib.pyx":1558
 *             def record_sub_info(match_object,sub_info=sub_info):
 *                 sub_info.append([match_object.group(1)[0],match_object.span()])
 *                 return match_object.group(1)             # <<<<<<<<<<<<<<
 *             change_re.sub(record_sub_info,markers)
 *             # process each tuple inserting our special marks that won't be
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_match_object, __pyx_n_s_group); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_int_1};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1556
 *             # find intraline changes (store change type and indices in tuples)
 *             sub_info = []
 *             def record_sub_info(match_object,sub_info=sub_info):             # <<<<<<<<<<<<<<
 *                 sub_info.append([match_object.group(1)[0],match_object.span()])
 *                 return match_object.group(1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cydifflib._mdiff._make_line.record_sub_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1523
 *     diff_lines_iterator = ndiff(fromlines,tolines,linejunk,charjunk)
 * 
 *     def _make_line(lines, format_key, side, num_lines=[0,0]):             # <<<<<<<<<<<<<<
 *         """Returns line of text with user's change markup and line formatting.
 * 
 */

static PyObject *__pyx_pf_9cydifflib_6_mdiff__make_line(PyObject *__pyx_self, PyObject *__pyx_v_lines, PyObject *__pyx_v_format_key, PyObject *__pyx_v_side, PyObject *__pyx_v_num_lines) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *__pyx_cur_scope;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *__pyx_outer_scope;
  PyObject *__pyx_v_text = NULL;
  PyObject *__pyx_v_markers = NULL;
  PyObject *__pyx_v_sub_info = NULL;
  PyObject *__pyx_v_record_sub_info = 0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_begin = NULL;
  PyObject *__pyx_v_end = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_line", 0);
  __pyx_outer_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "cydifflib.pyx":1546
 *         is defined) does not need to be of module scope.
 *         """
 *         num_lines[side] += 1             # <<<<<<<<<<<<<<
 *         # Handle case where no user markup is to be added, just return line of
 *         # text with user's line format to allow for usage of the line number.
 */
  __Pyx_INCREF(__pyx_v_side);
  __pyx_t_1 = __pyx_v_side;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_num_lines, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely((PyObject_SetItem(__pyx_v_num_lines, __pyx_t_1, __pyx_t_3) < 0))) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":1549
 *         # Handle case where no user markup is to be added, just return line of
 *         # text with user's line format to allow for usage of the line number.
 *         if format_key is None:             # <<<<<<<<<<<<<<
 *             return (num_lines[side],lines.pop(0)[2:])
 *         # Handle case of intraline changes
 */
  __pyx_t_4 = (__pyx_v_format_key == Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "cydifflib.pyx":1550
 *         # text with user's line format to allow for usage of the line number.
 *         if format_key is None:
 *             return (num_lines[side],lines.pop(0)[2:])             # <<<<<<<<<<<<<<
 *         # Handle case of intraline changes
 *         if format_key == '?':
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_num_lines, __pyx_v_side); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_PopIndex(__pyx_v_lines, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_3, 2, 0, NULL, NULL, &__pyx_slice__38, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cydifflib.pyx":1549
 *         # Handle case where no user markup is to be added, just return line of
 *         # text with user's line format to allow for usage of the line number.
 *         if format_key is None:             # <<<<<<<<<<<<<<
 *             return (num_lines[side],lines.pop(0)[2:])
 *         # Handle case of intraline changes
 */
  }

  /* "cydifflib.pyx":1552
 *             return (num_lines[side],lines.pop(0)[2:])
 *         # Handle case of intraline changes
 *         if format_key == '?':             # <<<<<<<<<<<<<<
 *             text, markers = lines.pop(0), lines.pop(0)
 *             # find intraline changes (store change type and indices in tuples)
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_format_key, __pyx_kp_s__39, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1552, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "cydifflib.pyx":1553
 *         # Handle case of intraline changes
 *         if format_key == '?':
 *             text, markers = lines.pop(0), lines.pop(0)             # <<<<<<<<<<<<<<
 *             # find intraline changes (store change type and indices in tuples)
 *             sub_info = []
 */
    __pyx_t_3 = __Pyx_PyObject_PopIndex(__pyx_v_lines, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_PopIndex(__pyx_v_lines, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_text = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_markers = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":1555
 *             text, markers = lines.pop(0), lines.pop(0)
 *             # find intraline changes (store change type and indices in tuples)
 *             sub_info = []             # <<<<<<<<<<<<<<
 *             def record_sub_info(match_object,sub_info=sub_info):
 *                 sub_info.append([match_object.group(1)[0],match_object.span()])
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sub_info = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":1556
 *             # find intraline changes (store change type and indices in tuples)
 *             sub_info = []
 *             def record_sub_info(match_object,sub_info=sub_info):             # <<<<<<<<<<<<<<
 *                 sub_info.append([match_object.group(1)[0],match_object.span()])
 *                 return match_object.group(1)
 */
    __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6_mdiff_10_make_line_1record_sub_info, 0, __pyx_n_s_mdiff_locals__make_line_locals, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!__Pyx_CyFunction_InitDefaults(__pyx_t_2, sizeof(__pyx_defaults5), 1)) __PYX_ERR(0, 1556, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_sub_info);
    __Pyx_CyFunction_Defaults(__pyx_defaults5, __pyx_t_2)->__pyx_arg_sub_info = __pyx_v_sub_info;
    __Pyx_GIVEREF(__pyx_v_sub_info);
    __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_2, __pyx_pf_9cydifflib_41__defaults__);
    __pyx_v_record_sub_info = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":1559
 *                 sub_info.append([match_object.group(1)[0],match_object.span()])
 *                 return match_object.group(1)
 *             change_re.sub(record_sub_info,markers)             # <<<<<<<<<<<<<<
 *             # process each tuple inserting our special marks that won't be
 *             # noticed by an xml/html escaper.
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_change_re)) { __Pyx_RaiseClosureNameError("change_re"); __PYX_ERR(0, 1559, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_change_re, __pyx_n_s_sub); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_v_record_sub_info, __pyx_v_markers};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1559, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cydifflib.pyx":1562
 *             # process each tuple inserting our special marks that won't be
 *             # noticed by an xml/html escaper.
 *             for key,(begin,end) in reversed(sub_info):             # <<<<<<<<<<<<<<
 *                 text = text[0:begin]+'\0'+key+text[begin:end]+'\1'+text[end:]
 *             text = text[2:]
 */
    __pyx_t_2 = __pyx_v_sub_info; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = PyList_GET_SIZE(__pyx_t_2) - 1;
    for (;;) {
      if (__pyx_t_7 < 0) break;
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7--; if (unlikely((0 < 0))) __PYX_ERR(0, 1562, __pyx_L1_error)
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7--; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
        PyObject* sequence = __pyx_t_3;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1562, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9);
        index = 0; __pyx_t_1 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_1)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 1562, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1562, __pyx_L1_error)
        __pyx_L8_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
      __pyx_t_1 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
        PyObject* sequence = __pyx_t_8;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1562, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_12 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_12);
        index = 0; __pyx_t_9 = __pyx_t_10(__pyx_t_12); if (unlikely(!__pyx_t_9)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        index = 1; __pyx_t_11 = __pyx_t_10(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_12), 2) < 0) __PYX_ERR(0, 1562, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1562, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_begin, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_end, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "cydifflib.pyx":1563
 *             # noticed by an xml/html escaper.
 *             for key,(begin,end) in reversed(sub_info):
 *                 text = text[0:begin]+'\0'+key+text[begin:end]+'\1'+text[end:]             # <<<<<<<<<<<<<<
 *             text = text[2:]
 *         # Handle case of add/delete entire line
 */
      __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_text, 0, 0, NULL, &__pyx_v_begin, NULL, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__42); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_8, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetSlice(__pyx_v_text, 0, 0, &__pyx_v_begin, &__pyx_v_end, NULL, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__43); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_text, 0, 0, &__pyx_v_end, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyNumber_Add(__pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_text, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "cydifflib.pyx":1562
 *             # process each tuple inserting our special marks that won't be
 *             # noticed by an xml/html escaper.
 *             for key,(begin,end) in reversed(sub_info):             # <<<<<<<<<<<<<<
 *                 text = text[0:begin]+'\0'+key+text[begin:end]+'\1'+text[end:]
 *             text = text[2:]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cydifflib.pyx":1564
 *             for key,(begin,end) in reversed(sub_info):
 *                 text = text[0:begin]+'\0'+key+text[begin:end]+'\1'+text[end:]
 *             text = text[2:]             # <<<<<<<<<<<<<<
 *         # Handle case of add/delete entire line
 *         else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_text, 2, 0, NULL, NULL, &__pyx_slice__38, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_text, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":1552
 *             return (num_lines[side],lines.pop(0)[2:])
 *         # Handle case of intraline changes
 *         if format_key == '?':             # <<<<<<<<<<<<<<
 *             text, markers = lines.pop(0), lines.pop(0)
 *             # find intraline changes (store change type and indices in tuples)
 */
    goto __pyx_L4;
  }

  /* "cydifflib.pyx":1567
 *         # Handle case of add/delete entire line
 *         else:
 *             text = lines.pop(0)[2:]             # <<<<<<<<<<<<<<
 *             # if line of text is just a newline, insert a space so there is
 *             # something for the user to highlight and see.
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_PopIndex(__pyx_v_lines, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_2, 2, 0, NULL, NULL, &__pyx_slice__38, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_text = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1570
 *             # if line of text is just a newline, insert a space so there is
 *             # something for the user to highlight and see.
 *             if not text:             # <<<<<<<<<<<<<<
 *                 text = ' '
 *             # insert marks that won't be noticed by an xml/html escaper.
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_text); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1570, __pyx_L1_error)
    __pyx_t_4 = ((!__pyx_t_5) != 0);
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1571
 *             # something for the user to highlight and see.
 *             if not text:
 *                 text = ' '             # <<<<<<<<<<<<<<
 *             # insert marks that won't be noticed by an xml/html escaper.
 *             text = '\0' + format_key + text + '\1'
 */
      __Pyx_INCREF(__pyx_kp_s__4);
      __Pyx_DECREF_SET(__pyx_v_text, __pyx_kp_s__4);

      /* "cydifflib.pyx":1570
 *             # if line of text is just a newline, insert a space so there is
 *             # something for the user to highlight and see.
 *             if not text:             # <<<<<<<<<<<<<<
 *                 text = ' '
 *             # insert marks that won't be noticed by an xml/html escaper.
 */
    }

    /* "cydifflib.pyx":1573
 *                 text = ' '
 *             # insert marks that won't be noticed by an xml/html escaper.
 *             text = '\0' + format_key + text + '\1'             # <<<<<<<<<<<<<<
 *         # Return line of text, first allow user's line formatter to do its
 *         # thing (such as adding the line number) then replace the special
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s__42, __pyx_v_format_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__43); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_text, __pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L4:;

  /* "cydifflib.pyx":1577
 *         # thing (such as adding the line number) then replace the special
 *         # marks with what the user's change markup.
 *         return (num_lines[side],text)             # <<<<<<<<<<<<<<
 * 
 *     def _line_iterator():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_num_lines, __pyx_v_side); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_text);
  __Pyx_GIVEREF(__pyx_v_text);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_text);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1523
 *     diff_lines_iterator = ndiff(fromlines,tolines,linejunk,charjunk)
 * 
 *     def _make_line(lines, format_key, side, num_lines=[0,0]):             # <<<<<<<<<<<<<<
 *         """Returns line of text with user's change markup and line formatting.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("cydifflib._mdiff._make_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_text);
  __Pyx_XDECREF(__pyx_v_markers);
  __Pyx_XDECREF(__pyx_v_sub_info);
  __Pyx_XDECREF(__pyx_v_record_sub_info);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_begin);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_6_mdiff_4generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1579
 *         return (num_lines[side],text)
 * 
 *     def _line_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6_mdiff_3_line_iterator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_6_mdiff_2_line_iterator, "Yields from/to lines of text with a change indication.\n\n        This function is an iterator.  It itself pulls lines from a\n        differencing iterator, processes them and yields them.  When it can\n        it yields both a \"from\" and a \"to\" line, otherwise it will yield one\n        or the other.  In addition to yielding the lines of from/to text, a\n        boolean flag is yielded to indicate if the text line(s) have\n        differences in them.\n\n        Note, this function is purposefully not defined at the module scope so\n        that data it needs from its parent function (within whose context it\n        is defined) does not need to be of module scope.\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_6_mdiff_3_line_iterator = {"_line_iterator", (PyCFunction)__pyx_pw_9cydifflib_6_mdiff_3_line_iterator, METH_NOARGS, __pyx_doc_9cydifflib_6_mdiff_2_line_iterator};
static PyObject *__pyx_pw_9cydifflib_6_mdiff_3_line_iterator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_line_iterator (wrapper)", 0);
  __pyx_r = __pyx_pf_9cydifflib_6_mdiff_2_line_iterator(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6_mdiff_2_line_iterator(PyObject *__pyx_self) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_line_iterator", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *)__pyx_tp_new_9cydifflib___pyx_scope_struct_17__line_iterator(__pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1579, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_6_mdiff_4generator17, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_line_iterator, __pyx_n_s_mdiff_locals__line_iterator, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib._mdiff._line_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_6_mdiff_4generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_line_iterator", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L11_resume_from_yield;
    case 2: goto __pyx_L12_resume_from_yield;
    case 3: goto __pyx_L13_resume_from_yield;
    case 4: goto __pyx_L14_resume_from_yield;
    case 5: goto __pyx_L15_resume_from_yield;
    case 6: goto __pyx_L16_resume_from_yield;
    case 7: goto __pyx_L17_resume_from_yield;
    case 8: goto __pyx_L18_resume_from_yield;
    case 9: goto __pyx_L21_resume_from_yield;
    case 10: goto __pyx_L24_resume_from_yield;
    case 11: goto __pyx_L26_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1579, __pyx_L1_error)

  /* "cydifflib.pyx":1593
 *         is defined) does not need to be of module scope.
 *         """
 *         lines = []             # <<<<<<<<<<<<<<
 *         num_blanks_pending, num_blanks_to_yield = 0, 0
 *         while True:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_lines = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1594
 *         """
 *         lines = []
 *         num_blanks_pending, num_blanks_to_yield = 0, 0             # <<<<<<<<<<<<<<
 *         while True:
 *             # Load up next 4 lines so we can look ahead, create strings which
 */
  __pyx_t_1 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_num_blanks_pending = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_num_blanks_to_yield = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":1595
 *         lines = []
 *         num_blanks_pending, num_blanks_to_yield = 0, 0
 *         while True:             # <<<<<<<<<<<<<<
 *             # Load up next 4 lines so we can look ahead, create strings which
 *             # are a concatenation of the first character of each of the 4 lines
 */
  while (1) {

    /* "cydifflib.pyx":1599
 *             # are a concatenation of the first character of each of the 4 lines
 *             # so we can do some very readable comparisons.
 *             while len(lines) < 4:             # <<<<<<<<<<<<<<
 *                 lines.append(next(diff_lines_iterator, 'X'))
 *             s = ''.join([line[0] for line in lines])
 */
    while (1) {
      __pyx_t_3 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_lines); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1599, __pyx_L1_error)
      __pyx_t_4 = ((__pyx_t_3 < 4) != 0);
      if (!__pyx_t_4) break;

      /* "cydifflib.pyx":1600
 *             # so we can do some very readable comparisons.
 *             while len(lines) < 4:
 *                 lines.append(next(diff_lines_iterator, 'X'))             # <<<<<<<<<<<<<<
 *             s = ''.join([line[0] for line in lines])
 *             if s.startswith('X'):
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_diff_lines_iterator)) { __Pyx_RaiseClosureNameError("diff_lines_iterator"); __PYX_ERR(0, 1600, __pyx_L1_error) }
      __pyx_t_2 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_diff_lines_iterator;
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyIter_Next2(__pyx_t_2, __pyx_n_s_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_lines, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1600, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "cydifflib.pyx":1601
 *             while len(lines) < 4:
 *                 lines.append(next(diff_lines_iterator, 'X'))
 *             s = ''.join([line[0] for line in lines])             # <<<<<<<<<<<<<<
 *             if s.startswith('X'):
 *                 # When no more lines, pump out any remaining blank lines so the
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_v_lines; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      for (;;) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1601, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr5__pyx_v_line);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr5__pyx_v_line, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_8genexpr5__pyx_v_line, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1601, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } /* exit inner scope */
    __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_s);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_s, ((PyObject*)__pyx_t_2));
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":1602
 *                 lines.append(next(diff_lines_iterator, 'X'))
 *             s = ''.join([line[0] for line in lines])
 *             if s.startswith('X'):             # <<<<<<<<<<<<<<
 *                 # When no more lines, pump out any remaining blank lines so the
 *                 # corresponding add/delete lines get a matching blank line so
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_n_s_X};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1602, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1606
 *                 # corresponding add/delete lines get a matching blank line so
 *                 # all line pairs get yielded at the next level.
 *                 num_blanks_to_yield = num_blanks_pending             # <<<<<<<<<<<<<<
 *             elif s.startswith('-?+?'):
 *                 # simple intraline change
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_num_blanks_pending);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_to_yield);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_to_yield, __pyx_cur_scope->__pyx_v_num_blanks_pending);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_num_blanks_pending);

      /* "cydifflib.pyx":1602
 *                 lines.append(next(diff_lines_iterator, 'X'))
 *             s = ''.join([line[0] for line in lines])
 *             if s.startswith('X'):             # <<<<<<<<<<<<<<
 *                 # When no more lines, pump out any remaining blank lines so the
 *                 # corresponding add/delete lines get a matching blank line so
 */
      goto __pyx_L10;
    }

    /* "cydifflib.pyx":1607
 *                 # all line pairs get yielded at the next level.
 *                 num_blanks_to_yield = num_blanks_pending
 *             elif s.startswith('-?+?'):             # <<<<<<<<<<<<<<
 *                 # simple intraline change
 *                 yield _make_line(lines,'?',0), _make_line(lines,'?',1), True
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_s__44};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1607, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1609
 *             elif s.startswith('-?+?'):
 *                 # simple intraline change
 *                 yield _make_line(lines,'?',0), _make_line(lines,'?',1), True             # <<<<<<<<<<<<<<
 *                 continue
 *             elif s.startswith('--++'):
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1609, __pyx_L1_error) }
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__39);
      __Pyx_GIVEREF(__pyx_kp_s__39);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s__39);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1609, __pyx_L1_error) }
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__39);
      __Pyx_GIVEREF(__pyx_kp_s__39);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s__39);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_1);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_2, 2, Py_True);
      __pyx_t_1 = 0;
      __pyx_t_6 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L11_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1609, __pyx_L1_error)

      /* "cydifflib.pyx":1610
 *                 # simple intraline change
 *                 yield _make_line(lines,'?',0), _make_line(lines,'?',1), True
 *                 continue             # <<<<<<<<<<<<<<
 *             elif s.startswith('--++'):
 *                 # in delete block, add block coming: we do NOT want to get
 */
      goto __pyx_L4_continue;

      /* "cydifflib.pyx":1607
 *                 # all line pairs get yielded at the next level.
 *                 num_blanks_to_yield = num_blanks_pending
 *             elif s.startswith('-?+?'):             # <<<<<<<<<<<<<<
 *                 # simple intraline change
 *                 yield _make_line(lines,'?',0), _make_line(lines,'?',1), True
 */
    }

    /* "cydifflib.pyx":1611
 *                 yield _make_line(lines,'?',0), _make_line(lines,'?',1), True
 *                 continue
 *             elif s.startswith('--++'):             # <<<<<<<<<<<<<<
 *                 # in delete block, add block coming: we do NOT want to get
 *                 # caught up on blank lines yet, just process the delete line
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_kp_s__45};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1611, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1614
 *                 # in delete block, add block coming: we do NOT want to get
 *                 # caught up on blank lines yet, just process the delete line
 *                 num_blanks_pending -= 1             # <<<<<<<<<<<<<<
 *                 yield _make_line(lines,'-',0), None, True
 *                 continue
 */
      __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_pending);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cydifflib.pyx":1615
 *                 # caught up on blank lines yet, just process the delete line
 *                 num_blanks_pending -= 1
 *                 yield _make_line(lines,'-',0), None, True             # <<<<<<<<<<<<<<
 *                 continue
 *             elif s.startswith(('--?+', '--+', '- ')):
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1615, __pyx_L1_error) }
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__6);
      __Pyx_GIVEREF(__pyx_kp_s__6);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s__6);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_2, 2, Py_True);
      __pyx_t_6 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L12_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1615, __pyx_L1_error)

      /* "cydifflib.pyx":1616
 *                 num_blanks_pending -= 1
 *                 yield _make_line(lines,'-',0), None, True
 *                 continue             # <<<<<<<<<<<<<<
 *             elif s.startswith(('--?+', '--+', '- ')):
 *                 # in delete block and see an intraline change or unchanged line
 */
      goto __pyx_L4_continue;

      /* "cydifflib.pyx":1611
 *                 yield _make_line(lines,'?',0), _make_line(lines,'?',1), True
 *                 continue
 *             elif s.startswith('--++'):             # <<<<<<<<<<<<<<
 *                 # in delete block, add block coming: we do NOT want to get
 *                 # caught up on blank lines yet, just process the delete line
 */
    }

    /* "cydifflib.pyx":1617
 *                 yield _make_line(lines,'-',0), None, True
 *                 continue
 *             elif s.startswith(('--?+', '--+', '- ')):             # <<<<<<<<<<<<<<
 *                 # in delete block and see an intraline change or unchanged line
 *                 # coming: yield the delete line and then blanks
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_tuple__48};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1617, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1620
 *                 # in delete block and see an intraline change or unchanged line
 *                 # coming: yield the delete line and then blanks
 *                 from_line,to_line = _make_line(lines,'-',0), None             # <<<<<<<<<<<<<<
 *                 num_blanks_to_yield,num_blanks_pending = num_blanks_pending-1,0
 *             elif s.startswith('-+?'):
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1620, __pyx_L1_error) }
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1620, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__6);
      __Pyx_GIVEREF(__pyx_kp_s__6);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s__6);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1620, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = Py_None;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_from_line);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_from_line, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_to_line);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_to_line, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cydifflib.pyx":1621
 *                 # coming: yield the delete line and then blanks
 *                 from_line,to_line = _make_line(lines,'-',0), None
 *                 num_blanks_to_yield,num_blanks_pending = num_blanks_pending-1,0             # <<<<<<<<<<<<<<
 *             elif s.startswith('-+?'):
 *                 # intraline change
 */
      __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_int_0;
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_to_yield);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_to_yield, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_pending);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1617
 *                 yield _make_line(lines,'-',0), None, True
 *                 continue
 *             elif s.startswith(('--?+', '--+', '- ')):             # <<<<<<<<<<<<<<
 *                 # in delete block and see an intraline change or unchanged line
 *                 # coming: yield the delete line and then blanks
 */
      goto __pyx_L10;
    }

    /* "cydifflib.pyx":1622
 *                 from_line,to_line = _make_line(lines,'-',0), None
 *                 num_blanks_to_yield,num_blanks_pending = num_blanks_pending-1,0
 *             elif s.startswith('-+?'):             # <<<<<<<<<<<<<<
 *                 # intraline change
 *                 yield _make_line(lines,None,0), _make_line(lines,'?',1), True
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_kp_s__49};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1622, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1624
 *             elif s.startswith('-+?'):
 *                 # intraline change
 *                 yield _make_line(lines,None,0), _make_line(lines,'?',1), True             # <<<<<<<<<<<<<<
 *                 continue
 *             elif s.startswith('-?+'):
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1624, __pyx_L1_error) }
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_6, 1, Py_None);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_int_0);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1624, __pyx_L1_error) }
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__39);
      __Pyx_GIVEREF(__pyx_kp_s__39);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s__39);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_int_1);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_6, 2, Py_True);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 3;
      return __pyx_r;
      __pyx_L13_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1624, __pyx_L1_error)

      /* "cydifflib.pyx":1625
 *                 # intraline change
 *                 yield _make_line(lines,None,0), _make_line(lines,'?',1), True
 *                 continue             # <<<<<<<<<<<<<<
 *             elif s.startswith('-?+'):
 *                 # intraline change
 */
      goto __pyx_L4_continue;

      /* "cydifflib.pyx":1622
 *                 from_line,to_line = _make_line(lines,'-',0), None
 *                 num_blanks_to_yield,num_blanks_pending = num_blanks_pending-1,0
 *             elif s.startswith('-+?'):             # <<<<<<<<<<<<<<
 *                 # intraline change
 *                 yield _make_line(lines,None,0), _make_line(lines,'?',1), True
 */
    }

    /* "cydifflib.pyx":1626
 *                 yield _make_line(lines,None,0), _make_line(lines,'?',1), True
 *                 continue
 *             elif s.startswith('-?+'):             # <<<<<<<<<<<<<<
 *                 # intraline change
 *                 yield _make_line(lines,'?',0), _make_line(lines,None,1), True
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_s__50};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1628
 *             elif s.startswith('-?+'):
 *                 # intraline change
 *                 yield _make_line(lines,'?',0), _make_line(lines,None,1), True             # <<<<<<<<<<<<<<
 *                 continue
 *             elif s.startswith('-'):
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1628, __pyx_L1_error) }
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__39);
      __Pyx_GIVEREF(__pyx_kp_s__39);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s__39);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_int_0);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1628, __pyx_L1_error) }
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_6, 1, Py_None);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_int_1);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_6, 2, Py_True);
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 4;
      return __pyx_r;
      __pyx_L14_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1628, __pyx_L1_error)

      /* "cydifflib.pyx":1629
 *                 # intraline change
 *                 yield _make_line(lines,'?',0), _make_line(lines,None,1), True
 *                 continue             # <<<<<<<<<<<<<<
 *             elif s.startswith('-'):
 *                 # delete FROM line
 */
      goto __pyx_L4_continue;

      /* "cydifflib.pyx":1626
 *                 yield _make_line(lines,None,0), _make_line(lines,'?',1), True
 *                 continue
 *             elif s.startswith('-?+'):             # <<<<<<<<<<<<<<
 *                 # intraline change
 *                 yield _make_line(lines,'?',0), _make_line(lines,None,1), True
 */
    }

    /* "cydifflib.pyx":1630
 *                 yield _make_line(lines,'?',0), _make_line(lines,None,1), True
 *                 continue
 *             elif s.startswith('-'):             # <<<<<<<<<<<<<<
 *                 # delete FROM line
 *                 num_blanks_pending -= 1
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_kp_s__6};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1630, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1632
 *             elif s.startswith('-'):
 *                 # delete FROM line
 *                 num_blanks_pending -= 1             # <<<<<<<<<<<<<<
 *                 yield _make_line(lines,'-',0), None, True
 *                 continue
 */
      __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_pending);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1633
 *                 # delete FROM line
 *                 num_blanks_pending -= 1
 *                 yield _make_line(lines,'-',0), None, True             # <<<<<<<<<<<<<<
 *                 continue
 *             elif s.startswith('+--'):
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1633, __pyx_L1_error) }
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1633, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__6);
      __Pyx_GIVEREF(__pyx_kp_s__6);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s__6);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_int_0);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1633, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1633, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_6, 1, Py_None);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_6, 2, Py_True);
      __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 5;
      return __pyx_r;
      __pyx_L15_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1633, __pyx_L1_error)

      /* "cydifflib.pyx":1634
 *                 num_blanks_pending -= 1
 *                 yield _make_line(lines,'-',0), None, True
 *                 continue             # <<<<<<<<<<<<<<
 *             elif s.startswith('+--'):
 *                 # in add block, delete block coming: we do NOT want to get
 */
      goto __pyx_L4_continue;

      /* "cydifflib.pyx":1630
 *                 yield _make_line(lines,'?',0), _make_line(lines,None,1), True
 *                 continue
 *             elif s.startswith('-'):             # <<<<<<<<<<<<<<
 *                 # delete FROM line
 *                 num_blanks_pending -= 1
 */
    }

    /* "cydifflib.pyx":1635
 *                 yield _make_line(lines,'-',0), None, True
 *                 continue
 *             elif s.startswith('+--'):             # <<<<<<<<<<<<<<
 *                 # in add block, delete block coming: we do NOT want to get
 *                 # caught up on blank lines yet, just process the add line
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_kp_s__51};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1635, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1638
 *                 # in add block, delete block coming: we do NOT want to get
 *                 # caught up on blank lines yet, just process the add line
 *                 num_blanks_pending += 1             # <<<<<<<<<<<<<<
 *                 yield None, _make_line(lines,'+',1), True
 *                 continue
 */
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_pending);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1639
 *                 # caught up on blank lines yet, just process the add line
 *                 num_blanks_pending += 1
 *                 yield None, _make_line(lines,'+',1), True             # <<<<<<<<<<<<<<
 *                 continue
 *             elif s.startswith(('+ ', '+-')):
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1639, __pyx_L1_error) }
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__7);
      __Pyx_GIVEREF(__pyx_kp_s__7);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s__7);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_int_1);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_6, 0, Py_None);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_6, 2, Py_True);
      __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 6;
      return __pyx_r;
      __pyx_L16_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1639, __pyx_L1_error)

      /* "cydifflib.pyx":1640
 *                 num_blanks_pending += 1
 *                 yield None, _make_line(lines,'+',1), True
 *                 continue             # <<<<<<<<<<<<<<
 *             elif s.startswith(('+ ', '+-')):
 *                 # will be leaving an add block: yield blanks then add line
 */
      goto __pyx_L4_continue;

      /* "cydifflib.pyx":1635
 *                 yield _make_line(lines,'-',0), None, True
 *                 continue
 *             elif s.startswith('+--'):             # <<<<<<<<<<<<<<
 *                 # in add block, delete block coming: we do NOT want to get
 *                 # caught up on blank lines yet, just process the add line
 */
    }

    /* "cydifflib.pyx":1641
 *                 yield None, _make_line(lines,'+',1), True
 *                 continue
 *             elif s.startswith(('+ ', '+-')):             # <<<<<<<<<<<<<<
 *                 # will be leaving an add block: yield blanks then add line
 *                 from_line, to_line = None, _make_line(lines,'+',1)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_tuple__53};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1643
 *             elif s.startswith(('+ ', '+-')):
 *                 # will be leaving an add block: yield blanks then add line
 *                 from_line, to_line = None, _make_line(lines,'+',1)             # <<<<<<<<<<<<<<
 *                 num_blanks_to_yield,num_blanks_pending = num_blanks_pending+1,0
 *             elif s.startswith('+'):
 */
      __pyx_t_6 = Py_None;
      __Pyx_INCREF(__pyx_t_6);
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1643, __pyx_L1_error) }
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__7);
      __Pyx_GIVEREF(__pyx_kp_s__7);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s__7);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_1);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_from_line);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_from_line, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_to_line);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_to_line, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1644
 *                 # will be leaving an add block: yield blanks then add line
 *                 from_line, to_line = None, _make_line(lines,'+',1)
 *                 num_blanks_to_yield,num_blanks_pending = num_blanks_pending+1,0             # <<<<<<<<<<<<<<
 *             elif s.startswith('+'):
 *                 # inside an add block, yield the add line
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __pyx_int_0;
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_to_yield);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_to_yield, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_pending);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1641
 *                 yield None, _make_line(lines,'+',1), True
 *                 continue
 *             elif s.startswith(('+ ', '+-')):             # <<<<<<<<<<<<<<
 *                 # will be leaving an add block: yield blanks then add line
 *                 from_line, to_line = None, _make_line(lines,'+',1)
 */
      goto __pyx_L10;
    }

    /* "cydifflib.pyx":1645
 *                 from_line, to_line = None, _make_line(lines,'+',1)
 *                 num_blanks_to_yield,num_blanks_pending = num_blanks_pending+1,0
 *             elif s.startswith('+'):             # <<<<<<<<<<<<<<
 *                 # inside an add block, yield the add line
 *                 num_blanks_pending += 1
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_s__7};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1647
 *             elif s.startswith('+'):
 *                 # inside an add block, yield the add line
 *                 num_blanks_pending += 1             # <<<<<<<<<<<<<<
 *                 yield None, _make_line(lines,'+',1), True
 *                 continue
 */
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_pending);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_pending, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1648
 *                 # inside an add block, yield the add line
 *                 num_blanks_pending += 1
 *                 yield None, _make_line(lines,'+',1), True             # <<<<<<<<<<<<<<
 *                 continue
 *             elif s.startswith(' '):
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1648, __pyx_L1_error) }
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(__pyx_kp_s__7);
      __Pyx_GIVEREF(__pyx_kp_s__7);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s__7);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_int_1);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_6, 0, Py_None);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_6, 2, Py_True);
      __pyx_t_1 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 7;
      return __pyx_r;
      __pyx_L17_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1648, __pyx_L1_error)

      /* "cydifflib.pyx":1649
 *                 num_blanks_pending += 1
 *                 yield None, _make_line(lines,'+',1), True
 *                 continue             # <<<<<<<<<<<<<<
 *             elif s.startswith(' '):
 *                 # unchanged text, yield it to both sides
 */
      goto __pyx_L4_continue;

      /* "cydifflib.pyx":1645
 *                 from_line, to_line = None, _make_line(lines,'+',1)
 *                 num_blanks_to_yield,num_blanks_pending = num_blanks_pending+1,0
 *             elif s.startswith('+'):             # <<<<<<<<<<<<<<
 *                 # inside an add block, yield the add line
 *                 num_blanks_pending += 1
 */
    }

    /* "cydifflib.pyx":1650
 *                 yield None, _make_line(lines,'+',1), True
 *                 continue
 *             elif s.startswith(' '):             # <<<<<<<<<<<<<<
 *                 # unchanged text, yield it to both sides
 *                 yield _make_line(lines[:],None,0),_make_line(lines,None,1),False
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_s__4};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1650, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1652
 *             elif s.startswith(' '):
 *                 # unchanged text, yield it to both sides
 *                 yield _make_line(lines[:],None,0),_make_line(lines,None,1),False             # <<<<<<<<<<<<<<
 *                 continue
 *             # Catch up on the blank lines so when we yield the next from/to
 */
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1652, __pyx_L1_error) }
      __pyx_t_6 = __Pyx_PyList_GetSlice(__pyx_cur_scope->__pyx_v_lines, 0, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_0);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line)) { __Pyx_RaiseClosureNameError("_make_line"); __PYX_ERR(0, 1652, __pyx_L1_error) }
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lines);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lines);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_lines);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_1);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__make_line, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __Pyx_INCREF(Py_False);
      __Pyx_GIVEREF(Py_False);
      PyTuple_SET_ITEM(__pyx_t_1, 2, Py_False);
      __pyx_t_6 = 0;
      __pyx_t_2 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 8;
      return __pyx_r;
      __pyx_L18_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1652, __pyx_L1_error)

      /* "cydifflib.pyx":1653
 *                 # unchanged text, yield it to both sides
 *                 yield _make_line(lines[:],None,0),_make_line(lines,None,1),False
 *                 continue             # <<<<<<<<<<<<<<
 *             # Catch up on the blank lines so when we yield the next from/to
 *             # pair, they are lined up.
 */
      goto __pyx_L4_continue;

      /* "cydifflib.pyx":1650
 *                 yield None, _make_line(lines,'+',1), True
 *                 continue
 *             elif s.startswith(' '):             # <<<<<<<<<<<<<<
 *                 # unchanged text, yield it to both sides
 *                 yield _make_line(lines[:],None,0),_make_line(lines,None,1),False
 */
    }
    __pyx_L10:;

    /* "cydifflib.pyx":1656
 *             # Catch up on the blank lines so when we yield the next from/to
 *             # pair, they are lined up.
 *             while(num_blanks_to_yield < 0):             # <<<<<<<<<<<<<<
 *                 num_blanks_to_yield += 1
 *                 yield None,('','\n'),True
 */
    while (1) {
      __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_num_blanks_to_yield, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1656, __pyx_L1_error)
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1656, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_4) break;

      /* "cydifflib.pyx":1657
 *             # pair, they are lined up.
 *             while(num_blanks_to_yield < 0):
 *                 num_blanks_to_yield += 1             # <<<<<<<<<<<<<<
 *                 yield None,('','\n'),True
 *             while(num_blanks_to_yield > 0):
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_num_blanks_to_yield, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1657, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_to_yield);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_to_yield, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1658
 *             while(num_blanks_to_yield < 0):
 *                 num_blanks_to_yield += 1
 *                 yield None,('','\n'),True             # <<<<<<<<<<<<<<
 *             while(num_blanks_to_yield > 0):
 *                 num_blanks_to_yield -= 1
 */
      __Pyx_INCREF(__pyx_tuple__55);
      __pyx_r = __pyx_tuple__55;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 9;
      return __pyx_r;
      __pyx_L21_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1658, __pyx_L1_error)
    }

    /* "cydifflib.pyx":1659
 *                 num_blanks_to_yield += 1
 *                 yield None,('','\n'),True
 *             while(num_blanks_to_yield > 0):             # <<<<<<<<<<<<<<
 *                 num_blanks_to_yield -= 1
 *                 yield ('','\n'),None,True
 */
    while (1) {
      __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_num_blanks_to_yield, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1659, __pyx_L1_error)
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1659, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_4) break;

      /* "cydifflib.pyx":1660
 *                 yield None,('','\n'),True
 *             while(num_blanks_to_yield > 0):
 *                 num_blanks_to_yield -= 1             # <<<<<<<<<<<<<<
 *                 yield ('','\n'),None,True
 *             if s.startswith('X'):
 */
      __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_num_blanks_to_yield, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_num_blanks_to_yield);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_num_blanks_to_yield, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "cydifflib.pyx":1661
 *             while(num_blanks_to_yield > 0):
 *                 num_blanks_to_yield -= 1
 *                 yield ('','\n'),None,True             # <<<<<<<<<<<<<<
 *             if s.startswith('X'):
 *                 return
 */
      __Pyx_INCREF(__pyx_tuple__56);
      __pyx_r = __pyx_tuple__56;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 10;
      return __pyx_r;
      __pyx_L24_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1661, __pyx_L1_error)
    }

    /* "cydifflib.pyx":1662
 *                 num_blanks_to_yield -= 1
 *                 yield ('','\n'),None,True
 *             if s.startswith('X'):             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_s, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_n_s_X};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1662, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1662, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "cydifflib.pyx":1663
 *                 yield ('','\n'),None,True
 *             if s.startswith('X'):
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 yield from_line,to_line,True
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "cydifflib.pyx":1662
 *                 num_blanks_to_yield -= 1
 *                 yield ('','\n'),None,True
 *             if s.startswith('X'):             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    }

    /* "cydifflib.pyx":1665
 *                 return
 *             else:
 *                 yield from_line,to_line,True             # <<<<<<<<<<<<<<
 * 
 *     def _line_pair_iterator():
 */
    /*else*/ {
      if (unlikely(!__pyx_cur_scope->__pyx_v_from_line)) { __Pyx_RaiseUnboundLocalError("from_line"); __PYX_ERR(0, 1665, __pyx_L1_error) }
      if (unlikely(!__pyx_cur_scope->__pyx_v_to_line)) { __Pyx_RaiseUnboundLocalError("to_line"); __PYX_ERR(0, 1665, __pyx_L1_error) }
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1665, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_from_line);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_from_line);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_from_line);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_to_line);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_to_line);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_to_line);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_1, 2, Py_True);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 11;
      return __pyx_r;
      __pyx_L26_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1665, __pyx_L1_error)
    }
    __pyx_L4_continue:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1579
 *         return (num_lines[side],text)
 * 
 *     def _line_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_line_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_6_mdiff_7generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1667
 *                 yield from_line,to_line,True
 * 
 *     def _line_pair_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_6_mdiff_6_line_pair_iterator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_6_mdiff_5_line_pair_iterator, "Yields from/to lines of text with a change indication.\n\n        This function is an iterator.  It itself pulls lines from the line\n        iterator.  Its difference from that iterator is that this function\n        always yields a pair of from/to text lines (with the change\n        indication).  If necessary it will collect single from/to lines\n        until it has a matching pair from/to pair to yield.\n\n        Note, this function is purposefully not defined at the module scope so\n        that data it needs from its parent function (within whose context it\n        is defined) does not need to be of module scope.\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_6_mdiff_6_line_pair_iterator = {"_line_pair_iterator", (PyCFunction)__pyx_pw_9cydifflib_6_mdiff_6_line_pair_iterator, METH_NOARGS, __pyx_doc_9cydifflib_6_mdiff_5_line_pair_iterator};
static PyObject *__pyx_pw_9cydifflib_6_mdiff_6_line_pair_iterator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_line_pair_iterator (wrapper)", 0);
  __pyx_r = __pyx_pf_9cydifflib_6_mdiff_5_line_pair_iterator(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_6_mdiff_5_line_pair_iterator(PyObject *__pyx_self) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_line_pair_iterator", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *)__pyx_tp_new_9cydifflib___pyx_scope_struct_18__line_pair_iterator(__pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1667, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_6_mdiff_7generator18, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_line_pair_iterator, __pyx_n_s_mdiff_locals__line_pair_iterato, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1667, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib._mdiff._line_pair_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_6_mdiff_7generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_line_pair_iterator", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L30_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1667, __pyx_L1_error)

  /* "cydifflib.pyx":1680
 *         is defined) does not need to be of module scope.
 *         """
 *         line_iterator = _line_iterator()             # <<<<<<<<<<<<<<
 *         fromlines,tolines=[],[]
 *         while True:
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__line_iterator)) { __Pyx_RaiseClosureNameError("_line_iterator"); __PYX_ERR(0, 1680, __pyx_L1_error) }
  __pyx_t_1 = __pyx_pf_9cydifflib_6_mdiff_2_line_iterator(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__line_iterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_line_iterator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1681
 *         """
 *         line_iterator = _line_iterator()
 *         fromlines,tolines=[],[]             # <<<<<<<<<<<<<<
 *         while True:
 *             # Collecting lines of text until we have a from/to pair
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_fromlines = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_tolines = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":1682
 *         line_iterator = _line_iterator()
 *         fromlines,tolines=[],[]
 *         while True:             # <<<<<<<<<<<<<<
 *             # Collecting lines of text until we have a from/to pair
 *             while (len(fromlines)==0 or len(tolines)==0):
 */
  while (1) {

    /* "cydifflib.pyx":1684
 *         while True:
 *             # Collecting lines of text until we have a from/to pair
 *             while (len(fromlines)==0 or len(tolines)==0):             # <<<<<<<<<<<<<<
 *                 try:
 *                     from_line, to_line, found_diff = next(line_iterator)
 */
    while (1) {
      __pyx_t_4 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_fromlines); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1684, __pyx_L1_error)
      __pyx_t_5 = ((__pyx_t_4 == 0) != 0);
      if (!__pyx_t_5) {
      } else {
        __pyx_t_3 = __pyx_t_5;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_4 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_tolines); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1684, __pyx_L1_error)
      __pyx_t_5 = ((__pyx_t_4 == 0) != 0);
      __pyx_t_3 = __pyx_t_5;
      __pyx_L8_bool_binop_done:;
      if (!__pyx_t_3) break;

      /* "cydifflib.pyx":1685
 *             # Collecting lines of text until we have a from/to pair
 *             while (len(fromlines)==0 or len(tolines)==0):
 *                 try:             # <<<<<<<<<<<<<<
 *                     from_line, to_line, found_diff = next(line_iterator)
 *                 except StopIteration:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {

          /* "cydifflib.pyx":1686
 *             while (len(fromlines)==0 or len(tolines)==0):
 *                 try:
 *                     from_line, to_line, found_diff = next(line_iterator)             # <<<<<<<<<<<<<<
 *                 except StopIteration:
 *                     return
 */
          __pyx_t_2 = __Pyx_PyIter_Next(__pyx_cur_scope->__pyx_v_line_iterator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1686, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_2);
          if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
            PyObject* sequence = __pyx_t_2;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 1686, __pyx_L10_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
            } else {
              __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
            }
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            #else
            __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1686, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1686, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_10 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1686, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1686, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
            index = 0; __pyx_t_1 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_1)) goto __pyx_L18_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_1);
            index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L18_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_9);
            index = 2; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L18_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_10);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 3) < 0) __PYX_ERR(0, 1686, __pyx_L10_error)
            __pyx_t_12 = NULL;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L19_unpacking_done;
            __pyx_L18_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 1686, __pyx_L10_error)
            __pyx_L19_unpacking_done:;
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_from_line);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_from_line, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_to_line);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_to_line, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_found_diff);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_found_diff, __pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_10);
          __pyx_t_10 = 0;

          /* "cydifflib.pyx":1685
 *             # Collecting lines of text until we have a from/to pair
 *             while (len(fromlines)==0 or len(tolines)==0):
 *                 try:             # <<<<<<<<<<<<<<
 *                     from_line, to_line, found_diff = next(line_iterator)
 *                 except StopIteration:
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L17_try_end;
        __pyx_L10_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "cydifflib.pyx":1687
 *                 try:
 *                     from_line, to_line, found_diff = next(line_iterator)
 *                 except StopIteration:             # <<<<<<<<<<<<<<
 *                     return
 *                 if from_line is not None:
 */
        __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
        if (__pyx_t_13) {
          __Pyx_AddTraceback("cydifflib._mdiff._line_pair_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_10, &__pyx_t_9) < 0) __PYX_ERR(0, 1687, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GOTREF(__pyx_t_9);

          /* "cydifflib.pyx":1688
 *                     from_line, to_line, found_diff = next(line_iterator)
 *                 except StopIteration:
 *                     return             # <<<<<<<<<<<<<<
 *                 if from_line is not None:
 *                     fromlines.append((from_line,found_diff))
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = NULL;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L13_except_return;
        }
        goto __pyx_L12_except_error;
        __pyx_L12_except_error:;

        /* "cydifflib.pyx":1685
 *             # Collecting lines of text until we have a from/to pair
 *             while (len(fromlines)==0 or len(tolines)==0):
 *                 try:             # <<<<<<<<<<<<<<
 *                     from_line, to_line, found_diff = next(line_iterator)
 *                 except StopIteration:
 */
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L13_except_return:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L0;
        __pyx_L17_try_end:;
      }

      /* "cydifflib.pyx":1689
 *                 except StopIteration:
 *                     return
 *                 if from_line is not None:             # <<<<<<<<<<<<<<
 *                     fromlines.append((from_line,found_diff))
 *                 if to_line is not None:
 */
      __pyx_t_3 = (__pyx_cur_scope->__pyx_v_from_line != Py_None);
      __pyx_t_5 = (__pyx_t_3 != 0);
      if (__pyx_t_5) {

        /* "cydifflib.pyx":1690
 *                     return
 *                 if from_line is not None:
 *                     fromlines.append((from_line,found_diff))             # <<<<<<<<<<<<<<
 *                 if to_line is not None:
 *                     tolines.append((to_line,found_diff))
 */
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1690, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_from_line);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_from_line);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_cur_scope->__pyx_v_from_line);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_found_diff);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_found_diff);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_cur_scope->__pyx_v_found_diff);
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_fromlines, __pyx_t_9); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 1690, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "cydifflib.pyx":1689
 *                 except StopIteration:
 *                     return
 *                 if from_line is not None:             # <<<<<<<<<<<<<<
 *                     fromlines.append((from_line,found_diff))
 *                 if to_line is not None:
 */
      }

      /* "cydifflib.pyx":1691
 *                 if from_line is not None:
 *                     fromlines.append((from_line,found_diff))
 *                 if to_line is not None:             # <<<<<<<<<<<<<<
 *                     tolines.append((to_line,found_diff))
 *             # Once we have a pair, remove them from the collection and yield it
 */
      __pyx_t_5 = (__pyx_cur_scope->__pyx_v_to_line != Py_None);
      __pyx_t_3 = (__pyx_t_5 != 0);
      if (__pyx_t_3) {

        /* "cydifflib.pyx":1692
 *                     fromlines.append((from_line,found_diff))
 *                 if to_line is not None:
 *                     tolines.append((to_line,found_diff))             # <<<<<<<<<<<<<<
 *             # Once we have a pair, remove them from the collection and yield it
 *             from_line, fromDiff = fromlines.pop(0)
 */
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1692, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_to_line);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_to_line);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_cur_scope->__pyx_v_to_line);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_found_diff);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_found_diff);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_cur_scope->__pyx_v_found_diff);
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_tolines, __pyx_t_9); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 1692, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "cydifflib.pyx":1691
 *                 if from_line is not None:
 *                     fromlines.append((from_line,found_diff))
 *                 if to_line is not None:             # <<<<<<<<<<<<<<
 *                     tolines.append((to_line,found_diff))
 *             # Once we have a pair, remove them from the collection and yield it
 */
      }
    }

    /* "cydifflib.pyx":1694
 *                     tolines.append((to_line,found_diff))
 *             # Once we have a pair, remove them from the collection and yield it
 *             from_line, fromDiff = fromlines.pop(0)             # <<<<<<<<<<<<<<
 *             to_line, to_diff = tolines.pop(0)
 *             yield (from_line,to_line,fromDiff or to_diff)
 */
    __pyx_t_9 = __Pyx_PyList_PopIndex(__pyx_cur_scope->__pyx_v_fromlines, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
      PyObject* sequence = __pyx_t_9;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1694, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_1 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1);
      index = 0; __pyx_t_10 = __pyx_t_12(__pyx_t_1); if (unlikely(!__pyx_t_10)) goto __pyx_L24_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      index = 1; __pyx_t_2 = __pyx_t_12(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L24_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_1), 2) < 0) __PYX_ERR(0, 1694, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L25_unpacking_done;
      __pyx_L24_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1694, __pyx_L1_error)
      __pyx_L25_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_from_line);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_from_line, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fromDiff);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fromDiff, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":1695
 *             # Once we have a pair, remove them from the collection and yield it
 *             from_line, fromDiff = fromlines.pop(0)
 *             to_line, to_diff = tolines.pop(0)             # <<<<<<<<<<<<<<
 *             yield (from_line,to_line,fromDiff or to_diff)
 * 
 */
    __pyx_t_9 = __Pyx_PyList_PopIndex(__pyx_cur_scope->__pyx_v_tolines, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
      PyObject* sequence = __pyx_t_9;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1695, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1695, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1695, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_1 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1695, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1);
      index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L26_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_1); if (unlikely(!__pyx_t_10)) goto __pyx_L26_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_1), 2) < 0) __PYX_ERR(0, 1695, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L27_unpacking_done;
      __pyx_L26_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1695, __pyx_L1_error)
      __pyx_L27_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_to_line);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_to_line, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_to_diff);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_to_diff, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_10);
    __pyx_t_10 = 0;

    /* "cydifflib.pyx":1696
 *             from_line, fromDiff = fromlines.pop(0)
 *             to_line, to_diff = tolines.pop(0)
 *             yield (from_line,to_line,fromDiff or to_diff)             # <<<<<<<<<<<<<<
 * 
 *     # Handle case where user does not want context differencing, just yield
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_fromDiff); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1696, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromDiff);
      __pyx_t_9 = __pyx_cur_scope->__pyx_v_fromDiff;
      goto __pyx_L28_bool_binop_done;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_to_diff);
    __pyx_t_9 = __pyx_cur_scope->__pyx_v_to_diff;
    __pyx_L28_bool_binop_done:;
    __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_from_line);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_from_line);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_cur_scope->__pyx_v_from_line);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_to_line);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_to_line);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_cur_scope->__pyx_v_to_line);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L30_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1696, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1667
 *                 yield from_line,to_line,True
 * 
 *     def _line_pair_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("_line_pair_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1481
 *     return Differ(linejunk, charjunk).compare(a, b)
 * 
 * def _mdiff(fromlines, tolines, context=None, linejunk=None,             # <<<<<<<<<<<<<<
 *            charjunk=IS_CHARACTER_JUNK):
 *     r"""Returns generator yielding marked up from/to side by side differences.
 */

static PyObject *__pyx_gb_9cydifflib_27generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mdiff", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_yield_from;
    case 2: goto __pyx_L23_resume_from_yield;
    case 3: goto __pyx_L26_resume_from_yield;
    case 4: goto __pyx_L40_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1481, __pyx_L1_error)

  /* "cydifflib.pyx":1515
 *     function and they in turn will be passed to ndiff.
 *     """
 *     import re             # <<<<<<<<<<<<<<
 * 
 *     # regular expression for finding intraline change indices
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_re, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_re = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1518
 * 
 *     # regular expression for finding intraline change indices
 *     change_re = re.compile(r'(\++|\-+|\^+)')             # <<<<<<<<<<<<<<
 * 
 *     # create the difference iterator to generate the differences
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_re, __pyx_n_s_compile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_s__58};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_change_re = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1521
 * 
 *     # create the difference iterator to generate the differences
 *     diff_lines_iterator = ndiff(fromlines,tolines,linejunk,charjunk)             # <<<<<<<<<<<<<<
 * 
 *     def _make_line(lines, format_key, side, num_lines=[0,0]):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ndiff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fromlines, __pyx_cur_scope->__pyx_v_tolines, __pyx_cur_scope->__pyx_v_linejunk, __pyx_cur_scope->__pyx_v_charjunk};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_diff_lines_iterator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1523
 *     diff_lines_iterator = ndiff(fromlines,tolines,linejunk,charjunk)
 * 
 *     def _make_line(lines, format_key, side, num_lines=[0,0]):             # <<<<<<<<<<<<<<
 *         """Returns line of text with user's change markup and line formatting.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6_mdiff_1_make_line, 0, __pyx_n_s_mdiff_locals__make_line, ((PyObject*)__pyx_cur_scope), __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_1, sizeof(__pyx_defaults4), 1)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_0);
  __Pyx_CyFunction_Defaults(__pyx_defaults4, __pyx_t_1)->__pyx_arg_num_lines = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_1, __pyx_pf_9cydifflib_39__defaults__);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v__make_line = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1579
 *         return (num_lines[side],text)
 * 
 *     def _line_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6_mdiff_3_line_iterator, 0, __pyx_n_s_mdiff_locals__line_iterator, ((PyObject*)__pyx_cur_scope), __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v__line_iterator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1667
 *                 yield from_line,to_line,True
 * 
 *     def _line_pair_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6_mdiff_6_line_pair_iterator, 0, __pyx_n_s_mdiff_locals__line_pair_iterato, ((PyObject*)__pyx_cur_scope), __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v__line_pair_iterator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1700
 *     # Handle case where user does not want context differencing, just yield
 *     # them up without doing anything else with them.
 *     line_pair_iterator = _line_pair_iterator()             # <<<<<<<<<<<<<<
 *     if context is None:
 *         yield from line_pair_iterator
 */
  __pyx_t_1 = __pyx_pf_9cydifflib_6_mdiff_5_line_pair_iterator(__pyx_cur_scope->__pyx_v__line_pair_iterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_line_pair_iterator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1701
 *     # them up without doing anything else with them.
 *     line_pair_iterator = _line_pair_iterator()
 *     if context is None:             # <<<<<<<<<<<<<<
 *         yield from line_pair_iterator
 *     # Handle case where user wants context differencing.  We must do some
 */
  __pyx_t_5 = (__pyx_cur_scope->__pyx_v_context == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "cydifflib.pyx":1702
 *     line_pair_iterator = _line_pair_iterator()
 *     if context is None:
 *         yield from line_pair_iterator             # <<<<<<<<<<<<<<
 *     # Handle case where user wants context differencing.  We must do some
 *     # storage of lines until we know for sure that they are to be yielded.
 */
    __pyx_r = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_cur_scope->__pyx_v_line_pair_iterator);
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L5_resume_from_yield_from:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1702, __pyx_L1_error)
    } else {
      PyObject* exc_type = __Pyx_PyErr_Occurred();
      if (exc_type) {
        if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
        else __PYX_ERR(0, 1702, __pyx_L1_error)
      }
    }

    /* "cydifflib.pyx":1701
 *     # them up without doing anything else with them.
 *     line_pair_iterator = _line_pair_iterator()
 *     if context is None:             # <<<<<<<<<<<<<<
 *         yield from line_pair_iterator
 *     # Handle case where user wants context differencing.  We must do some
 */
    goto __pyx_L4;
  }

  /* "cydifflib.pyx":1706
 *     # storage of lines until we know for sure that they are to be yielded.
 *     else:
 *         context += 1             # <<<<<<<<<<<<<<
 *         lines_to_write = 0
 *         while True:
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_context, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_context);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_context, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":1707
 *     else:
 *         context += 1
 *         lines_to_write = 0             # <<<<<<<<<<<<<<
 *         while True:
 *             # Store lines up until we find a difference, note use of a
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    __pyx_cur_scope->__pyx_v_lines_to_write = __pyx_int_0;

    /* "cydifflib.pyx":1708
 *         context += 1
 *         lines_to_write = 0
 *         while True:             # <<<<<<<<<<<<<<
 *             # Store lines up until we find a difference, note use of a
 *             # circular queue because we only need to keep around what
 */
    while (1) {

      /* "cydifflib.pyx":1712
 *             # circular queue because we only need to keep around what
 *             # we need for context.
 *             index, contextLines = 0, [None]*(context)             # <<<<<<<<<<<<<<
 *             found_diff = False
 *             while(found_diff is False):
 */
      __pyx_t_1 = __pyx_int_0;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1712, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, 0, Py_None);
      { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_cur_scope->__pyx_v_context); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_temp);
        __Pyx_DECREF(__pyx_t_2);
        __pyx_t_2 = __pyx_temp;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_index);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_index, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_contextLines);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_contextLines, ((PyObject*)__pyx_t_2));
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cydifflib.pyx":1713
 *             # we need for context.
 *             index, contextLines = 0, [None]*(context)
 *             found_diff = False             # <<<<<<<<<<<<<<
 *             while(found_diff is False):
 *                 try:
 */
      __Pyx_INCREF(Py_False);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_found_diff);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_found_diff, Py_False);
      __Pyx_GIVEREF(Py_False);

      /* "cydifflib.pyx":1714
 *             index, contextLines = 0, [None]*(context)
 *             found_diff = False
 *             while(found_diff is False):             # <<<<<<<<<<<<<<
 *                 try:
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 */
      while (1) {
        __pyx_t_6 = (__pyx_cur_scope->__pyx_v_found_diff == Py_False);
        __pyx_t_5 = (__pyx_t_6 != 0);
        if (!__pyx_t_5) break;

        /* "cydifflib.pyx":1715
 *             found_diff = False
 *             while(found_diff is False):
 *                 try:             # <<<<<<<<<<<<<<
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 *                 except StopIteration:
 */
        {
          __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_9);
          /*try:*/ {

            /* "cydifflib.pyx":1716
 *             while(found_diff is False):
 *                 try:
 *                     from_line, to_line, found_diff = next(line_pair_iterator)             # <<<<<<<<<<<<<<
 *                 except StopIteration:
 *                     return
 */
            __pyx_t_2 = __Pyx_PyIter_Next(__pyx_cur_scope->__pyx_v_line_pair_iterator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1716, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_2);
            if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
              PyObject* sequence = __pyx_t_2;
              Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
              if (unlikely(size != 3)) {
                if (size > 3) __Pyx_RaiseTooManyValuesError(3);
                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                __PYX_ERR(0, 1716, __pyx_L10_error)
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              if (likely(PyTuple_CheckExact(sequence))) {
                __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
                __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
                __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
              } else {
                __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
                __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
                __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
              }
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_10);
              #else
              __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1716, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1716, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_10 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1716, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_10);
              #endif
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            } else {
              Py_ssize_t index = -1;
              __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1716, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
              index = 0; __pyx_t_1 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_1)) goto __pyx_L18_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_1);
              index = 1; __pyx_t_3 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_3)) goto __pyx_L18_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_3);
              index = 2; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L18_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_10);
              if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 3) < 0) __PYX_ERR(0, 1716, __pyx_L10_error)
              __pyx_t_12 = NULL;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              goto __pyx_L19_unpacking_done;
              __pyx_L18_unpacking_failed:;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_12 = NULL;
              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
              __PYX_ERR(0, 1716, __pyx_L10_error)
              __pyx_L19_unpacking_done:;
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_from_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_from_line, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_to_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_to_line, __pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_found_diff);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_found_diff, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_10);
            __pyx_t_10 = 0;

            /* "cydifflib.pyx":1715
 *             found_diff = False
 *             while(found_diff is False):
 *                 try:             # <<<<<<<<<<<<<<
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 *                 except StopIteration:
 */
          }
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L17_try_end;
          __pyx_L10_error:;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "cydifflib.pyx":1717
 *                 try:
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 *                 except StopIteration:             # <<<<<<<<<<<<<<
 *                     return
 *                 i = index % context
 */
          __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
          if (__pyx_t_4) {
            __Pyx_AddTraceback("cydifflib._mdiff", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_10, &__pyx_t_3) < 0) __PYX_ERR(0, 1717, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_GOTREF(__pyx_t_3);

            /* "cydifflib.pyx":1718
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 *                 except StopIteration:
 *                     return             # <<<<<<<<<<<<<<
 *                 i = index % context
 *                 contextLines[i] = (from_line, to_line, found_diff)
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_r = NULL;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L13_except_return;
          }
          goto __pyx_L12_except_error;
          __pyx_L12_except_error:;

          /* "cydifflib.pyx":1715
 *             found_diff = False
 *             while(found_diff is False):
 *                 try:             # <<<<<<<<<<<<<<
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 *                 except StopIteration:
 */
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
          goto __pyx_L1_error;
          __pyx_L13_except_return:;
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
          goto __pyx_L0;
          __pyx_L17_try_end:;
        }

        /* "cydifflib.pyx":1719
 *                 except StopIteration:
 *                     return
 *                 i = index % context             # <<<<<<<<<<<<<<
 *                 contextLines[i] = (from_line, to_line, found_diff)
 *                 index += 1
 */
        __pyx_t_3 = PyNumber_Remainder(__pyx_cur_scope->__pyx_v_index, __pyx_cur_scope->__pyx_v_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1719, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;

        /* "cydifflib.pyx":1720
 *                     return
 *                 i = index % context
 *                 contextLines[i] = (from_line, to_line, found_diff)             # <<<<<<<<<<<<<<
 *                 index += 1
 *             # Yield lines that we have collected so far, but first yield
 */
        __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1720, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_from_line);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_from_line);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_from_line);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_to_line);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_to_line);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_cur_scope->__pyx_v_to_line);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_found_diff);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_found_diff);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_cur_scope->__pyx_v_found_diff);
        if (unlikely((PyObject_SetItem(__pyx_cur_scope->__pyx_v_contextLines, __pyx_cur_scope->__pyx_v_i, __pyx_t_3) < 0))) __PYX_ERR(0, 1720, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "cydifflib.pyx":1721
 *                 i = index % context
 *                 contextLines[i] = (from_line, to_line, found_diff)
 *                 index += 1             # <<<<<<<<<<<<<<
 *             # Yield lines that we have collected so far, but first yield
 *             # the user's separator.
 */
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_index, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_index);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_index, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
      }

      /* "cydifflib.pyx":1724
 *             # Yield lines that we have collected so far, but first yield
 *             # the user's separator.
 *             if index > context:             # <<<<<<<<<<<<<<
 *                 yield None, None, None
 *                 lines_to_write = context
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_index, __pyx_cur_scope->__pyx_v_context, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1724, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1724, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "cydifflib.pyx":1725
 *             # the user's separator.
 *             if index > context:
 *                 yield None, None, None             # <<<<<<<<<<<<<<
 *                 lines_to_write = context
 *             else:
 */
        __Pyx_INCREF(__pyx_tuple__65);
        __pyx_r = __pyx_tuple__65;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 2;
        return __pyx_r;
        __pyx_L23_resume_from_yield:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1725, __pyx_L1_error)

        /* "cydifflib.pyx":1726
 *             if index > context:
 *                 yield None, None, None
 *                 lines_to_write = context             # <<<<<<<<<<<<<<
 *             else:
 *                 lines_to_write = index
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_context);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_lines_to_write);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_lines_to_write, __pyx_cur_scope->__pyx_v_context);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_context);

        /* "cydifflib.pyx":1724
 *             # Yield lines that we have collected so far, but first yield
 *             # the user's separator.
 *             if index > context:             # <<<<<<<<<<<<<<
 *                 yield None, None, None
 *                 lines_to_write = context
 */
        goto __pyx_L22;
      }

      /* "cydifflib.pyx":1728
 *                 lines_to_write = context
 *             else:
 *                 lines_to_write = index             # <<<<<<<<<<<<<<
 *                 index = 0
 *             while(lines_to_write):
 */
      /*else*/ {
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_index);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_lines_to_write);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_lines_to_write, __pyx_cur_scope->__pyx_v_index);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_index);

        /* "cydifflib.pyx":1729
 *             else:
 *                 lines_to_write = index
 *                 index = 0             # <<<<<<<<<<<<<<
 *             while(lines_to_write):
 *                 i = index % context
 */
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_index);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_index, __pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
      }
      __pyx_L22:;

      /* "cydifflib.pyx":1730
 *                 lines_to_write = index
 *                 index = 0
 *             while(lines_to_write):             # <<<<<<<<<<<<<<
 *                 i = index % context
 *                 index += 1
 */
      while (1) {
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_lines_to_write); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1730, __pyx_L1_error)
        if (!__pyx_t_5) break;

        /* "cydifflib.pyx":1731
 *                 index = 0
 *             while(lines_to_write):
 *                 i = index % context             # <<<<<<<<<<<<<<
 *                 index += 1
 *                 yield contextLines[i]
 */
        __pyx_t_3 = PyNumber_Remainder(__pyx_cur_scope->__pyx_v_index, __pyx_cur_scope->__pyx_v_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1731, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;

        /* "cydifflib.pyx":1732
 *             while(lines_to_write):
 *                 i = index % context
 *                 index += 1             # <<<<<<<<<<<<<<
 *                 yield contextLines[i]
 *                 lines_to_write -= 1
 */
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_index, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_index);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_index, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;

        /* "cydifflib.pyx":1733
 *                 i = index % context
 *                 index += 1
 *                 yield contextLines[i]             # <<<<<<<<<<<<<<
 *                 lines_to_write -= 1
 *             # Now yield the context lines after the change
 */
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_contextLines, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1733, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 3;
        return __pyx_r;
        __pyx_L26_resume_from_yield:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1733, __pyx_L1_error)

        /* "cydifflib.pyx":1734
 *                 index += 1
 *                 yield contextLines[i]
 *                 lines_to_write -= 1             # <<<<<<<<<<<<<<
 *             # Now yield the context lines after the change
 *             lines_to_write = context-1
 */
        __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_lines_to_write, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1734, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_lines_to_write);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_lines_to_write, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
      }

      /* "cydifflib.pyx":1736
 *                 lines_to_write -= 1
 *             # Now yield the context lines after the change
 *             lines_to_write = context-1             # <<<<<<<<<<<<<<
 *             try:
 *                 while(lines_to_write):
 */
      __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_context, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_lines_to_write);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_lines_to_write, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "cydifflib.pyx":1737
 *             # Now yield the context lines after the change
 *             lines_to_write = context-1
 *             try:             # <<<<<<<<<<<<<<
 *                 while(lines_to_write):
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {

          /* "cydifflib.pyx":1738
 *             lines_to_write = context-1
 *             try:
 *                 while(lines_to_write):             # <<<<<<<<<<<<<<
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 *                     # If another change within the context, extend the context
 */
          while (1) {
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_lines_to_write); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1738, __pyx_L27_error)
            if (!__pyx_t_5) break;

            /* "cydifflib.pyx":1739
 *             try:
 *                 while(lines_to_write):
 *                     from_line, to_line, found_diff = next(line_pair_iterator)             # <<<<<<<<<<<<<<
 *                     # If another change within the context, extend the context
 *                     if found_diff:
 */
            __pyx_t_3 = __Pyx_PyIter_Next(__pyx_cur_scope->__pyx_v_line_pair_iterator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1739, __pyx_L27_error)
            __Pyx_GOTREF(__pyx_t_3);
            if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
              PyObject* sequence = __pyx_t_3;
              Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
              if (unlikely(size != 3)) {
                if (size > 3) __Pyx_RaiseTooManyValuesError(3);
                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                __PYX_ERR(0, 1739, __pyx_L27_error)
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              if (likely(PyTuple_CheckExact(sequence))) {
                __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
                __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
                __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
              } else {
                __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
                __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
                __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
              }
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_1);
              #else
              __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1739, __pyx_L27_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1739, __pyx_L27_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_1 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1739, __pyx_L27_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            } else {
              Py_ssize_t index = -1;
              __pyx_t_11 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1739, __pyx_L27_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
              index = 0; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L37_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_10);
              index = 1; __pyx_t_2 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_2)) goto __pyx_L37_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_2);
              index = 2; __pyx_t_1 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_1)) goto __pyx_L37_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_1);
              if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 3) < 0) __PYX_ERR(0, 1739, __pyx_L27_error)
              __pyx_t_12 = NULL;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              goto __pyx_L38_unpacking_done;
              __pyx_L37_unpacking_failed:;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_12 = NULL;
              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
              __PYX_ERR(0, 1739, __pyx_L27_error)
              __pyx_L38_unpacking_done:;
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_from_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_from_line, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_10);
            __pyx_t_10 = 0;
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_to_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_to_line, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_found_diff);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_found_diff, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;

            /* "cydifflib.pyx":1741
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 *                     # If another change within the context, extend the context
 *                     if found_diff:             # <<<<<<<<<<<<<<
 *                         lines_to_write = context-1
 *                     else:
 */
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_found_diff); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1741, __pyx_L27_error)
            if (__pyx_t_5) {

              /* "cydifflib.pyx":1742
 *                     # If another change within the context, extend the context
 *                     if found_diff:
 *                         lines_to_write = context-1             # <<<<<<<<<<<<<<
 *                     else:
 *                         lines_to_write -= 1
 */
              __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_context, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1742, __pyx_L27_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_lines_to_write);
              __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_lines_to_write, __pyx_t_3);
              __Pyx_GIVEREF(__pyx_t_3);
              __pyx_t_3 = 0;

              /* "cydifflib.pyx":1741
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 *                     # If another change within the context, extend the context
 *                     if found_diff:             # <<<<<<<<<<<<<<
 *                         lines_to_write = context-1
 *                     else:
 */
              goto __pyx_L39;
            }

            /* "cydifflib.pyx":1744
 *                         lines_to_write = context-1
 *                     else:
 *                         lines_to_write -= 1             # <<<<<<<<<<<<<<
 *                     yield from_line, to_line, found_diff
 *             except StopIteration:
 */
            /*else*/ {
              __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_lines_to_write, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L27_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_lines_to_write);
              __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_lines_to_write, __pyx_t_3);
              __Pyx_GIVEREF(__pyx_t_3);
              __pyx_t_3 = 0;
            }
            __pyx_L39:;

            /* "cydifflib.pyx":1745
 *                     else:
 *                         lines_to_write -= 1
 *                     yield from_line, to_line, found_diff             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 # Catch exception from next() and return normally
 */
            __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1745, __pyx_L27_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_from_line);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_from_line);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_from_line);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_to_line);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_to_line);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_cur_scope->__pyx_v_to_line);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_found_diff);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_found_diff);
            PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_cur_scope->__pyx_v_found_diff);
            __pyx_r = __pyx_t_3;
            __pyx_t_3 = 0;
            __Pyx_XGIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_t_8);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_8;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, yielding value */
            __pyx_generator->resume_label = 4;
            return __pyx_r;
            __pyx_L40_resume_from_yield:;
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_7);
            __pyx_t_8 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_8);
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1745, __pyx_L27_error)
          }

          /* "cydifflib.pyx":1737
 *             # Now yield the context lines after the change
 *             lines_to_write = context-1
 *             try:             # <<<<<<<<<<<<<<
 *                 while(lines_to_write):
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 */
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L34_try_end;
        __pyx_L27_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "cydifflib.pyx":1746
 *                         lines_to_write -= 1
 *                     yield from_line, to_line, found_diff
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 # Catch exception from next() and return normally
 *                 return
 */
        __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
        if (__pyx_t_4) {
          __Pyx_AddTraceback("cydifflib._mdiff", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_2) < 0) __PYX_ERR(0, 1746, __pyx_L29_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_2);

          /* "cydifflib.pyx":1748
 *             except StopIteration:
 *                 # Catch exception from next() and return normally
 *                 return             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = NULL;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L30_except_return;
        }
        goto __pyx_L29_except_error;
        __pyx_L29_except_error:;

        /* "cydifflib.pyx":1737
 *             # Now yield the context lines after the change
 *             lines_to_write = context-1
 *             try:             # <<<<<<<<<<<<<<
 *                 while(lines_to_write):
 *                     from_line, to_line, found_diff = next(line_pair_iterator)
 */
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L30_except_return:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        goto __pyx_L0;
        __pyx_L34_try_end:;
      }
    }
  }
  __pyx_L4:;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1481
 *     return Differ(linejunk, charjunk).compare(a, b)
 * 
 * def _mdiff(fromlines, tolines, context=None, linejunk=None,             # <<<<<<<<<<<<<<
 *            charjunk=IS_CHARACTER_JUNK):
 *     r"""Returns generator yielding marked up from/to side by side differences.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("_mdiff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1829
 *     _default_prefix = 0
 * 
 *     def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,             # <<<<<<<<<<<<<<
 *                  charjunk=IS_CHARACTER_JUNK):
 *         """HtmlDiff instance initializer
 */

static PyObject *__pyx_pf_9cydifflib_37__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_int_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_int_8));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_int_8));
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)Py_None));
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)Py_None));
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_charjunk);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_charjunk);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_charjunk);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff___init__, "HtmlDiff instance initializer\n\n        Arguments:\n        tabsize -- tab stop spacing, defaults to 8.\n        wrapcolumn -- column number where lines are broken and wrapped,\n            defaults to None where lines are not wrapped.\n        linejunk,charjunk -- keyword arguments passed into ndiff() (used by\n            HtmlDiff() to generate the side by side HTML differences).  See\n            ndiff() documentation for argument default values and descriptions.\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff___init__};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_tabsize = 0;
  PyObject *__pyx_v_wrapcolumn = 0;
  PyObject *__pyx_v_linejunk = 0;
  PyObject *__pyx_v_charjunk = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_tabsize,&__pyx_n_s_wrapcolumn,&__pyx_n_s_linejunk,&__pyx_n_s_charjunk,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_tabsize,&__pyx_n_s_wrapcolumn,&__pyx_n_s_linejunk,&__pyx_n_s_charjunk,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    __pyx_defaults3 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self);
    values[1] = ((PyObject *)((PyObject *)__pyx_int_8));
    values[2] = ((PyObject *)((PyObject *)Py_None));
    values[3] = ((PyObject *)((PyObject *)Py_None));
    values[4] = __pyx_dynamic_args->__pyx_arg_charjunk;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1829, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tabsize);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_wrapcolumn);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_linejunk);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_charjunk);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1829, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1829, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_tabsize = values[1];
    __pyx_v_wrapcolumn = values[2];
    __pyx_v_linejunk = values[3];
    __pyx_v_charjunk = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 5, __pyx_nargs); __PYX_ERR(0, 1829, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff___init__(__pyx_self, __pyx_v_self, __pyx_v_tabsize, __pyx_v_wrapcolumn, __pyx_v_linejunk, __pyx_v_charjunk);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_tabsize, PyObject *__pyx_v_wrapcolumn, PyObject *__pyx_v_linejunk, PyObject *__pyx_v_charjunk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cydifflib.pyx":1841
 *             ndiff() documentation for argument default values and descriptions.
 *         """
 *         self._tabsize = tabsize             # <<<<<<<<<<<<<<
 *         self._wrapcolumn = wrapcolumn
 *         self._linejunk = linejunk
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_tabsize_2, __pyx_v_tabsize) < 0) __PYX_ERR(0, 1841, __pyx_L1_error)

  /* "cydifflib.pyx":1842
 *         """
 *         self._tabsize = tabsize
 *         self._wrapcolumn = wrapcolumn             # <<<<<<<<<<<<<<
 *         self._linejunk = linejunk
 *         self._charjunk = charjunk
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_wrapcolumn_2, __pyx_v_wrapcolumn) < 0) __PYX_ERR(0, 1842, __pyx_L1_error)

  /* "cydifflib.pyx":1843
 *         self._tabsize = tabsize
 *         self._wrapcolumn = wrapcolumn
 *         self._linejunk = linejunk             # <<<<<<<<<<<<<<
 *         self._charjunk = charjunk
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_linejunk_2, __pyx_v_linejunk) < 0) __PYX_ERR(0, 1843, __pyx_L1_error)

  /* "cydifflib.pyx":1844
 *         self._wrapcolumn = wrapcolumn
 *         self._linejunk = linejunk
 *         self._charjunk = charjunk             # <<<<<<<<<<<<<<
 * 
 *     def make_file(self, fromlines, tolines, fromdesc='', todesc='',
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_charjunk_2, __pyx_v_charjunk) < 0) __PYX_ERR(0, 1844, __pyx_L1_error)

  /* "cydifflib.pyx":1829
 *     _default_prefix = 0
 * 
 *     def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,             # <<<<<<<<<<<<<<
 *                  charjunk=IS_CHARACTER_JUNK):
 *         """HtmlDiff instance initializer
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1846
 *         self._charjunk = charjunk
 * 
 *     def make_file(self, fromlines, tolines, fromdesc='', todesc='',             # <<<<<<<<<<<<<<
 *                   context=False, numlines=5, *, charset='utf-8'):
 *         """Returns HTML file of side by side comparison with change highlights
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_3make_file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff_2make_file, "Returns HTML file of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of \"from\" lines\n        tolines -- list of \"to\" lines\n        fromdesc -- \"from\" file column header string\n        todesc -- \"to\" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the \"next\" link anchors before the next change (so click of\n            \"next\" link jumps to just before the change).\n        charset -- charset of the HTML document\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_3make_file = {"make_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_3make_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff_2make_file};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_3make_file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_fromlines = 0;
  PyObject *__pyx_v_tolines = 0;
  PyObject *__pyx_v_fromdesc = 0;
  PyObject *__pyx_v_todesc = 0;
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_numlines = 0;
  PyObject *__pyx_v_charset = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_file (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fromlines,&__pyx_n_s_tolines,&__pyx_n_s_fromdesc,&__pyx_n_s_todesc,&__pyx_n_s_context,&__pyx_n_s_numlines,&__pyx_n_s_charset,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fromlines,&__pyx_n_s_tolines,&__pyx_n_s_fromdesc,&__pyx_n_s_todesc,&__pyx_n_s_context,&__pyx_n_s_numlines,&__pyx_n_s_charset,0};
    #endif
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[3] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[4] = ((PyObject *)((PyObject*)__pyx_kp_s_));

    /* "cydifflib.pyx":1847
 * 
 *     def make_file(self, fromlines, tolines, fromdesc='', todesc='',
 *                   context=False, numlines=5, *, charset='utf-8'):             # <<<<<<<<<<<<<<
 *         """Returns HTML file of side by side comparison with change highlights
 * 
 */
    values[5] = ((PyObject *)((PyObject *)Py_False));
    values[6] = ((PyObject *)((PyObject *)__pyx_int_5));
    values[7] = ((PyObject *)((PyObject*)__pyx_kp_s_utf_8));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1846, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromlines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1846, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("make_file", 0, 3, 7, 1); __PYX_ERR(0, 1846, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tolines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1846, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("make_file", 0, 3, 7, 2); __PYX_ERR(0, 1846, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromdesc);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1846, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_todesc);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1846, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_context);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1846, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_numlines);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1846, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 7;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = value; kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1846, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "make_file") < 0)) __PYX_ERR(0, 1846, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_fromlines = values[1];
    __pyx_v_tolines = values[2];
    __pyx_v_fromdesc = values[3];
    __pyx_v_todesc = values[4];
    __pyx_v_context = values[5];
    __pyx_v_numlines = values[6];
    __pyx_v_charset = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_file", 0, 3, 7, __pyx_nargs); __PYX_ERR(0, 1846, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff.make_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_2make_file(__pyx_self, __pyx_v_self, __pyx_v_fromlines, __pyx_v_tolines, __pyx_v_fromdesc, __pyx_v_todesc, __pyx_v_context, __pyx_v_numlines, __pyx_v_charset);

  /* "cydifflib.pyx":1846
 *         self._charjunk = charjunk
 * 
 *     def make_file(self, fromlines, tolines, fromdesc='', todesc='',             # <<<<<<<<<<<<<<
 *                   context=False, numlines=5, *, charset='utf-8'):
 *         """Returns HTML file of side by side comparison with change highlights
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_2make_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_fromlines, PyObject *__pyx_v_tolines, PyObject *__pyx_v_fromdesc, PyObject *__pyx_v_todesc, PyObject *__pyx_v_context, PyObject *__pyx_v_numlines, PyObject *__pyx_v_charset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_file", 0);

  /* "cydifflib.pyx":1865
 *         """
 * 
 *         return (self._file_template % dict(             # <<<<<<<<<<<<<<
 *             styles=self._styles,
 *             legend=self._legend,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cydifflib.pyx":1871
 *                                   context=context, numlines=numlines),
 *             charset=charset
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)             # <<<<<<<<<<<<<<
 * 
 *     def _tab_newline_replace(self,fromlines,tolines):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file_template); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "cydifflib.pyx":1866
 * 
 *         return (self._file_template % dict(
 *             styles=self._styles,             # <<<<<<<<<<<<<<
 *             legend=self._legend,
 *             table=self.make_table(fromlines, tolines, fromdesc, todesc,
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_styles_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_styles, __pyx_t_5) < 0) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":1867
 *         return (self._file_template % dict(
 *             styles=self._styles,
 *             legend=self._legend,             # <<<<<<<<<<<<<<
 *             table=self.make_table(fromlines, tolines, fromdesc, todesc,
 *                                   context=context, numlines=numlines),
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_legend_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_legend, __pyx_t_5) < 0) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":1868
 *             styles=self._styles,
 *             legend=self._legend,
 *             table=self.make_table(fromlines, tolines, fromdesc, todesc,             # <<<<<<<<<<<<<<
 *                                   context=context, numlines=numlines),
 *             charset=charset
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_make_table); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_fromlines);
  __Pyx_GIVEREF(__pyx_v_fromlines);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_fromlines);
  __Pyx_INCREF(__pyx_v_tolines);
  __Pyx_GIVEREF(__pyx_v_tolines);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_tolines);
  __Pyx_INCREF(__pyx_v_fromdesc);
  __Pyx_GIVEREF(__pyx_v_fromdesc);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_fromdesc);
  __Pyx_INCREF(__pyx_v_todesc);
  __Pyx_GIVEREF(__pyx_v_todesc);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_todesc);

  /* "cydifflib.pyx":1869
 *             legend=self._legend,
 *             table=self.make_table(fromlines, tolines, fromdesc, todesc,
 *                                   context=context, numlines=numlines),             # <<<<<<<<<<<<<<
 *             charset=charset
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_context, __pyx_v_context) < 0) __PYX_ERR(0, 1869, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_numlines, __pyx_v_numlines) < 0) __PYX_ERR(0, 1869, __pyx_L1_error)

  /* "cydifflib.pyx":1868
 *             styles=self._styles,
 *             legend=self._legend,
 *             table=self.make_table(fromlines, tolines, fromdesc, todesc,             # <<<<<<<<<<<<<<
 *                                   context=context, numlines=numlines),
 *             charset=charset
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_table, __pyx_t_8) < 0) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "cydifflib.pyx":1870
 *             table=self.make_table(fromlines, tolines, fromdesc, todesc,
 *                                   context=context, numlines=numlines),
 *             charset=charset             # <<<<<<<<<<<<<<
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)
 * 
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_charset, __pyx_v_charset) < 0) __PYX_ERR(0, 1866, __pyx_L1_error)

  /* "cydifflib.pyx":1865
 *         """
 * 
 *         return (self._file_template % dict(             # <<<<<<<<<<<<<<
 *             styles=self._styles,
 *             legend=self._legend,
 */
  __pyx_t_8 = PyNumber_Remainder(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cydifflib.pyx":1871
 *                                   context=context, numlines=numlines),
 *             charset=charset
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)             # <<<<<<<<<<<<<<
 * 
 *     def _tab_newline_replace(self,fromlines,tolines):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_v_charset, __pyx_n_s_xmlcharrefreplace};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_charset};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1846
 *         self._charjunk = charjunk
 * 
 *     def make_file(self, fromlines, tolines, fromdesc='', todesc='',             # <<<<<<<<<<<<<<
 *                   context=False, numlines=5, *, charset='utf-8'):
 *         """Returns HTML file of side by side comparison with change highlights
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cydifflib.HtmlDiff.make_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1873
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)
 * 
 *     def _tab_newline_replace(self,fromlines,tolines):             # <<<<<<<<<<<<<<
 *         """Returns from/to line lists with tabs expanded and newlines removed.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_5_tab_newline_replace(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff_4_tab_newline_replace, "Returns from/to line lists with tabs expanded and newlines removed.\n\n        Instead of tab characters being replaced by the number of spaces\n        needed to fill in to the next tab stop, this function will fill\n        the space with tab characters.  This is done so that the difference\n        algorithms can identify changes in a file when tabs are replaced by\n        spaces and vice versa.  At the end of the HTML generation, the tab\n        characters will be replaced with a nonbreakable space.\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_5_tab_newline_replace = {"_tab_newline_replace", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_5_tab_newline_replace, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff_4_tab_newline_replace};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_5_tab_newline_replace(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_fromlines = 0;
  PyObject *__pyx_v_tolines = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_tab_newline_replace (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fromlines,&__pyx_n_s_tolines,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fromlines,&__pyx_n_s_tolines,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1873, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromlines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1873, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_tab_newline_replace", 1, 3, 3, 1); __PYX_ERR(0, 1873, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tolines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1873, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_tab_newline_replace", 1, 3, 3, 2); __PYX_ERR(0, 1873, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_tab_newline_replace") < 0)) __PYX_ERR(0, 1873, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_fromlines = values[1];
    __pyx_v_tolines = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_tab_newline_replace", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1873, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff._tab_newline_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_4_tab_newline_replace(__pyx_self, __pyx_v_self, __pyx_v_fromlines, __pyx_v_tolines);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1883
 *         characters will be replaced with a nonbreakable space.
 *         """
 *         def expand_tabs(line):             # <<<<<<<<<<<<<<
 *             # hide real spaces
 *             line = line.replace(' ','\0')
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_20_tab_newline_replace_1expand_tabs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_20_tab_newline_replace_1expand_tabs = {"expand_tabs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_20_tab_newline_replace_1expand_tabs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_20_tab_newline_replace_1expand_tabs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_line = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("expand_tabs (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_line,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_line,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_line)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1883, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "expand_tabs") < 0)) __PYX_ERR(0, 1883, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_line = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("expand_tabs", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1883, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff._tab_newline_replace.expand_tabs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_20_tab_newline_replace_expand_tabs(__pyx_self, __pyx_v_line);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_20_tab_newline_replace_expand_tabs(PyObject *__pyx_self, PyObject *__pyx_v_line) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *__pyx_cur_scope;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expand_tabs", 0);
  __pyx_outer_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_INCREF(__pyx_v_line);

  /* "cydifflib.pyx":1885
 *         def expand_tabs(line):
 *             # hide real spaces
 *             line = line.replace(' ','\0')             # <<<<<<<<<<<<<<
 *             # expand tabs into spaces
 *             line = line.expandtabs(self._tabsize)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_replace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":1887
 *             line = line.replace(' ','\0')
 *             # expand tabs into spaces
 *             line = line.expandtabs(self._tabsize)             # <<<<<<<<<<<<<<
 *             # replace spaces from expanded tabs back into tab characters
 *             # (we'll replace them with markup after we do differencing)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_expandtabs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1887, __pyx_L1_error) }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_tabsize_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":1890
 *             # replace spaces from expanded tabs back into tab characters
 *             # (we'll replace them with markup after we do differencing)
 *             line = line.replace(' ','\t')             # <<<<<<<<<<<<<<
 *             return line.replace('\0',' ').rstrip('\n')
 *         fromlines = [expand_tabs(line) for line in fromlines]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1891
 *             # (we'll replace them with markup after we do differencing)
 *             line = line.replace(' ','\t')
 *             return line.replace('\0',' ').rstrip('\n')             # <<<<<<<<<<<<<<
 *         fromlines = [expand_tabs(line) for line in fromlines]
 *         tolines = [expand_tabs(line) for line in tolines]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_s__17};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1883
 *         characters will be replaced with a nonbreakable space.
 *         """
 *         def expand_tabs(line):             # <<<<<<<<<<<<<<
 *             # hide real spaces
 *             line = line.replace(' ','\0')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cydifflib.HtmlDiff._tab_newline_replace.expand_tabs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1873
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)
 * 
 *     def _tab_newline_replace(self,fromlines,tolines):             # <<<<<<<<<<<<<<
 *         """Returns from/to line lists with tabs expanded and newlines removed.
 * 
 */

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_4_tab_newline_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_fromlines, PyObject *__pyx_v_tolines) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *__pyx_cur_scope;
  PyObject *__pyx_v_expand_tabs = 0;
  PyObject *__pyx_8genexpr6__pyx_v_line = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_line = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_tab_newline_replace", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *)__pyx_tp_new_9cydifflib___pyx_scope_struct_19__tab_newline_replace(__pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1873, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_INCREF(__pyx_v_fromlines);
  __Pyx_INCREF(__pyx_v_tolines);

  /* "cydifflib.pyx":1883
 *         characters will be replaced with a nonbreakable space.
 *         """
 *         def expand_tabs(line):             # <<<<<<<<<<<<<<
 *             # hide real spaces
 *             line = line.replace(' ','\0')
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_20_tab_newline_replace_1expand_tabs, 0, __pyx_n_s_HtmlDiff__tab_newline_replace_lo, ((PyObject*)__pyx_cur_scope), __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_expand_tabs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1892
 *             line = line.replace(' ','\t')
 *             return line.replace('\0',' ').rstrip('\n')
 *         fromlines = [expand_tabs(line) for line in fromlines]             # <<<<<<<<<<<<<<
 *         tolines = [expand_tabs(line) for line in tolines]
 *         return fromlines,tolines
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1892, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_fromlines)) || PyTuple_CheckExact(__pyx_v_fromlines)) {
      __pyx_t_2 = __pyx_v_fromlines; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_fromlines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1892, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1892, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1892, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1892, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1892, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1892, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_line, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __pyx_pf_9cydifflib_8HtmlDiff_20_tab_newline_replace_expand_tabs(__pyx_v_expand_tabs, __pyx_8genexpr6__pyx_v_line); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1892, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1892, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_line); __pyx_8genexpr6__pyx_v_line = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_line); __pyx_8genexpr6__pyx_v_line = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_fromlines, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1893
 *             return line.replace('\0',' ').rstrip('\n')
 *         fromlines = [expand_tabs(line) for line in fromlines]
 *         tolines = [expand_tabs(line) for line in tolines]             # <<<<<<<<<<<<<<
 *         return fromlines,tolines
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1893, __pyx_L11_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_tolines)) || PyTuple_CheckExact(__pyx_v_tolines)) {
      __pyx_t_2 = __pyx_v_tolines; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_tolines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1893, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1893, __pyx_L11_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1893, __pyx_L11_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1893, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1893, __pyx_L11_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1893, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1893, __pyx_L11_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_line, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __pyx_pf_9cydifflib_8HtmlDiff_20_tab_newline_replace_expand_tabs(__pyx_v_expand_tabs, __pyx_8genexpr7__pyx_v_line); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1893, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1893, __pyx_L11_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_line); __pyx_8genexpr7__pyx_v_line = 0;
    goto __pyx_L14_exit_scope;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_line); __pyx_8genexpr7__pyx_v_line = 0;
    goto __pyx_L1_error;
    __pyx_L14_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_tolines, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":1894
 *         fromlines = [expand_tabs(line) for line in fromlines]
 *         tolines = [expand_tabs(line) for line in tolines]
 *         return fromlines,tolines             # <<<<<<<<<<<<<<
 * 
 *     def _split_line(self,data_list,line_num,text):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_fromlines);
  __Pyx_GIVEREF(__pyx_v_fromlines);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_fromlines);
  __Pyx_INCREF(__pyx_v_tolines);
  __Pyx_GIVEREF(__pyx_v_tolines);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_tolines);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1873
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)
 * 
 *     def _tab_newline_replace(self,fromlines,tolines):             # <<<<<<<<<<<<<<
 *         """Returns from/to line lists with tabs expanded and newlines removed.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cydifflib.HtmlDiff._tab_newline_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_expand_tabs);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_line);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_fromlines);
  __Pyx_XDECREF(__pyx_v_tolines);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1896
 *         return fromlines,tolines
 * 
 *     def _split_line(self,data_list,line_num,text):             # <<<<<<<<<<<<<<
 *         """Builds list of text lines by splitting text lines at wrap point
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_7_split_line(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff_6_split_line, "Builds list of text lines by splitting text lines at wrap point\n\n        This function will determine if the input text line needs to be\n        wrapped (split) into separate lines.  If so, the first wrap point\n        will be determined and the first line appended to the output\n        text line list.  This function is used recursively to handle\n        the second part of the split line to further split it.\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_7_split_line = {"_split_line", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_7_split_line, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff_6_split_line};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_7_split_line(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_data_list = 0;
  PyObject *__pyx_v_line_num = 0;
  PyObject *__pyx_v_text = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_split_line (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data_list,&__pyx_n_s_line_num,&__pyx_n_s_text,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data_list,&__pyx_n_s_line_num,&__pyx_n_s_text,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1896, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data_list)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1896, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_split_line", 1, 4, 4, 1); __PYX_ERR(0, 1896, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_line_num)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1896, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_split_line", 1, 4, 4, 2); __PYX_ERR(0, 1896, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_text)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1896, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_split_line", 1, 4, 4, 3); __PYX_ERR(0, 1896, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_split_line") < 0)) __PYX_ERR(0, 1896, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_data_list = values[1];
    __pyx_v_line_num = values[2];
    __pyx_v_text = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_split_line", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 1896, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff._split_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_6_split_line(__pyx_self, __pyx_v_self, __pyx_v_data_list, __pyx_v_line_num, __pyx_v_text);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_6_split_line(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data_list, PyObject *__pyx_v_line_num, PyObject *__pyx_v_text) {
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_v_max = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_mark = NULL;
  PyObject *__pyx_v_line1 = NULL;
  PyObject *__pyx_v_line2 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_split_line", 0);

  /* "cydifflib.pyx":1906
 *         """
 *         # if blank line or context separator, just add it to the output list
 *         if not line_num:             # <<<<<<<<<<<<<<
 *             data_list.append((line_num,text))
 *             return
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_line_num); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1906, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "cydifflib.pyx":1907
 *         # if blank line or context separator, just add it to the output list
 *         if not line_num:
 *             data_list.append((line_num,text))             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_line_num);
    __Pyx_GIVEREF(__pyx_v_line_num);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_line_num);
    __Pyx_INCREF(__pyx_v_text);
    __Pyx_GIVEREF(__pyx_v_text);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_text);
    __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_data_list, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cydifflib.pyx":1908
 *         if not line_num:
 *             data_list.append((line_num,text))
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # if line text doesn't need wrapping, just add it to the output list
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cydifflib.pyx":1906
 *         """
 *         # if blank line or context separator, just add it to the output list
 *         if not line_num:             # <<<<<<<<<<<<<<
 *             data_list.append((line_num,text))
 *             return
 */
  }

  /* "cydifflib.pyx":1911
 * 
 *         # if line text doesn't need wrapping, just add it to the output list
 *         size = len(text)             # <<<<<<<<<<<<<<
 *         max = self._wrapcolumn
 *         if (size <= max) or ((size -(text.count('\0')*3)) <= max):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_text); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1911, __pyx_L1_error)
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cydifflib.pyx":1912
 *         # if line text doesn't need wrapping, just add it to the output list
 *         size = len(text)
 *         max = self._wrapcolumn             # <<<<<<<<<<<<<<
 *         if (size <= max) or ((size -(text.count('\0')*3)) <= max):
 *             data_list.append((line_num,text))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapcolumn_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_max = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cydifflib.pyx":1913
 *         size = len(text)
 *         max = self._wrapcolumn
 *         if (size <= max) or ((size -(text.count('\0')*3)) <= max):             # <<<<<<<<<<<<<<
 *             data_list.append((line_num,text))
 *             return
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_size, __pyx_v_max, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_count); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_s__42};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = __Pyx_PyInt_MultiplyObjC(__pyx_t_3, __pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_size, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_v_max, Py_LE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cydifflib.pyx":1914
 *         max = self._wrapcolumn
 *         if (size <= max) or ((size -(text.count('\0')*3)) <= max):
 *             data_list.append((line_num,text))             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_line_num);
    __Pyx_GIVEREF(__pyx_v_line_num);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_line_num);
    __Pyx_INCREF(__pyx_v_text);
    __Pyx_GIVEREF(__pyx_v_text);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_text);
    __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_data_list, __pyx_t_6); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1914, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "cydifflib.pyx":1915
 *         if (size <= max) or ((size -(text.count('\0')*3)) <= max):
 *             data_list.append((line_num,text))
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # scan text looking for the wrap point, keeping track if the wrap
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cydifflib.pyx":1913
 *         size = len(text)
 *         max = self._wrapcolumn
 *         if (size <= max) or ((size -(text.count('\0')*3)) <= max):             # <<<<<<<<<<<<<<
 *             data_list.append((line_num,text))
 *             return
 */
  }

  /* "cydifflib.pyx":1919
 *         # scan text looking for the wrap point, keeping track if the wrap
 *         # point is inside markers
 *         i = 0             # <<<<<<<<<<<<<<
 *         n = 0
 *         mark = ''
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_i = __pyx_int_0;

  /* "cydifflib.pyx":1920
 *         # point is inside markers
 *         i = 0
 *         n = 0             # <<<<<<<<<<<<<<
 *         mark = ''
 *         while n < max and i < size:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_n = __pyx_int_0;

  /* "cydifflib.pyx":1921
 *         i = 0
 *         n = 0
 *         mark = ''             # <<<<<<<<<<<<<<
 *         while n < max and i < size:
 *             if text[i] == '\0':
 */
  __Pyx_INCREF(__pyx_kp_s_);
  __pyx_v_mark = __pyx_kp_s_;

  /* "cydifflib.pyx":1922
 *         n = 0
 *         mark = ''
 *         while n < max and i < size:             # <<<<<<<<<<<<<<
 *             if text[i] == '\0':
 *                 i += 1
 */
  while (1) {
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_n, __pyx_v_max, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1922, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1922, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_i, __pyx_v_size, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1922, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1922, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (!__pyx_t_2) break;

    /* "cydifflib.pyx":1923
 *         mark = ''
 *         while n < max and i < size:
 *             if text[i] == '\0':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 mark = text[i]
 */
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_text, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_6, __pyx_kp_s__42, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1923, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_2) {

      /* "cydifflib.pyx":1924
 *         while n < max and i < size:
 *             if text[i] == '\0':
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 mark = text[i]
 *                 i += 1
 */
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1924, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1925
 *             if text[i] == '\0':
 *                 i += 1
 *                 mark = text[i]             # <<<<<<<<<<<<<<
 *                 i += 1
 *             elif text[i] == '\1':
 */
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_text, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_mark, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1926
 *                 i += 1
 *                 mark = text[i]
 *                 i += 1             # <<<<<<<<<<<<<<
 *             elif text[i] == '\1':
 *                 i += 1
 */
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1926, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1923
 *         mark = ''
 *         while n < max and i < size:
 *             if text[i] == '\0':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 mark = text[i]
 */
      goto __pyx_L11;
    }

    /* "cydifflib.pyx":1927
 *                 mark = text[i]
 *                 i += 1
 *             elif text[i] == '\1':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 mark = ''
 */
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_text, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_6, __pyx_kp_s__43, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1927, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_2) {

      /* "cydifflib.pyx":1928
 *                 i += 1
 *             elif text[i] == '\1':
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 mark = ''
 *             else:
 */
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1929
 *             elif text[i] == '\1':
 *                 i += 1
 *                 mark = ''             # <<<<<<<<<<<<<<
 *             else:
 *                 i += 1
 */
      __Pyx_INCREF(__pyx_kp_s_);
      __Pyx_DECREF_SET(__pyx_v_mark, __pyx_kp_s_);

      /* "cydifflib.pyx":1927
 *                 mark = text[i]
 *                 i += 1
 *             elif text[i] == '\1':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 mark = ''
 */
      goto __pyx_L11;
    }

    /* "cydifflib.pyx":1931
 *                 mark = ''
 *             else:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 n += 1
 * 
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cydifflib.pyx":1932
 *             else:
 *                 i += 1
 *                 n += 1             # <<<<<<<<<<<<<<
 * 
 *         # wrap point is inside text, break it up into separate lines
 */
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_n, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1932, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_n, __pyx_t_6);
      __pyx_t_6 = 0;
    }
    __pyx_L11:;
  }

  /* "cydifflib.pyx":1935
 * 
 *         # wrap point is inside text, break it up into separate lines
 *         line1 = text[:i]             # <<<<<<<<<<<<<<
 *         line2 = text[i:]
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_text, 0, 0, NULL, &__pyx_v_i, NULL, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_line1 = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "cydifflib.pyx":1936
 *         # wrap point is inside text, break it up into separate lines
 *         line1 = text[:i]
 *         line2 = text[i:]             # <<<<<<<<<<<<<<
 * 
 *         # if wrap point is inside markers, place end marker at end of first
 */
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_text, 0, 0, &__pyx_v_i, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_line2 = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "cydifflib.pyx":1941
 *         # line and start marker at beginning of second line because each
 *         # line will have its own table tag markup around it.
 *         if mark:             # <<<<<<<<<<<<<<
 *             line1 = line1 + '\1'
 *             line2 = '\0' + mark + line2
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_mark); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1941, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "cydifflib.pyx":1942
 *         # line will have its own table tag markup around it.
 *         if mark:
 *             line1 = line1 + '\1'             # <<<<<<<<<<<<<<
 *             line2 = '\0' + mark + line2
 * 
 */
    __pyx_t_6 = PyNumber_Add(__pyx_v_line1, __pyx_kp_s__43); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1942, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_line1, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cydifflib.pyx":1943
 *         if mark:
 *             line1 = line1 + '\1'
 *             line2 = '\0' + mark + line2             # <<<<<<<<<<<<<<
 * 
 *         # tack on first line onto the output list
 */
    __pyx_t_6 = PyNumber_Add(__pyx_kp_s__42, __pyx_v_mark); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1943, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyNumber_Add(__pyx_t_6, __pyx_v_line2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1943, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_line2, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cydifflib.pyx":1941
 *         # line and start marker at beginning of second line because each
 *         # line will have its own table tag markup around it.
 *         if mark:             # <<<<<<<<<<<<<<
 *             line1 = line1 + '\1'
 *             line2 = '\0' + mark + line2
 */
  }

  /* "cydifflib.pyx":1946
 * 
 *         # tack on first line onto the output list
 *         data_list.append((line_num,line1))             # <<<<<<<<<<<<<<
 * 
 *         # use this routine again to wrap the remaining text
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_line_num);
  __Pyx_GIVEREF(__pyx_v_line_num);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_line_num);
  __Pyx_INCREF(__pyx_v_line1);
  __Pyx_GIVEREF(__pyx_v_line1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_line1);
  __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_data_list, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1946, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cydifflib.pyx":1949
 * 
 *         # use this routine again to wrap the remaining text
 *         self._split_line(data_list,'>',line2)             # <<<<<<<<<<<<<<
 * 
 *     def _line_wrapper(self,diffs):
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_split_line); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_7, __pyx_v_data_list, __pyx_kp_s__72, __pyx_v_line2};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 3+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cydifflib.pyx":1896
 *         return fromlines,tolines
 * 
 *     def _split_line(self,data_list,line_num,text):             # <<<<<<<<<<<<<<
 *         """Builds list of text lines by splitting text lines at wrap point
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cydifflib.HtmlDiff._split_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_max);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_mark);
  __Pyx_XDECREF(__pyx_v_line1);
  __Pyx_XDECREF(__pyx_v_line2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_8HtmlDiff_10generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":1951
 *         self._split_line(data_list,'>',line2)
 * 
 *     def _line_wrapper(self,diffs):             # <<<<<<<<<<<<<<
 *         """Returns iterator that splits (wraps) mdiff text lines"""
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_9_line_wrapper(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff_8_line_wrapper, "Returns iterator that splits (wraps) mdiff text lines");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_9_line_wrapper = {"_line_wrapper", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_9_line_wrapper, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff_8_line_wrapper};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_9_line_wrapper(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_diffs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_line_wrapper (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_diffs,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_diffs,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1951, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_diffs)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1951, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_line_wrapper", 1, 2, 2, 1); __PYX_ERR(0, 1951, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_line_wrapper") < 0)) __PYX_ERR(0, 1951, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_diffs = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_line_wrapper", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1951, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff._line_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_8_line_wrapper(__pyx_self, __pyx_v_self, __pyx_v_diffs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_8_line_wrapper(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_diffs) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_line_wrapper", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *)__pyx_tp_new_9cydifflib___pyx_scope_struct_20__line_wrapper(__pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1951, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_diffs = __pyx_v_diffs;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_diffs);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_diffs);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_8HtmlDiff_10generator11, __pyx_codeobj__73, (PyObject *) __pyx_cur_scope, __pyx_n_s_line_wrapper, __pyx_n_s_HtmlDiff__line_wrapper, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 1951, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff._line_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_8HtmlDiff_10generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_line_wrapper", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    case 2: goto __pyx_L20_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1951, __pyx_L1_error)

  /* "cydifflib.pyx":1955
 * 
 *         # pull from/to data and flags from mdiff iterator
 *         for fromdata,todata,flag in diffs:             # <<<<<<<<<<<<<<
 *             # check for context separators and pass them through
 *             if flag is None:
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_diffs)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_diffs)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_diffs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_diffs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1955, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1955, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1955, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1955, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1955, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1955, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1955, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1955, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1955, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1955, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1955, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 3) < 0) __PYX_ERR(0, 1955, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1955, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fromdata);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fromdata, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_todata);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_todata, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_flag);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_flag, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;

    /* "cydifflib.pyx":1957
 *         for fromdata,todata,flag in diffs:
 *             # check for context separators and pass them through
 *             if flag is None:             # <<<<<<<<<<<<<<
 *                 yield fromdata,todata,flag
 *                 continue
 */
    __pyx_t_10 = (__pyx_cur_scope->__pyx_v_flag == Py_None);
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "cydifflib.pyx":1958
 *             # check for context separators and pass them through
 *             if flag is None:
 *                 yield fromdata,todata,flag             # <<<<<<<<<<<<<<
 *                 continue
 *             (fromline,fromtext),(toline,totext) = fromdata,todata
 */
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1958, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromdata);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fromdata);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_fromdata);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_todata);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_todata);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_cur_scope->__pyx_v_todata);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flag);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flag);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_cur_scope->__pyx_v_flag);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1958, __pyx_L1_error)

      /* "cydifflib.pyx":1959
 *             if flag is None:
 *                 yield fromdata,todata,flag
 *                 continue             # <<<<<<<<<<<<<<
 *             (fromline,fromtext),(toline,totext) = fromdata,todata
 *             # for each from/to line split it at the wrap column to form
 */
      goto __pyx_L4_continue;

      /* "cydifflib.pyx":1957
 *         for fromdata,todata,flag in diffs:
 *             # check for context separators and pass them through
 *             if flag is None:             # <<<<<<<<<<<<<<
 *                 yield fromdata,todata,flag
 *                 continue
 */
    }

    /* "cydifflib.pyx":1960
 *                 yield fromdata,todata,flag
 *                 continue
 *             (fromline,fromtext),(toline,totext) = fromdata,todata             # <<<<<<<<<<<<<<
 *             # for each from/to line split it at the wrap column to form
 *             # list of text lines.
 */
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_fromdata;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_7 = __pyx_cur_scope->__pyx_v_todata;
    __Pyx_INCREF(__pyx_t_7);
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1960, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 1960, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1960, __pyx_L1_error)
      __pyx_L11_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fromline);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fromline, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fromtext);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fromtext, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1960, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
      index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L12_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L12_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_6), 2) < 0) __PYX_ERR(0, 1960, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L13_unpacking_done;
      __pyx_L12_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1960, __pyx_L1_error)
      __pyx_L13_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_toline);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_toline, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_totext);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_totext, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "cydifflib.pyx":1963
 *             # for each from/to line split it at the wrap column to form
 *             # list of text lines.
 *             fromlist,tolist = [],[]             # <<<<<<<<<<<<<<
 *             self._split_line(fromlist,fromline,fromtext)
 *             self._split_line(tolist,toline,totext)
 */
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fromlist);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fromlist, ((PyObject*)__pyx_t_7));
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tolist);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tolist, ((PyObject*)__pyx_t_5));
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "cydifflib.pyx":1964
 *             # list of text lines.
 *             fromlist,tolist = [],[]
 *             self._split_line(fromlist,fromline,fromtext)             # <<<<<<<<<<<<<<
 *             self._split_line(tolist,toline,totext)
 *             # yield from/to line in pairs inserting blank lines as
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_split_line); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_12 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_fromlist, __pyx_cur_scope->__pyx_v_fromline, __pyx_cur_scope->__pyx_v_fromtext};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_12, 3+__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1964, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "cydifflib.pyx":1965
 *             fromlist,tolist = [],[]
 *             self._split_line(fromlist,fromline,fromtext)
 *             self._split_line(tolist,toline,totext)             # <<<<<<<<<<<<<<
 *             # yield from/to line in pairs inserting blank lines as
 *             # necessary when one side has more wrapped lines
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_split_line); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_12 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_tolist, __pyx_cur_scope->__pyx_v_toline, __pyx_cur_scope->__pyx_v_totext};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_12, 3+__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "cydifflib.pyx":1968
 *             # yield from/to line in pairs inserting blank lines as
 *             # necessary when one side has more wrapped lines
 *             while fromlist or tolist:             # <<<<<<<<<<<<<<
 *                 if fromlist:
 *                     fromdata = fromlist.pop(0)
 */
    while (1) {
      __pyx_t_10 = (PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_fromlist) != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_11 = __pyx_t_10;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_10 = (PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_tolist) != 0);
      __pyx_t_11 = __pyx_t_10;
      __pyx_L16_bool_binop_done:;
      if (!__pyx_t_11) break;

      /* "cydifflib.pyx":1969
 *             # necessary when one side has more wrapped lines
 *             while fromlist or tolist:
 *                 if fromlist:             # <<<<<<<<<<<<<<
 *                     fromdata = fromlist.pop(0)
 *                 else:
 */
      __pyx_t_11 = (PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_fromlist) != 0);
      if (__pyx_t_11) {

        /* "cydifflib.pyx":1970
 *             while fromlist or tolist:
 *                 if fromlist:
 *                     fromdata = fromlist.pop(0)             # <<<<<<<<<<<<<<
 *                 else:
 *                     fromdata = ('',' ')
 */
        __pyx_t_5 = __Pyx_PyList_PopIndex(__pyx_cur_scope->__pyx_v_fromlist, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_fromdata);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_fromdata, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;

        /* "cydifflib.pyx":1969
 *             # necessary when one side has more wrapped lines
 *             while fromlist or tolist:
 *                 if fromlist:             # <<<<<<<<<<<<<<
 *                     fromdata = fromlist.pop(0)
 *                 else:
 */
        goto __pyx_L18;
      }

      /* "cydifflib.pyx":1972
 *                     fromdata = fromlist.pop(0)
 *                 else:
 *                     fromdata = ('',' ')             # <<<<<<<<<<<<<<
 *                 if tolist:
 *                     todata = tolist.pop(0)
 */
      /*else*/ {
        __Pyx_INCREF(__pyx_tuple__74);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_fromdata);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_fromdata, __pyx_tuple__74);
        __Pyx_GIVEREF(__pyx_tuple__74);
      }
      __pyx_L18:;

      /* "cydifflib.pyx":1973
 *                 else:
 *                     fromdata = ('',' ')
 *                 if tolist:             # <<<<<<<<<<<<<<
 *                     todata = tolist.pop(0)
 *                 else:
 */
      __pyx_t_11 = (PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_tolist) != 0);
      if (__pyx_t_11) {

        /* "cydifflib.pyx":1974
 *                     fromdata = ('',' ')
 *                 if tolist:
 *                     todata = tolist.pop(0)             # <<<<<<<<<<<<<<
 *                 else:
 *                     todata = ('',' ')
 */
        __pyx_t_5 = __Pyx_PyList_PopIndex(__pyx_cur_scope->__pyx_v_tolist, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_todata);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_todata, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;

        /* "cydifflib.pyx":1973
 *                 else:
 *                     fromdata = ('',' ')
 *                 if tolist:             # <<<<<<<<<<<<<<
 *                     todata = tolist.pop(0)
 *                 else:
 */
        goto __pyx_L19;
      }

      /* "cydifflib.pyx":1976
 *                     todata = tolist.pop(0)
 *                 else:
 *                     todata = ('',' ')             # <<<<<<<<<<<<<<
 *                 yield fromdata,todata,flag
 * 
 */
      /*else*/ {
        __Pyx_INCREF(__pyx_tuple__74);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_todata);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_todata, __pyx_tuple__74);
        __Pyx_GIVEREF(__pyx_tuple__74);
      }
      __pyx_L19:;

      /* "cydifflib.pyx":1977
 *                 else:
 *                     todata = ('',' ')
 *                 yield fromdata,todata,flag             # <<<<<<<<<<<<<<
 * 
 *     def _collect_lines(self,diffs):
 */
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fromdata);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fromdata);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_cur_scope->__pyx_v_fromdata);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_todata);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_todata);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_cur_scope->__pyx_v_todata);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flag);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flag);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_cur_scope->__pyx_v_flag);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L20_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1977, __pyx_L1_error)
    }

    /* "cydifflib.pyx":1955
 * 
 *         # pull from/to data and flags from mdiff iterator
 *         for fromdata,todata,flag in diffs:             # <<<<<<<<<<<<<<
 *             # check for context separators and pass them through
 *             if flag is None:
 */
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":1951
 *         self._split_line(data_list,'>',line2)
 * 
 *     def _line_wrapper(self,diffs):             # <<<<<<<<<<<<<<
 *         """Returns iterator that splits (wraps) mdiff text lines"""
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("_line_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":1979
 *                 yield fromdata,todata,flag
 * 
 *     def _collect_lines(self,diffs):             # <<<<<<<<<<<<<<
 *         """Collects mdiff output into separate lists
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_12_collect_lines(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff_11_collect_lines, "Collects mdiff output into separate lists\n\n        Before storing the mdiff from/to data into a list, it is converted\n        into a single line of text with HTML markup.\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_12_collect_lines = {"_collect_lines", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_12_collect_lines, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff_11_collect_lines};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_12_collect_lines(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_diffs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_collect_lines (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_diffs,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_diffs,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1979, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_diffs)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1979, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_collect_lines", 1, 2, 2, 1); __PYX_ERR(0, 1979, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_collect_lines") < 0)) __PYX_ERR(0, 1979, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_diffs = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_collect_lines", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1979, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff._collect_lines", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_11_collect_lines(__pyx_self, __pyx_v_self, __pyx_v_diffs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_11_collect_lines(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_diffs) {
  PyObject *__pyx_v_fromlist = NULL;
  PyObject *__pyx_v_tolist = NULL;
  PyObject *__pyx_v_flaglist = NULL;
  PyObject *__pyx_v_fromdata = NULL;
  PyObject *__pyx_v_todata = NULL;
  PyObject *__pyx_v_flag = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_collect_lines", 0);

  /* "cydifflib.pyx":1986
 *         """
 * 
 *         fromlist,tolist,flaglist = [],[],[]             # <<<<<<<<<<<<<<
 *         # pull from/to data and flags from mdiff style iterator
 *         for fromdata,todata,flag in diffs:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_fromlist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_tolist = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_flaglist = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cydifflib.pyx":1988
 *         fromlist,tolist,flaglist = [],[],[]
 *         # pull from/to data and flags from mdiff style iterator
 *         for fromdata,todata,flag in diffs:             # <<<<<<<<<<<<<<
 *             try:
 *                 # store HTML markup of the lines into the lists
 */
  if (likely(PyList_CheckExact(__pyx_v_diffs)) || PyTuple_CheckExact(__pyx_v_diffs)) {
    __pyx_t_3 = __pyx_v_diffs; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_diffs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1988, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 1988, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1988, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 1988, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1988, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1988, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1988, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1988, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1988, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1988, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1988, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_1 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 3) < 0) __PYX_ERR(0, 1988, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1988, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_fromdata, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_todata, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_flag, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "cydifflib.pyx":1989
 *         # pull from/to data and flags from mdiff style iterator
 *         for fromdata,todata,flag in diffs:
 *             try:             # <<<<<<<<<<<<<<
 *                 # store HTML markup of the lines into the lists
 *                 fromlist.append(self._format_line(0,flag,*fromdata))
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      /*try:*/ {

        /* "cydifflib.pyx":1991
 *             try:
 *                 # store HTML markup of the lines into the lists
 *                 fromlist.append(self._format_line(0,flag,*fromdata))             # <<<<<<<<<<<<<<
 *                 tolist.append(self._format_line(1,flag,*todata))
 *             except TypeError:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_format_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1991, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1991, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_int_0);
        __Pyx_INCREF(__pyx_v_flag);
        __Pyx_GIVEREF(__pyx_v_flag);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_flag);
        __pyx_t_6 = __Pyx_PySequence_Tuple(__pyx_v_fromdata); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1991, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_1 = PyNumber_Add(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1991, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1991, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_fromlist, __pyx_t_6); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1991, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cydifflib.pyx":1992
 *                 # store HTML markup of the lines into the lists
 *                 fromlist.append(self._format_line(0,flag,*fromdata))
 *                 tolist.append(self._format_line(1,flag,*todata))             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 # exceptions occur for lines where context separators go
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_format_line); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1992, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1992, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_int_1);
        __Pyx_GIVEREF(__pyx_int_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
        __Pyx_INCREF(__pyx_v_flag);
        __Pyx_GIVEREF(__pyx_v_flag);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_flag);
        __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_v_todata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1992, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1992, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1992, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_tolist, __pyx_t_2); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1992, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "cydifflib.pyx":1989
 *         # pull from/to data and flags from mdiff style iterator
 *         for fromdata,todata,flag in diffs:
 *             try:             # <<<<<<<<<<<<<<
 *                 # store HTML markup of the lines into the lists
 *                 fromlist.append(self._format_line(0,flag,*fromdata))
 */
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L14_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "cydifflib.pyx":1993
 *                 fromlist.append(self._format_line(0,flag,*fromdata))
 *                 tolist.append(self._format_line(1,flag,*todata))
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 # exceptions occur for lines where context separators go
 *                 fromlist.append(None)
 */
      __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_14) {
        __Pyx_AddTraceback("cydifflib.HtmlDiff._collect_lines", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(0, 1993, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_6);

        /* "cydifflib.pyx":1995
 *             except TypeError:
 *                 # exceptions occur for lines where context separators go
 *                 fromlist.append(None)             # <<<<<<<<<<<<<<
 *                 tolist.append(None)
 *             flaglist.append(flag)
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_fromlist, Py_None); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1995, __pyx_L9_except_error)

        /* "cydifflib.pyx":1996
 *                 # exceptions occur for lines where context separators go
 *                 fromlist.append(None)
 *                 tolist.append(None)             # <<<<<<<<<<<<<<
 *             flaglist.append(flag)
 *         return fromlist,tolist,flaglist
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_tolist, Py_None); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1996, __pyx_L9_except_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L8_exception_handled;
      }
      goto __pyx_L9_except_error;
      __pyx_L9_except_error:;

      /* "cydifflib.pyx":1989
 *         # pull from/to data and flags from mdiff style iterator
 *         for fromdata,todata,flag in diffs:
 *             try:             # <<<<<<<<<<<<<<
 *                 # store HTML markup of the lines into the lists
 *                 fromlist.append(self._format_line(0,flag,*fromdata))
 */
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      goto __pyx_L1_error;
      __pyx_L8_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_L14_try_end:;
    }

    /* "cydifflib.pyx":1997
 *                 fromlist.append(None)
 *                 tolist.append(None)
 *             flaglist.append(flag)             # <<<<<<<<<<<<<<
 *         return fromlist,tolist,flaglist
 * 
 */
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_flaglist, __pyx_v_flag); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1997, __pyx_L1_error)

    /* "cydifflib.pyx":1988
 *         fromlist,tolist,flaglist = [],[],[]
 *         # pull from/to data and flags from mdiff style iterator
 *         for fromdata,todata,flag in diffs:             # <<<<<<<<<<<<<<
 *             try:
 *                 # store HTML markup of the lines into the lists
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cydifflib.pyx":1998
 *                 tolist.append(None)
 *             flaglist.append(flag)
 *         return fromlist,tolist,flaglist             # <<<<<<<<<<<<<<
 * 
 *     def _format_line(self,side,flag,linenum,text):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_fromlist);
  __Pyx_GIVEREF(__pyx_v_fromlist);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_fromlist);
  __Pyx_INCREF(__pyx_v_tolist);
  __Pyx_GIVEREF(__pyx_v_tolist);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_tolist);
  __Pyx_INCREF(__pyx_v_flaglist);
  __Pyx_GIVEREF(__pyx_v_flaglist);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_flaglist);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":1979
 *                 yield fromdata,todata,flag
 * 
 *     def _collect_lines(self,diffs):             # <<<<<<<<<<<<<<
 *         """Collects mdiff output into separate lists
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cydifflib.HtmlDiff._collect_lines", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fromlist);
  __Pyx_XDECREF(__pyx_v_tolist);
  __Pyx_XDECREF(__pyx_v_flaglist);
  __Pyx_XDECREF(__pyx_v_fromdata);
  __Pyx_XDECREF(__pyx_v_todata);
  __Pyx_XDECREF(__pyx_v_flag);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":2000
 *         return fromlist,tolist,flaglist
 * 
 *     def _format_line(self,side,flag,linenum,text):             # <<<<<<<<<<<<<<
 *         """Returns HTML markup of "from" / "to" text lines
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_14_format_line(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff_13_format_line, "Returns HTML markup of \"from\" / \"to\" text lines\n\n        side -- 0 or 1 indicating \"from\" or \"to\" text\n        flag -- indicates if difference on line\n        linenum -- line number (used for line number column)\n        text -- line text to be marked up\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_14_format_line = {"_format_line", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_14_format_line, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff_13_format_line};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_14_format_line(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_side = 0;
  CYTHON_UNUSED PyObject *__pyx_v_flag = 0;
  PyObject *__pyx_v_linenum = 0;
  PyObject *__pyx_v_text = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_format_line (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_side,&__pyx_n_s_flag,&__pyx_n_s_linenum,&__pyx_n_s_text,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_side,&__pyx_n_s_flag,&__pyx_n_s_linenum,&__pyx_n_s_text,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2000, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_side)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2000, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_format_line", 1, 5, 5, 1); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_flag)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2000, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_format_line", 1, 5, 5, 2); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_linenum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2000, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_format_line", 1, 5, 5, 3); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_text)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2000, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_format_line", 1, 5, 5, 4); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_format_line") < 0)) __PYX_ERR(0, 2000, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_side = values[1];
    __pyx_v_flag = values[2];
    __pyx_v_linenum = values[3];
    __pyx_v_text = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_format_line", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 2000, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff._format_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_13_format_line(__pyx_self, __pyx_v_self, __pyx_v_side, __pyx_v_flag, __pyx_v_linenum, __pyx_v_text);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_13_format_line(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_side, CYTHON_UNUSED PyObject *__pyx_v_flag, PyObject *__pyx_v_linenum, PyObject *__pyx_v_text) {
  PyObject *__pyx_v_id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_format_line", 0);
  __Pyx_INCREF(__pyx_v_linenum);
  __Pyx_INCREF(__pyx_v_text);

  /* "cydifflib.pyx":2008
 *         text -- line text to be marked up
 *         """
 *         try:             # <<<<<<<<<<<<<<
 *             linenum = '%d' % linenum
 *             id = ' id="%s%s"' % (self._prefix[side],linenum)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "cydifflib.pyx":2009
 *         """
 *         try:
 *             linenum = '%d' % linenum             # <<<<<<<<<<<<<<
 *             id = ' id="%s%s"' % (self._prefix[side],linenum)
 *         except TypeError:
 */
      __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_d, __pyx_v_linenum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2009, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_linenum, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "cydifflib.pyx":2010
 *         try:
 *             linenum = '%d' % linenum
 *             id = ' id="%s%s"' % (self._prefix[side],linenum)             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             # handle blank lines where linenum is '>' or ''
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_prefix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2010, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_side); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2010, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2010, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __Pyx_INCREF(__pyx_v_linenum);
      __Pyx_GIVEREF(__pyx_v_linenum);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_linenum);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_id_s_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2010, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_id = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "cydifflib.pyx":2008
 *         text -- line text to be marked up
 *         """
 *         try:             # <<<<<<<<<<<<<<
 *             linenum = '%d' % linenum
 *             id = ' id="%s%s"' % (self._prefix[side],linenum)
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "cydifflib.pyx":2011
 *             linenum = '%d' % linenum
 *             id = ' id="%s%s"' % (self._prefix[side],linenum)
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             # handle blank lines where linenum is '>' or ''
 *             id = ''
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("cydifflib.HtmlDiff._format_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_7) < 0) __PYX_ERR(0, 2011, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_7);

      /* "cydifflib.pyx":2013
 *         except TypeError:
 *             # handle blank lines where linenum is '>' or ''
 *             id = ''             # <<<<<<<<<<<<<<
 *         # replace those things that would get confused with HTML symbols
 *         text=text.replace("&","&amp;").replace(">","&gt;").replace("<","&lt;")
 */
      __Pyx_INCREF(__pyx_kp_s_);
      __Pyx_XDECREF_SET(__pyx_v_id, __pyx_kp_s_);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "cydifflib.pyx":2008
 *         text -- line text to be marked up
 *         """
 *         try:             # <<<<<<<<<<<<<<
 *             linenum = '%d' % linenum
 *             id = ' id="%s%s"' % (self._prefix[side],linenum)
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "cydifflib.pyx":2015
 *             id = ''
 *         # replace those things that would get confused with HTML symbols
 *         text=text.replace("&","&amp;").replace(">","&gt;").replace("<","&lt;")             # <<<<<<<<<<<<<<
 * 
 *         # make space non-breakable so they don't get compressed or line wrapped
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_replace); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_replace); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_replace); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF_SET(__pyx_v_text, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "cydifflib.pyx":2018
 * 
 *         # make space non-breakable so they don't get compressed or line wrapped
 *         text = text.replace(' ','&nbsp;').rstrip()             # <<<<<<<<<<<<<<
 * 
 *         return '<td class="diff_header"%s>%s</td><td nowrap="nowrap">%s</td>' \
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_replace); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_5, };
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF_SET(__pyx_v_text, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "cydifflib.pyx":2020
 *         text = text.replace(' ','&nbsp;').rstrip()
 * 
 *         return '<td class="diff_header"%s>%s</td><td nowrap="nowrap">%s</td>' \             # <<<<<<<<<<<<<<
 *                % (id,linenum,text)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cydifflib.pyx":2021
 * 
 *         return '<td class="diff_header"%s>%s</td><td nowrap="nowrap">%s</td>' \
 *                % (id,linenum,text)             # <<<<<<<<<<<<<<
 * 
 *     def _make_prefix(self):
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_id);
  __Pyx_GIVEREF(__pyx_v_id);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_id);
  __Pyx_INCREF(__pyx_v_linenum);
  __Pyx_GIVEREF(__pyx_v_linenum);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_linenum);
  __Pyx_INCREF(__pyx_v_text);
  __Pyx_GIVEREF(__pyx_v_text);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_text);
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_td_class_diff_header_s_s_td_td, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":2000
 *         return fromlist,tolist,flaglist
 * 
 *     def _format_line(self,side,flag,linenum,text):             # <<<<<<<<<<<<<<
 *         """Returns HTML markup of "from" / "to" text lines
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cydifflib.HtmlDiff._format_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_id);
  __Pyx_XDECREF(__pyx_v_linenum);
  __Pyx_XDECREF(__pyx_v_text);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":2023
 *                % (id,linenum,text)
 * 
 *     def _make_prefix(self):             # <<<<<<<<<<<<<<
 *         """Create unique anchor prefixes"""
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_16_make_prefix(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff_15_make_prefix, "Create unique anchor prefixes");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_16_make_prefix = {"_make_prefix", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_16_make_prefix, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff_15_make_prefix};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_16_make_prefix(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_make_prefix (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2023, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_make_prefix") < 0)) __PYX_ERR(0, 2023, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_make_prefix", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2023, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff._make_prefix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_15_make_prefix(__pyx_self, __pyx_v_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_15_make_prefix(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_fromprefix = NULL;
  PyObject *__pyx_v_toprefix = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_prefix", 0);

  /* "cydifflib.pyx":2028
 *         # Generate a unique anchor prefix so multiple tables
 *         # can exist on the same HTML page without conflicts.
 *         fromprefix = "from%d_" % HtmlDiff._default_prefix             # <<<<<<<<<<<<<<
 *         toprefix = "to%d_" % HtmlDiff._default_prefix
 *         HtmlDiff._default_prefix += 1
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_HtmlDiff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_default_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_from_d, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_fromprefix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":2029
 *         # can exist on the same HTML page without conflicts.
 *         fromprefix = "from%d_" % HtmlDiff._default_prefix
 *         toprefix = "to%d_" % HtmlDiff._default_prefix             # <<<<<<<<<<<<<<
 *         HtmlDiff._default_prefix += 1
 *         # store prefixes so line format method has access
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_HtmlDiff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_default_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_to_d, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_toprefix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":2030
 *         fromprefix = "from%d_" % HtmlDiff._default_prefix
 *         toprefix = "to%d_" % HtmlDiff._default_prefix
 *         HtmlDiff._default_prefix += 1             # <<<<<<<<<<<<<<
 *         # store prefixes so line format method has access
 *         self._prefix = [fromprefix,toprefix]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_HtmlDiff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_default_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_HtmlDiff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_default_prefix, __pyx_t_1) < 0) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":2032
 *         HtmlDiff._default_prefix += 1
 *         # store prefixes so line format method has access
 *         self._prefix = [fromprefix,toprefix]             # <<<<<<<<<<<<<<
 * 
 *     def _convert_flags(self,fromlist,tolist,flaglist,context,numlines):
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_fromprefix);
  __Pyx_GIVEREF(__pyx_v_fromprefix);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_fromprefix);
  __Pyx_INCREF(__pyx_v_toprefix);
  __Pyx_GIVEREF(__pyx_v_toprefix);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_v_toprefix);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_prefix, __pyx_t_2) < 0) __PYX_ERR(0, 2032, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":2023
 *                % (id,linenum,text)
 * 
 *     def _make_prefix(self):             # <<<<<<<<<<<<<<
 *         """Create unique anchor prefixes"""
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cydifflib.HtmlDiff._make_prefix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fromprefix);
  __Pyx_XDECREF(__pyx_v_toprefix);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":2034
 *         self._prefix = [fromprefix,toprefix]
 * 
 *     def _convert_flags(self,fromlist,tolist,flaglist,context,numlines):             # <<<<<<<<<<<<<<
 *         """Makes list of "next" links"""
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_18_convert_flags(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff_17_convert_flags, "Makes list of \"next\" links");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_18_convert_flags = {"_convert_flags", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_18_convert_flags, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff_17_convert_flags};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_18_convert_flags(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_fromlist = 0;
  PyObject *__pyx_v_tolist = 0;
  PyObject *__pyx_v_flaglist = 0;
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_numlines = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_convert_flags (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fromlist,&__pyx_n_s_tolist,&__pyx_n_s_flaglist,&__pyx_n_s_context,&__pyx_n_s_numlines,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fromlist,&__pyx_n_s_tolist,&__pyx_n_s_flaglist,&__pyx_n_s_context,&__pyx_n_s_numlines,0};
    #endif
    PyObject* values[6] = {0,0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromlist)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_convert_flags", 1, 6, 6, 1); __PYX_ERR(0, 2034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tolist)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_convert_flags", 1, 6, 6, 2); __PYX_ERR(0, 2034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_flaglist)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_convert_flags", 1, 6, 6, 3); __PYX_ERR(0, 2034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_context)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_convert_flags", 1, 6, 6, 4); __PYX_ERR(0, 2034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_numlines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_convert_flags", 1, 6, 6, 5); __PYX_ERR(0, 2034, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_convert_flags") < 0)) __PYX_ERR(0, 2034, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
    }
    __pyx_v_self = values[0];
    __pyx_v_fromlist = values[1];
    __pyx_v_tolist = values[2];
    __pyx_v_flaglist = values[3];
    __pyx_v_context = values[4];
    __pyx_v_numlines = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_convert_flags", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 2034, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff._convert_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_17_convert_flags(__pyx_self, __pyx_v_self, __pyx_v_fromlist, __pyx_v_tolist, __pyx_v_flaglist, __pyx_v_context, __pyx_v_numlines);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_17_convert_flags(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_fromlist, PyObject *__pyx_v_tolist, PyObject *__pyx_v_flaglist, PyObject *__pyx_v_context, PyObject *__pyx_v_numlines) {
  PyObject *__pyx_v_toprefix = NULL;
  PyObject *__pyx_v_next_id = NULL;
  PyObject *__pyx_v_next_href = NULL;
  PyObject *__pyx_v_num_chg = NULL;
  int __pyx_v_in_change;
  PyObject *__pyx_v_last = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_flag = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_convert_flags", 0);
  __Pyx_INCREF(__pyx_v_fromlist);
  __Pyx_INCREF(__pyx_v_tolist);
  __Pyx_INCREF(__pyx_v_flaglist);

  /* "cydifflib.pyx":2038
 * 
 *         # all anchor names will be generated using the unique "to" prefix
 *         toprefix = self._prefix[1]             # <<<<<<<<<<<<<<
 * 
 *         # process change flags, generating middle column of next anchors/links
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_prefix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_toprefix = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":2041
 * 
 *         # process change flags, generating middle column of next anchors/links
 *         next_id = ['']*len(flaglist)             # <<<<<<<<<<<<<<
 *         next_href = ['']*len(flaglist)
 *         num_chg, in_change = 0, False
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_flaglist); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2041, __pyx_L1_error)
  __pyx_t_2 = PyList_New(1 * ((__pyx_t_3<0) ? 0:__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_3; __pyx_temp++) {
      __Pyx_INCREF(__pyx_kp_s_);
      __Pyx_GIVEREF(__pyx_kp_s_);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, __pyx_kp_s_);
    }
  }
  __pyx_v_next_id = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":2042
 *         # process change flags, generating middle column of next anchors/links
 *         next_id = ['']*len(flaglist)
 *         next_href = ['']*len(flaglist)             # <<<<<<<<<<<<<<
 *         num_chg, in_change = 0, False
 *         last = 0
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_flaglist); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2042, __pyx_L1_error)
  __pyx_t_2 = PyList_New(1 * ((__pyx_t_3<0) ? 0:__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_3; __pyx_temp++) {
      __Pyx_INCREF(__pyx_kp_s_);
      __Pyx_GIVEREF(__pyx_kp_s_);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, __pyx_kp_s_);
    }
  }
  __pyx_v_next_href = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cydifflib.pyx":2043
 *         next_id = ['']*len(flaglist)
 *         next_href = ['']*len(flaglist)
 *         num_chg, in_change = 0, False             # <<<<<<<<<<<<<<
 *         last = 0
 *         for i,flag in enumerate(flaglist):
 */
  __pyx_t_2 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_v_num_chg = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_in_change = __pyx_t_4;

  /* "cydifflib.pyx":2044
 *         next_href = ['']*len(flaglist)
 *         num_chg, in_change = 0, False
 *         last = 0             # <<<<<<<<<<<<<<
 *         for i,flag in enumerate(flaglist):
 *             if flag:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_last = __pyx_int_0;

  /* "cydifflib.pyx":2045
 *         num_chg, in_change = 0, False
 *         last = 0
 *         for i,flag in enumerate(flaglist):             # <<<<<<<<<<<<<<
 *             if flag:
 *                 if not in_change:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_flaglist)) || PyTuple_CheckExact(__pyx_v_flaglist)) {
    __pyx_t_1 = __pyx_v_flaglist; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_flaglist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2045, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2045, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2045, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2045, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2045, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2045, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_flag, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "cydifflib.pyx":2046
 *         last = 0
 *         for i,flag in enumerate(flaglist):
 *             if flag:             # <<<<<<<<<<<<<<
 *                 if not in_change:
 *                     in_change = True
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_flag); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2046, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "cydifflib.pyx":2047
 *         for i,flag in enumerate(flaglist):
 *             if flag:
 *                 if not in_change:             # <<<<<<<<<<<<<<
 *                     in_change = True
 *                     last = i
 */
      __pyx_t_4 = ((!(__pyx_v_in_change != 0)) != 0);
      if (__pyx_t_4) {

        /* "cydifflib.pyx":2048
 *             if flag:
 *                 if not in_change:
 *                     in_change = True             # <<<<<<<<<<<<<<
 *                     last = i
 *                     # at the beginning of a change, drop an anchor a few lines
 */
        __pyx_v_in_change = 1;

        /* "cydifflib.pyx":2049
 *                 if not in_change:
 *                     in_change = True
 *                     last = i             # <<<<<<<<<<<<<<
 *                     # at the beginning of a change, drop an anchor a few lines
 *                     # (the context lines) before the change for the previous
 */
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_DECREF_SET(__pyx_v_last, __pyx_v_i);

        /* "cydifflib.pyx":2053
 *                     # (the context lines) before the change for the previous
 *                     # link
 *                     i = max([0,i-numlines])             # <<<<<<<<<<<<<<
 *                     next_id[i] = ' id="difflib_chg_%s_%d"' % (toprefix,num_chg)
 *                     # at the beginning of a change, drop a link to the next
 */
        __pyx_t_6 = PyNumber_Subtract(__pyx_v_i, __pyx_v_numlines); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = 0;
        __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyObject_RichCompare(__pyx_t_6, __pyx_t_9, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2053, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2053, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_4) {
          __Pyx_INCREF(__pyx_t_6);
          __pyx_t_8 = __pyx_t_6;
        } else {
          __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2053, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_8 = __pyx_t_10;
          __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __pyx_t_8;
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "cydifflib.pyx":2054
 *                     # link
 *                     i = max([0,i-numlines])
 *                     next_id[i] = ' id="difflib_chg_%s_%d"' % (toprefix,num_chg)             # <<<<<<<<<<<<<<
 *                     # at the beginning of a change, drop a link to the next
 *                     # change
 */
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_toprefix);
        __Pyx_GIVEREF(__pyx_v_toprefix);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_toprefix);
        __Pyx_INCREF(__pyx_v_num_chg);
        __Pyx_GIVEREF(__pyx_v_num_chg);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_num_chg);
        __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_id_difflib_chg__s__d, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely((PyObject_SetItem(__pyx_v_next_id, __pyx_v_i, __pyx_t_8) < 0))) __PYX_ERR(0, 2054, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "cydifflib.pyx":2057
 *                     # at the beginning of a change, drop a link to the next
 *                     # change
 *                     num_chg += 1             # <<<<<<<<<<<<<<
 *                     next_href[last] = '<a href="#difflib_chg_%s_%d">n</a>' % (
 *                          toprefix,num_chg)
 */
        __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_num_chg, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2057, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF_SET(__pyx_v_num_chg, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "cydifflib.pyx":2059
 *                     num_chg += 1
 *                     next_href[last] = '<a href="#difflib_chg_%s_%d">n</a>' % (
 *                          toprefix,num_chg)             # <<<<<<<<<<<<<<
 *             else:
 *                 in_change = False
 */
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2059, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_toprefix);
        __Pyx_GIVEREF(__pyx_v_toprefix);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_toprefix);
        __Pyx_INCREF(__pyx_v_num_chg);
        __Pyx_GIVEREF(__pyx_v_num_chg);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_num_chg);

        /* "cydifflib.pyx":2058
 *                     # change
 *                     num_chg += 1
 *                     next_href[last] = '<a href="#difflib_chg_%s_%d">n</a>' % (             # <<<<<<<<<<<<<<
 *                          toprefix,num_chg)
 *             else:
 */
        __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_a_href_difflib_chg__s__d_n_a, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2058, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely((PyObject_SetItem(__pyx_v_next_href, __pyx_v_last, __pyx_t_6) < 0))) __PYX_ERR(0, 2058, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cydifflib.pyx":2047
 *         for i,flag in enumerate(flaglist):
 *             if flag:
 *                 if not in_change:             # <<<<<<<<<<<<<<
 *                     in_change = True
 *                     last = i
 */
      }

      /* "cydifflib.pyx":2046
 *         last = 0
 *         for i,flag in enumerate(flaglist):
 *             if flag:             # <<<<<<<<<<<<<<
 *                 if not in_change:
 *                     in_change = True
 */
      goto __pyx_L5;
    }

    /* "cydifflib.pyx":2061
 *                          toprefix,num_chg)
 *             else:
 *                 in_change = False             # <<<<<<<<<<<<<<
 *         # check for cases where there is no content to avoid exceptions
 *         if not flaglist:
 */
    /*else*/ {
      __pyx_v_in_change = 0;
    }
    __pyx_L5:;

    /* "cydifflib.pyx":2045
 *         num_chg, in_change = 0, False
 *         last = 0
 *         for i,flag in enumerate(flaglist):             # <<<<<<<<<<<<<<
 *             if flag:
 *                 if not in_change:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":2063
 *                 in_change = False
 *         # check for cases where there is no content to avoid exceptions
 *         if not flaglist:             # <<<<<<<<<<<<<<
 *             flaglist = [False]
 *             next_id = ['']
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_flaglist); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2063, __pyx_L1_error)
  __pyx_t_11 = ((!__pyx_t_4) != 0);
  if (__pyx_t_11) {

    /* "cydifflib.pyx":2064
 *         # check for cases where there is no content to avoid exceptions
 *         if not flaglist:
 *             flaglist = [False]             # <<<<<<<<<<<<<<
 *             next_id = ['']
 *             next_href = ['']
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    PyList_SET_ITEM(__pyx_t_2, 0, Py_False);
    __Pyx_DECREF_SET(__pyx_v_flaglist, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":2065
 *         if not flaglist:
 *             flaglist = [False]
 *             next_id = ['']             # <<<<<<<<<<<<<<
 *             next_href = ['']
 *             last = 0
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s_);
    __Pyx_GIVEREF(__pyx_kp_s_);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_);
    __Pyx_DECREF_SET(__pyx_v_next_id, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":2066
 *             flaglist = [False]
 *             next_id = ['']
 *             next_href = ['']             # <<<<<<<<<<<<<<
 *             last = 0
 *             if context:
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s_);
    __Pyx_GIVEREF(__pyx_kp_s_);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_);
    __Pyx_DECREF_SET(__pyx_v_next_href, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "cydifflib.pyx":2067
 *             next_id = ['']
 *             next_href = ['']
 *             last = 0             # <<<<<<<<<<<<<<
 *             if context:
 *                 fromlist = ['<td></td><td>&nbsp;No Differences Found&nbsp;</td>']
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF_SET(__pyx_v_last, __pyx_int_0);

    /* "cydifflib.pyx":2068
 *             next_href = ['']
 *             last = 0
 *             if context:             # <<<<<<<<<<<<<<
 *                 fromlist = ['<td></td><td>&nbsp;No Differences Found&nbsp;</td>']
 *                 tolist = fromlist
 */
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_context); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 2068, __pyx_L1_error)
    if (__pyx_t_11) {

      /* "cydifflib.pyx":2069
 *             last = 0
 *             if context:
 *                 fromlist = ['<td></td><td>&nbsp;No Differences Found&nbsp;</td>']             # <<<<<<<<<<<<<<
 *                 tolist = fromlist
 *             else:
 */
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_td_td_td_nbsp_No_Differences_Fo);
      __Pyx_GIVEREF(__pyx_kp_s_td_td_td_nbsp_No_Differences_Fo);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_td_td_td_nbsp_No_Differences_Fo);
      __Pyx_DECREF_SET(__pyx_v_fromlist, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "cydifflib.pyx":2070
 *             if context:
 *                 fromlist = ['<td></td><td>&nbsp;No Differences Found&nbsp;</td>']
 *                 tolist = fromlist             # <<<<<<<<<<<<<<
 *             else:
 *                 fromlist = tolist = ['<td></td><td>&nbsp;Empty File&nbsp;</td>']
 */
      __Pyx_INCREF(__pyx_v_fromlist);
      __Pyx_DECREF_SET(__pyx_v_tolist, __pyx_v_fromlist);

      /* "cydifflib.pyx":2068
 *             next_href = ['']
 *             last = 0
 *             if context:             # <<<<<<<<<<<<<<
 *                 fromlist = ['<td></td><td>&nbsp;No Differences Found&nbsp;</td>']
 *                 tolist = fromlist
 */
      goto __pyx_L8;
    }

    /* "cydifflib.pyx":2072
 *                 tolist = fromlist
 *             else:
 *                 fromlist = tolist = ['<td></td><td>&nbsp;Empty File&nbsp;</td>']             # <<<<<<<<<<<<<<
 *         # if not a change on first line, drop a link
 *         if not flaglist[0]:
 */
    /*else*/ {
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2072, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t);
      __Pyx_GIVEREF(__pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_fromlist, __pyx_t_2);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_tolist, __pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "cydifflib.pyx":2063
 *                 in_change = False
 *         # check for cases where there is no content to avoid exceptions
 *         if not flaglist:             # <<<<<<<<<<<<<<
 *             flaglist = [False]
 *             next_id = ['']
 */
  }

  /* "cydifflib.pyx":2074
 *                 fromlist = tolist = ['<td></td><td>&nbsp;Empty File&nbsp;</td>']
 *         # if not a change on first line, drop a link
 *         if not flaglist[0]:             # <<<<<<<<<<<<<<
 *             next_href[0] = '<a href="#difflib_chg_%s_0">f</a>' % toprefix
 *         # redo the last link to link to the top
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flaglist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 2074, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_11) != 0);
  if (__pyx_t_4) {

    /* "cydifflib.pyx":2075
 *         # if not a change on first line, drop a link
 *         if not flaglist[0]:
 *             next_href[0] = '<a href="#difflib_chg_%s_0">f</a>' % toprefix             # <<<<<<<<<<<<<<
 *         # redo the last link to link to the top
 *         next_href[last] = '<a href="#difflib_chg_%s_top">t</a>' % (toprefix)
 */
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_a_href_difflib_chg__s_0_f_a, __pyx_v_toprefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely((__Pyx_SetItemInt(__pyx_v_next_href, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cydifflib.pyx":2074
 *                 fromlist = tolist = ['<td></td><td>&nbsp;Empty File&nbsp;</td>']
 *         # if not a change on first line, drop a link
 *         if not flaglist[0]:             # <<<<<<<<<<<<<<
 *             next_href[0] = '<a href="#difflib_chg_%s_0">f</a>' % toprefix
 *         # redo the last link to link to the top
 */
  }

  /* "cydifflib.pyx":2077
 *             next_href[0] = '<a href="#difflib_chg_%s_0">f</a>' % toprefix
 *         # redo the last link to link to the top
 *         next_href[last] = '<a href="#difflib_chg_%s_top">t</a>' % (toprefix)             # <<<<<<<<<<<<<<
 * 
 *         return fromlist,tolist,flaglist,next_href,next_id
 */
  __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_a_href_difflib_chg__s_top_t_a, __pyx_v_toprefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely((PyObject_SetItem(__pyx_v_next_href, __pyx_v_last, __pyx_t_2) < 0))) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":2079
 *         next_href[last] = '<a href="#difflib_chg_%s_top">t</a>' % (toprefix)
 * 
 *         return fromlist,tolist,flaglist,next_href,next_id             # <<<<<<<<<<<<<<
 * 
 *     def make_table(self,fromlines,tolines,fromdesc='',todesc='',context=False,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_fromlist);
  __Pyx_GIVEREF(__pyx_v_fromlist);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fromlist);
  __Pyx_INCREF(__pyx_v_tolist);
  __Pyx_GIVEREF(__pyx_v_tolist);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_tolist);
  __Pyx_INCREF(__pyx_v_flaglist);
  __Pyx_GIVEREF(__pyx_v_flaglist);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_flaglist);
  __Pyx_INCREF(__pyx_v_next_href);
  __Pyx_GIVEREF(__pyx_v_next_href);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_next_href);
  __Pyx_INCREF(__pyx_v_next_id);
  __Pyx_GIVEREF(__pyx_v_next_id);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_next_id);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":2034
 *         self._prefix = [fromprefix,toprefix]
 * 
 *     def _convert_flags(self,fromlist,tolist,flaglist,context,numlines):             # <<<<<<<<<<<<<<
 *         """Makes list of "next" links"""
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cydifflib.HtmlDiff._convert_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_toprefix);
  __Pyx_XDECREF(__pyx_v_next_id);
  __Pyx_XDECREF(__pyx_v_next_href);
  __Pyx_XDECREF(__pyx_v_num_chg);
  __Pyx_XDECREF(__pyx_v_last);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_flag);
  __Pyx_XDECREF(__pyx_v_fromlist);
  __Pyx_XDECREF(__pyx_v_tolist);
  __Pyx_XDECREF(__pyx_v_flaglist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cydifflib.pyx":2081
 *         return fromlist,tolist,flaglist,next_href,next_id
 * 
 *     def make_table(self,fromlines,tolines,fromdesc='',todesc='',context=False,             # <<<<<<<<<<<<<<
 *                    numlines=5):
 *         """Returns HTML table of side by side comparison with change highlights
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_20make_table(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_8HtmlDiff_19make_table, "Returns HTML table of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of \"from\" lines\n        tolines -- list of \"to\" lines\n        fromdesc -- \"from\" file column header string\n        todesc -- \"to\" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the \"next\" link anchors before the next change (so click of\n            \"next\" link jumps to just before the change).\n        ");
static PyMethodDef __pyx_mdef_9cydifflib_8HtmlDiff_20make_table = {"make_table", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_8HtmlDiff_20make_table, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_8HtmlDiff_19make_table};
static PyObject *__pyx_pw_9cydifflib_8HtmlDiff_20make_table(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_fromlines = 0;
  PyObject *__pyx_v_tolines = 0;
  PyObject *__pyx_v_fromdesc = 0;
  PyObject *__pyx_v_todesc = 0;
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_numlines = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_table (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fromlines,&__pyx_n_s_tolines,&__pyx_n_s_fromdesc,&__pyx_n_s_todesc,&__pyx_n_s_context,&__pyx_n_s_numlines,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fromlines,&__pyx_n_s_tolines,&__pyx_n_s_fromdesc,&__pyx_n_s_todesc,&__pyx_n_s_context,&__pyx_n_s_numlines,0};
    #endif
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[3] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[4] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    values[5] = ((PyObject *)((PyObject *)Py_False));
    values[6] = ((PyObject *)((PyObject *)__pyx_int_5));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromlines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("make_table", 0, 3, 7, 1); __PYX_ERR(0, 2081, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tolines)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("make_table", 0, 3, 7, 2); __PYX_ERR(0, 2081, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fromdesc);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_todesc);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_context);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_numlines);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "make_table") < 0)) __PYX_ERR(0, 2081, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_fromlines = values[1];
    __pyx_v_tolines = values[2];
    __pyx_v_fromdesc = values[3];
    __pyx_v_todesc = values[4];
    __pyx_v_context = values[5];
    __pyx_v_numlines = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_table", 0, 3, 7, __pyx_nargs); __PYX_ERR(0, 2081, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.HtmlDiff.make_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_8HtmlDiff_19make_table(__pyx_self, __pyx_v_self, __pyx_v_fromlines, __pyx_v_tolines, __pyx_v_fromdesc, __pyx_v_todesc, __pyx_v_context, __pyx_v_numlines);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_8HtmlDiff_19make_table(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_fromlines, PyObject *__pyx_v_tolines, PyObject *__pyx_v_fromdesc, PyObject *__pyx_v_todesc, PyObject *__pyx_v_context, PyObject *__pyx_v_numlines) {
  PyObject *__pyx_v_context_lines = NULL;
  PyObject *__pyx_v_diffs = NULL;
  PyObject *__pyx_v_fromlist = NULL;
  PyObject *__pyx_v_tolist = NULL;
  PyObject *__pyx_v_flaglist = NULL;
  PyObject *__pyx_v_next_href = NULL;
  PyObject *__pyx_v_next_id = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_fmt = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_header_row = NULL;
  PyObject *__pyx_v_table = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_table", 0);
  __Pyx_INCREF(__pyx_v_fromlines);
  __Pyx_INCREF(__pyx_v_tolines);

  /* "cydifflib.pyx":2101
 *         # make unique anchor prefixes so that multiple tables may exist
 *         # on the same page without conflict.
 *         self._make_prefix()             # <<<<<<<<<<<<<<
 * 
 *         # change tabs to spaces before it gets more difficult after we insert
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_make_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":2105
 *         # change tabs to spaces before it gets more difficult after we insert
 *         # markup
 *         fromlines,tolines = self._tab_newline_replace(fromlines,tolines)             # <<<<<<<<<<<<<<
 * 
 *         # create diffs iterator which generates side by side from/to data
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_tab_newline_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_fromlines, __pyx_v_tolines};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2105, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 2105, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2105, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __Pyx_DECREF_SET(__pyx_v_fromlines, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_tolines, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "cydifflib.pyx":2108
 * 
 *         # create diffs iterator which generates side by side from/to data
 *         if context:             # <<<<<<<<<<<<<<
 *             context_lines = numlines
 *         else:
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_context); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 2108, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "cydifflib.pyx":2109
 *         # create diffs iterator which generates side by side from/to data
 *         if context:
 *             context_lines = numlines             # <<<<<<<<<<<<<<
 *         else:
 *             context_lines = None
 */
    __Pyx_INCREF(__pyx_v_numlines);
    __pyx_v_context_lines = __pyx_v_numlines;

    /* "cydifflib.pyx":2108
 * 
 *         # create diffs iterator which generates side by side from/to data
 *         if context:             # <<<<<<<<<<<<<<
 *             context_lines = numlines
 *         else:
 */
    goto __pyx_L5;
  }

  /* "cydifflib.pyx":2111
 *             context_lines = numlines
 *         else:
 *             context_lines = None             # <<<<<<<<<<<<<<
 *         diffs = _mdiff(fromlines,tolines,context_lines,linejunk=self._linejunk,
 *                       charjunk=self._charjunk)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_context_lines = Py_None;
  }
  __pyx_L5:;

  /* "cydifflib.pyx":2112
 *         else:
 *             context_lines = None
 *         diffs = _mdiff(fromlines,tolines,context_lines,linejunk=self._linejunk,             # <<<<<<<<<<<<<<
 *                       charjunk=self._charjunk)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_mdiff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_fromlines);
  __Pyx_GIVEREF(__pyx_v_fromlines);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_fromlines);
  __Pyx_INCREF(__pyx_v_tolines);
  __Pyx_GIVEREF(__pyx_v_tolines);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_tolines);
  __Pyx_INCREF(__pyx_v_context_lines);
  __Pyx_GIVEREF(__pyx_v_context_lines);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_context_lines);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_linejunk_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_linejunk, __pyx_t_5) < 0) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":2113
 *             context_lines = None
 *         diffs = _mdiff(fromlines,tolines,context_lines,linejunk=self._linejunk,
 *                       charjunk=self._charjunk)             # <<<<<<<<<<<<<<
 * 
 *         # set up iterator to wrap lines that exceed desired width
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_charjunk_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_charjunk, __pyx_t_5) < 0) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":2112
 *         else:
 *             context_lines = None
 *         diffs = _mdiff(fromlines,tolines,context_lines,linejunk=self._linejunk,             # <<<<<<<<<<<<<<
 *                       charjunk=self._charjunk)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_diffs = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "cydifflib.pyx":2116
 * 
 *         # set up iterator to wrap lines that exceed desired width
 *         if self._wrapcolumn:             # <<<<<<<<<<<<<<
 *             diffs = self._line_wrapper(diffs)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapcolumn_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_7) {

    /* "cydifflib.pyx":2117
 *         # set up iterator to wrap lines that exceed desired width
 *         if self._wrapcolumn:
 *             diffs = self._line_wrapper(diffs)             # <<<<<<<<<<<<<<
 * 
 *         # collect up from/to lines and flags into lists (also format the lines)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_line_wrapper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_diffs};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_diffs, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "cydifflib.pyx":2116
 * 
 *         # set up iterator to wrap lines that exceed desired width
 *         if self._wrapcolumn:             # <<<<<<<<<<<<<<
 *             diffs = self._line_wrapper(diffs)
 * 
 */
  }

  /* "cydifflib.pyx":2120
 * 
 *         # collect up from/to lines and flags into lists (also format the lines)
 *         fromlist,tolist,flaglist = self._collect_lines(diffs)             # <<<<<<<<<<<<<<
 * 
 *         # process change flags, generating middle column of next anchors/links
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_collect_lines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_diffs};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2120, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_8); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_8); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_1 = __pyx_t_6(__pyx_t_8); if (unlikely(!__pyx_t_1)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_8), 3) < 0) __PYX_ERR(0, 2120, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L8_unpacking_done;
    __pyx_L7_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2120, __pyx_L1_error)
    __pyx_L8_unpacking_done:;
  }
  __pyx_v_fromlist = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_tolist = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_flaglist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cydifflib.pyx":2123
 * 
 *         # process change flags, generating middle column of next anchors/links
 *         fromlist,tolist,flaglist,next_href,next_id = self._convert_flags(             # <<<<<<<<<<<<<<
 *             fromlist,tolist,flaglist,context,numlines)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_convert_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cydifflib.pyx":2124
 *         # process change flags, generating middle column of next anchors/links
 *         fromlist,tolist,flaglist,next_href,next_id = self._convert_flags(
 *             fromlist,tolist,flaglist,context,numlines)             # <<<<<<<<<<<<<<
 * 
 *         s = []
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_3, __pyx_v_fromlist, __pyx_v_tolist, __pyx_v_flaglist, __pyx_v_context, __pyx_v_numlines};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 5+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 5)) {
      if (size > 5) __Pyx_RaiseTooManyValuesError(5);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2123, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 4); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 4); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_9);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[5] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_2,&__pyx_t_8,&__pyx_t_9};
      for (i=0; i < 5; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2123, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[5] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_2,&__pyx_t_8,&__pyx_t_9};
    __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
    for (index=0; index < 5; index++) {
      PyObject* item = __pyx_t_6(__pyx_t_10); if (unlikely(!item)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_10), 5) < 0) __PYX_ERR(0, 2123, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L10_unpacking_done;
    __pyx_L9_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2123, __pyx_L1_error)
    __pyx_L10_unpacking_done:;
  }

  /* "cydifflib.pyx":2123
 * 
 *         # process change flags, generating middle column of next anchors/links
 *         fromlist,tolist,flaglist,next_href,next_id = self._convert_flags(             # <<<<<<<<<<<<<<
 *             fromlist,tolist,flaglist,context,numlines)
 * 
 */
  __Pyx_DECREF_SET(__pyx_v_fromlist, __pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_tolist, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_flaglist, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_next_href = __pyx_t_8;
  __pyx_t_8 = 0;
  __pyx_v_next_id = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "cydifflib.pyx":2126
 *             fromlist,tolist,flaglist,context,numlines)
 * 
 *         s = []             # <<<<<<<<<<<<<<
 *         fmt = '            <tr><td class="diff_next"%s>%s</td>%s' + \
 *               '<td class="diff_next">%s</td>%s</tr>\n'
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_s = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cydifflib.pyx":2127
 * 
 *         s = []
 *         fmt = '            <tr><td class="diff_next"%s>%s</td>%s' + \             # <<<<<<<<<<<<<<
 *               '<td class="diff_next">%s</td>%s</tr>\n'
 *         for i in range(len(flaglist)):
 */
  __pyx_t_5 = __Pyx_PyStr_Concat(__pyx_kp_s_tr_td_class_diff_next_s_s_td_s, __pyx_kp_s_td_class_diff_next_s_td_s_tr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_fmt = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "cydifflib.pyx":2129
 *         fmt = '            <tr><td class="diff_next"%s>%s</td>%s' + \
 *               '<td class="diff_next">%s</td>%s</tr>\n'
 *         for i in range(len(flaglist)):             # <<<<<<<<<<<<<<
 *             if flaglist[i] is None:
 *                 # mdiff yields None on separator lines skip the bogus ones
 */
  __pyx_t_11 = PyObject_Length(__pyx_v_flaglist); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2129, __pyx_L1_error)
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "cydifflib.pyx":2130
 *               '<td class="diff_next">%s</td>%s</tr>\n'
 *         for i in range(len(flaglist)):
 *             if flaglist[i] is None:             # <<<<<<<<<<<<<<
 *                 # mdiff yields None on separator lines skip the bogus ones
 *                 # generated for the first line
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_flaglist, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = (__pyx_t_5 == Py_None);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = (__pyx_t_7 != 0);
    if (__pyx_t_14) {

      /* "cydifflib.pyx":2133
 *                 # mdiff yields None on separator lines skip the bogus ones
 *                 # generated for the first line
 *                 if i > 0:             # <<<<<<<<<<<<<<
 *                     s.append('        </tbody>        \n        <tbody>\n')
 *             else:
 */
      __pyx_t_14 = ((__pyx_v_i > 0) != 0);
      if (__pyx_t_14) {

        /* "cydifflib.pyx":2134
 *                 # generated for the first line
 *                 if i > 0:
 *                     s.append('        </tbody>        \n        <tbody>\n')             # <<<<<<<<<<<<<<
 *             else:
 *                 s.append( fmt % (next_id[i],next_href[i],fromlist[i],
 */
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_s, __pyx_kp_s_tbody_tbody); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 2134, __pyx_L1_error)

        /* "cydifflib.pyx":2133
 *                 # mdiff yields None on separator lines skip the bogus ones
 *                 # generated for the first line
 *                 if i > 0:             # <<<<<<<<<<<<<<
 *                     s.append('        </tbody>        \n        <tbody>\n')
 *             else:
 */
      }

      /* "cydifflib.pyx":2130
 *               '<td class="diff_next">%s</td>%s</tr>\n'
 *         for i in range(len(flaglist)):
 *             if flaglist[i] is None:             # <<<<<<<<<<<<<<
 *                 # mdiff yields None on separator lines skip the bogus ones
 *                 # generated for the first line
 */
      goto __pyx_L13;
    }

    /* "cydifflib.pyx":2136
 *                     s.append('        </tbody>        \n        <tbody>\n')
 *             else:
 *                 s.append( fmt % (next_id[i],next_href[i],fromlist[i],             # <<<<<<<<<<<<<<
 *                                            next_href[i],tolist[i]))
 *         if fromdesc or todesc:
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_next_id, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_next_href, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_fromlist, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "cydifflib.pyx":2137
 *             else:
 *                 s.append( fmt % (next_id[i],next_href[i],fromlist[i],
 *                                            next_href[i],tolist[i]))             # <<<<<<<<<<<<<<
 *         if fromdesc or todesc:
 *             header_row = '<thead><tr>%s%s%s%s</tr></thead>' % (
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_next_href, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_tolist, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "cydifflib.pyx":2136
 *                     s.append('        </tbody>        \n        <tbody>\n')
 *             else:
 *                 s.append( fmt % (next_id[i],next_href[i],fromlist[i],             # <<<<<<<<<<<<<<
 *                                            next_href[i],tolist[i]))
 *         if fromdesc or todesc:
 */
      __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_9 = 0;
      __pyx_t_8 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Remainder(__pyx_v_fmt, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_s, __pyx_t_3); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L13:;
  }

  /* "cydifflib.pyx":2138
 *                 s.append( fmt % (next_id[i],next_href[i],fromlist[i],
 *                                            next_href[i],tolist[i]))
 *         if fromdesc or todesc:             # <<<<<<<<<<<<<<
 *             header_row = '<thead><tr>%s%s%s%s</tr></thead>' % (
 *                 '<th class="diff_next"><br /></th>',
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_fromdesc); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 2138, __pyx_L1_error)
  if (!__pyx_t_7) {
  } else {
    __pyx_t_14 = __pyx_t_7;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_todesc); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 2138, __pyx_L1_error)
  __pyx_t_14 = __pyx_t_7;
  __pyx_L16_bool_binop_done:;
  if (__pyx_t_14) {

    /* "cydifflib.pyx":2141
 *             header_row = '<thead><tr>%s%s%s%s</tr></thead>' % (
 *                 '<th class="diff_next"><br /></th>',
 *                 '<th colspan="2" class="diff_header">%s</th>' % fromdesc,             # <<<<<<<<<<<<<<
 *                 '<th class="diff_next"><br /></th>',
 *                 '<th colspan="2" class="diff_header">%s</th>' % todesc)
 */
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_th_colspan_2_class_diff_header, __pyx_v_fromdesc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "cydifflib.pyx":2143
 *                 '<th colspan="2" class="diff_header">%s</th>' % fromdesc,
 *                 '<th class="diff_next"><br /></th>',
 *                 '<th colspan="2" class="diff_header">%s</th>' % todesc)             # <<<<<<<<<<<<<<
 *         else:
 *             header_row = ''
 */
    __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_th_colspan_2_class_diff_header, __pyx_v_todesc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "cydifflib.pyx":2140
 *         if fromdesc or todesc:
 *             header_row = '<thead><tr>%s%s%s%s</tr></thead>' % (
 *                 '<th class="diff_next"><br /></th>',             # <<<<<<<<<<<<<<
 *                 '<th colspan="2" class="diff_header">%s</th>' % fromdesc,
 *                 '<th class="diff_next"><br /></th>',
 */
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s_th_class_diff_next_br_th);
    __Pyx_GIVEREF(__pyx_kp_s_th_class_diff_next_br_th);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_th_class_diff_next_br_th);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_kp_s_th_class_diff_next_br_th);
    __Pyx_GIVEREF(__pyx_kp_s_th_class_diff_next_br_th);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s_th_class_diff_next_br_th);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":2139
 *                                            next_href[i],tolist[i]))
 *         if fromdesc or todesc:
 *             header_row = '<thead><tr>%s%s%s%s</tr></thead>' % (             # <<<<<<<<<<<<<<
 *                 '<th class="diff_next"><br /></th>',
 *                 '<th colspan="2" class="diff_header">%s</th>' % fromdesc,
 */
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_thead_tr_s_s_s_s_tr_thead, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_header_row = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":2138
 *                 s.append( fmt % (next_id[i],next_href[i],fromlist[i],
 *                                            next_href[i],tolist[i]))
 *         if fromdesc or todesc:             # <<<<<<<<<<<<<<
 *             header_row = '<thead><tr>%s%s%s%s</tr></thead>' % (
 *                 '<th class="diff_next"><br /></th>',
 */
    goto __pyx_L15;
  }

  /* "cydifflib.pyx":2145
 *                 '<th colspan="2" class="diff_header">%s</th>' % todesc)
 *         else:
 *             header_row = ''             # <<<<<<<<<<<<<<
 * 
 *         table = self._table_template % dict(
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_kp_s_);
    __pyx_v_header_row = __pyx_kp_s_;
  }
  __pyx_L15:;

  /* "cydifflib.pyx":2147
 *             header_row = ''
 * 
 *         table = self._table_template % dict(             # <<<<<<<<<<<<<<
 *             data_rows=''.join(s),
 *             header_row=header_row,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_table_template); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cydifflib.pyx":2148
 * 
 *         table = self._table_template % dict(
 *             data_rows=''.join(s),             # <<<<<<<<<<<<<<
 *             header_row=header_row,
 *             prefix=self._prefix[1])
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_v_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_data_rows, __pyx_t_3) < 0) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cydifflib.pyx":2149
 *         table = self._table_template % dict(
 *             data_rows=''.join(s),
 *             header_row=header_row,             # <<<<<<<<<<<<<<
 *             prefix=self._prefix[1])
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_header_row, __pyx_v_header_row) < 0) __PYX_ERR(0, 2148, __pyx_L1_error)

  /* "cydifflib.pyx":2150
 *             data_rows=''.join(s),
 *             header_row=header_row,
 *             prefix=self._prefix[1])             # <<<<<<<<<<<<<<
 * 
 *         return table.replace('\0+','<span class="diff_add">'). \
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_prefix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_prefix_2, __pyx_t_8) < 0) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "cydifflib.pyx":2147
 *             header_row = ''
 * 
 *         table = self._table_template % dict(             # <<<<<<<<<<<<<<
 *             data_rows=''.join(s),
 *             header_row=header_row,
 */
  __pyx_t_8 = PyNumber_Remainder(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_table = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "cydifflib.pyx":2152
 *             prefix=self._prefix[1])
 * 
 *         return table.replace('\0+','<span class="diff_add">'). \             # <<<<<<<<<<<<<<
 *                      replace('\0-','<span class="diff_sub">'). \
 *                      replace('\0^','<span class="diff_chg">'). \
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_table, __pyx_n_s_replace); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":2153
 * 
 *         return table.replace('\0+','<span class="diff_add">'). \
 *                      replace('\0-','<span class="diff_sub">'). \             # <<<<<<<<<<<<<<
 *                      replace('\0^','<span class="diff_chg">'). \
 *                      replace('\1','</span>'). \
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":2154
 *         return table.replace('\0+','<span class="diff_add">'). \
 *                      replace('\0-','<span class="diff_sub">'). \
 *                      replace('\0^','<span class="diff_chg">'). \             # <<<<<<<<<<<<<<
 *                      replace('\1','</span>'). \
 *                      replace('\t','&nbsp;')
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":2155
 *                      replace('\0-','<span class="diff_sub">'). \
 *                      replace('\0^','<span class="diff_chg">'). \
 *                      replace('\1','</span>'). \             # <<<<<<<<<<<<<<
 *                      replace('\t','&nbsp;')
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":2156
 *                      replace('\0^','<span class="diff_chg">'). \
 *                      replace('\1','</span>'). \
 *                      replace('\t','&nbsp;')             # <<<<<<<<<<<<<<
 * 
 * del re
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cydifflib.pyx":2081
 *         return fromlist,tolist,flaglist,next_href,next_id
 * 
 *     def make_table(self,fromlines,tolines,fromdesc='',todesc='',context=False,             # <<<<<<<<<<<<<<
 *                    numlines=5):
 *         """Returns HTML table of side by side comparison with change highlights
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cydifflib.HtmlDiff.make_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_context_lines);
  __Pyx_XDECREF(__pyx_v_diffs);
  __Pyx_XDECREF(__pyx_v_fromlist);
  __Pyx_XDECREF(__pyx_v_tolist);
  __Pyx_XDECREF(__pyx_v_flaglist);
  __Pyx_XDECREF(__pyx_v_next_href);
  __Pyx_XDECREF(__pyx_v_next_id);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_fmt);
  __Pyx_XDECREF(__pyx_v_header_row);
  __Pyx_XDECREF(__pyx_v_table);
  __Pyx_XDECREF(__pyx_v_fromlines);
  __Pyx_XDECREF(__pyx_v_tolines);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9cydifflib_30generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cydifflib.pyx":2160
 * del re
 * 
 * def restore(delta, which):             # <<<<<<<<<<<<<<
 *     r"""
 *     Generate one of the two sequences that generated a delta.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9cydifflib_29restore(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9cydifflib_28restore, "\n    Generate one of the two sequences that generated a delta.\n\n    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract\n    lines originating from file 1 or 2 (parameter `which`), stripping off line\n    prefixes.\n\n    Examples:\n\n    >>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n    ...              'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\n    >>> diff = list(diff)\n    >>> print(''.join(restore(diff, 1)), end=\"\")\n    one\n    two\n    three\n    >>> print(''.join(restore(diff, 2)), end=\"\")\n    ore\n    tree\n    emu\n    ");
static PyMethodDef __pyx_mdef_9cydifflib_29restore = {"restore", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_29restore, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_28restore};
static PyObject *__pyx_pw_9cydifflib_29restore(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_delta = 0;
  PyObject *__pyx_v_which = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delta,&__pyx_n_s_which,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delta,&__pyx_n_s_which,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_delta)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2160, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_which)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2160, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("restore", 1, 2, 2, 1); __PYX_ERR(0, 2160, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "restore") < 0)) __PYX_ERR(0, 2160, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_delta = values[0];
    __pyx_v_which = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("restore", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 2160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cydifflib.restore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9cydifflib_28restore(__pyx_self, __pyx_v_delta, __pyx_v_which);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9cydifflib_28restore(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_delta, PyObject *__pyx_v_which) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restore", 0);
  __pyx_cur_scope = (struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *)__pyx_tp_new_9cydifflib___pyx_scope_struct_21_restore(__pyx_ptype_9cydifflib___pyx_scope_struct_21_restore, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2160, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_delta = __pyx_v_delta;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_delta);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_delta);
  __pyx_cur_scope->__pyx_v_which = __pyx_v_which;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_which);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_which);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9cydifflib_30generator12, __pyx_codeobj__89, (PyObject *) __pyx_cur_scope, __pyx_n_s_restore, __pyx_n_s_restore, __pyx_n_s_cydifflib); if (unlikely(!gen)) __PYX_ERR(0, 2160, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cydifflib.restore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9cydifflib_30generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *__pyx_cur_scope = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2160, __pyx_L1_error)

  /* "cydifflib.pyx":2182
 *     emu
 *     """
 *     cdef Py_ssize_t _which = int(which)             # <<<<<<<<<<<<<<
 *     if _which == 1:
 *         tag = "- "
 */
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_which); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_cur_scope->__pyx_v__which = __pyx_t_2;

  /* "cydifflib.pyx":2183
 *     """
 *     cdef Py_ssize_t _which = int(which)
 *     if _which == 1:             # <<<<<<<<<<<<<<
 *         tag = "- "
 *     elif _which == 2:
 */
  switch (__pyx_cur_scope->__pyx_v__which) {
    case 1:

    /* "cydifflib.pyx":2184
 *     cdef Py_ssize_t _which = int(which)
 *     if _which == 1:
 *         tag = "- "             # <<<<<<<<<<<<<<
 *     elif _which == 2:
 *         tag = "+ "
 */
    __Pyx_INCREF(__pyx_kp_s__15);
    __Pyx_GIVEREF(__pyx_kp_s__15);
    __pyx_cur_scope->__pyx_v_tag = __pyx_kp_s__15;

    /* "cydifflib.pyx":2183
 *     """
 *     cdef Py_ssize_t _which = int(which)
 *     if _which == 1:             # <<<<<<<<<<<<<<
 *         tag = "- "
 *     elif _which == 2:
 */
    break;
    case 2:

    /* "cydifflib.pyx":2186
 *         tag = "- "
 *     elif _which == 2:
 *         tag = "+ "             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError('unknown delta choice (must be 1 or 2): %r'
 */
    __Pyx_INCREF(__pyx_kp_s__18);
    __Pyx_GIVEREF(__pyx_kp_s__18);
    __pyx_cur_scope->__pyx_v_tag = __pyx_kp_s__18;

    /* "cydifflib.pyx":2185
 *     if _which == 1:
 *         tag = "- "
 *     elif _which == 2:             # <<<<<<<<<<<<<<
 *         tag = "+ "
 *     else:
 */
    break;
    default:

    /* "cydifflib.pyx":2189
 *     else:
 *         raise ValueError('unknown delta choice (must be 1 or 2): %r'
 *                            % which) from None             # <<<<<<<<<<<<<<
 *     prefixes = ("  ", tag)
 *     for line in delta:
 */
    __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_unknown_delta_choice_must_be_1_o, __pyx_cur_scope->__pyx_v_which); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "cydifflib.pyx":2188
 *         tag = "+ "
 *     else:
 *         raise ValueError('unknown delta choice (must be 1 or 2): %r'             # <<<<<<<<<<<<<<
 *                            % which) from None
 *     prefixes = ("  ", tag)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cydifflib.pyx":2189
 *     else:
 *         raise ValueError('unknown delta choice (must be 1 or 2): %r'
 *                            % which) from None             # <<<<<<<<<<<<<<
 *     prefixes = ("  ", tag)
 *     for line in delta:
 */
    __Pyx_Raise(__pyx_t_3, 0, 0, Py_None);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2188, __pyx_L1_error)
    break;
  }

  /* "cydifflib.pyx":2190
 *         raise ValueError('unknown delta choice (must be 1 or 2): %r'
 *                            % which) from None
 *     prefixes = ("  ", tag)             # <<<<<<<<<<<<<<
 *     for line in delta:
 *         if line[:2] in prefixes:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s__12);
  __Pyx_GIVEREF(__pyx_kp_s__12);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s__12);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_cur_scope->__pyx_v_tag);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_prefixes = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cydifflib.pyx":2191
 *                            % which) from None
 *     prefixes = ("  ", tag)
 *     for line in delta:             # <<<<<<<<<<<<<<
 *         if line[:2] in prefixes:
 *             yield line[2:]
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_delta)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_delta)) {
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_delta; __Pyx_INCREF(__pyx_t_3); __pyx_t_2 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_delta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2191, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 2191, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 2191, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2191, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cydifflib.pyx":2192
 *     prefixes = ("  ", tag)
 *     for line in delta:
 *         if line[:2] in prefixes:             # <<<<<<<<<<<<<<
 *             yield line[2:]
 */
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_line, 0, 2, NULL, NULL, &__pyx_slice__90, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_cur_scope->__pyx_v_prefixes, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "cydifflib.pyx":2193
 *     for line in delta:
 *         if line[:2] in prefixes:
 *             yield line[2:]             # <<<<<<<<<<<<<<
 */
      __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_line, 2, 0, NULL, NULL, &__pyx_slice__38, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __Pyx_XGIVEREF(__pyx_t_3);
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_t_3);
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2193, __pyx_L1_error)

      /* "cydifflib.pyx":2192
 *     prefixes = ("  ", tag)
 *     for line in delta:
 *         if line[:2] in prefixes:             # <<<<<<<<<<<<<<
 *             yield line[2:]
 */
    }

    /* "cydifflib.pyx":2191
 *                            % which) from None
 *     prefixes = ("  ", tag)
 *     for line in delta:             # <<<<<<<<<<<<<<
 *         if line[:2] in prefixes:
 *             yield line[2:]
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cydifflib.pyx":2160
 * del re
 * 
 * def restore(delta, which):             # <<<<<<<<<<<<<<
 *     r"""
 *     Generate one of the two sequences that generated a delta.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("restore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9cydifflib_SequenceMatcher __pyx_vtable_9cydifflib_SequenceMatcher;

static PyObject *__pyx_tp_new_9cydifflib_SequenceMatcher(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9cydifflib_SequenceMatcher *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9cydifflib_SequenceMatcher *)o);
  p->__pyx_vtab = __pyx_vtabptr_9cydifflib_SequenceMatcher;
  new((void*)&(p->j2len_)) std::vector<Py_ssize_t> ();
  p->a = Py_None; Py_INCREF(Py_None);
  p->b = Py_None; Py_INCREF(Py_None);
  p->b2j = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->fullbcount = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->matching_blocks = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->opcodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->isjunk = Py_None; Py_INCREF(Py_None);
  p->bjunk = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->bpopular = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->autojunk = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9cydifflib_SequenceMatcher(PyObject *o) {
  struct __pyx_obj_9cydifflib_SequenceMatcher *p = (struct __pyx_obj_9cydifflib_SequenceMatcher *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->j2len_);
  Py_CLEAR(p->a);
  Py_CLEAR(p->b);
  Py_CLEAR(p->b2j);
  Py_CLEAR(p->fullbcount);
  Py_CLEAR(p->matching_blocks);
  Py_CLEAR(p->opcodes);
  Py_CLEAR(p->isjunk);
  Py_CLEAR(p->bjunk);
  Py_CLEAR(p->bpopular);
  Py_CLEAR(p->autojunk);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9cydifflib_SequenceMatcher(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib_SequenceMatcher *p = (struct __pyx_obj_9cydifflib_SequenceMatcher *)o;
  if (p->a) {
    e = (*v)(p->a, a); if (e) return e;
  }
  if (p->b) {
    e = (*v)(p->b, a); if (e) return e;
  }
  if (p->b2j) {
    e = (*v)(p->b2j, a); if (e) return e;
  }
  if (p->fullbcount) {
    e = (*v)(p->fullbcount, a); if (e) return e;
  }
  if (p->matching_blocks) {
    e = (*v)(p->matching_blocks, a); if (e) return e;
  }
  if (p->opcodes) {
    e = (*v)(p->opcodes, a); if (e) return e;
  }
  if (p->isjunk) {
    e = (*v)(p->isjunk, a); if (e) return e;
  }
  if (p->bjunk) {
    e = (*v)(p->bjunk, a); if (e) return e;
  }
  if (p->bpopular) {
    e = (*v)(p->bpopular, a); if (e) return e;
  }
  if (p->autojunk) {
    e = (*v)(p->autojunk, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9cydifflib_SequenceMatcher(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9cydifflib_SequenceMatcher *p = (struct __pyx_obj_9cydifflib_SequenceMatcher *)o;
  tmp = ((PyObject*)p->a);
  p->a = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->b);
  p->b = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->b2j);
  p->b2j = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fullbcount);
  p->fullbcount = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->matching_blocks);
  p->matching_blocks = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->opcodes);
  p->opcodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->isjunk);
  p->isjunk = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->bjunk);
  p->bjunk = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->bpopular);
  p->bpopular = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->autojunk);
  p->autojunk = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9cydifflib_SequenceMatcher[] = {
  {"find_longest_match", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_9find_longest_match, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_8find_longest_match},
  {"get_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_13get_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_12get_opcodes},
  {"get_grouped_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_15get_grouped_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_14get_grouped_opcodes},
  {"ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_18ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_17ratio},
  {"quick_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_20quick_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_19quick_ratio},
  {"real_quick_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_22real_quick_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9cydifflib_15SequenceMatcher_21real_quick_ratio},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_24__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9cydifflib_15SequenceMatcher_26__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib_SequenceMatcher_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib_SequenceMatcher},
  {Py_tp_doc, (void *)PyDoc_STR("\n    SequenceMatcher is a flexible class for comparing pairs of sequences of\n    any type, so long as the sequence elements are hashable.  The basic\n    algorithm predates, and is a little fancier than, an algorithm\n    published in the late 1980's by Ratcliff and Obershelp under the\n    hyperbolic name \"gestalt pattern matching\".  The basic idea is to find\n    the longest contiguous matching subsequence that contains no \"junk\"\n    elements (R-O doesn't address junk).  The same idea is then applied\n    recursively to the pieces of the sequences to the left and to the right\n    of the matching subsequence.  This does not yield minimal edit\n    sequences, but does tend to yield matches that \"look right\" to people.\n\n    SequenceMatcher tries to compute a \"human-friendly diff\" between two\n    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the\n    longest *contiguous* & junk-free matching subsequence.  That's what\n    catches peoples' eyes.  The Windows(tm) windiff has another interesting\n    notion, pairing up elements that appear uniquely in each sequence.\n    That, and the method here, appear to yield more intuitive difference\n    reports than does diff.  This method appears to be the least vulnerable\n    to synching up on blocks of \"junk lines\", though (like blank lines in\n    ordinary text files, or maybe \"<P>\" lines in HTML files).  That may be\n    because this is the only method of the 3 that has a *concept* of\n    \"junk\" <wink>.\n\n    Example, comparing two strings, and considering blanks to be \"junk\":\n\n    >>> s = SequenceMatcher(lambda x: x == \" \",\n    ...                     \"private Thread currentThread;\",\n    ...                     \"private volatile Thread currentThread;\")\n    >>>\n\n    .ratio() returns a float in [0, 1], measuring the \"similarity\" of the\n    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the\n    sequences are close matches:\n\n    >>> print(round(s.ra""tio(), 3))\n    0.866\n    >>>\n\n    If you're only interested in where the sequences match,\n    .get_matching_blocks() is handy:\n\n    >>> for block in s.get_matching_blocks():\n    ...     print(\"a[%d] and b[%d] match for %d elements\" % block)\n    a[0] and b[0] match for 8 elements\n    a[8] and b[17] match for 21 elements\n    a[29] and b[38] match for 0 elements\n\n    Note that the last tuple returned by .get_matching_blocks() is always a\n    dummy, (len(a), len(b), 0), and this is the only case in which the last\n    tuple element (number of elements matched) is 0.\n\n    If you want to know how to change the first sequence into the second,\n    use .get_opcodes():\n\n    >>> for opcode in s.get_opcodes():\n    ...     print(\"%6s a[%d:%d] b[%d:%d]\" % opcode)\n     equal a[0:8] b[0:8]\n    insert a[8:8] b[8:17]\n     equal a[8:29] b[17:38]\n\n    See the Differ class for a fancy human-friendly file differencer, which\n    uses SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n\n    See also function get_close_matches() in this module, which shows how\n    simple code building on SequenceMatcher can be used to do useful work.\n\n    Timing:  Basic R-O is cubic time worst case and quadratic time expected\n    case.  SequenceMatcher is quadratic time for the worst case and has\n    expected-case behavior dependent in a complicated way on how many\n    elements the sequences have in common; best case time is linear.\n\n    Methods:\n\n    __init__(isjunk=None, a='', b='')\n        Construct a SequenceMatcher.\n\n    set_seqs(a, b)\n        Set the two sequences to be compared.\n\n    set_seq1(a)\n        Set the first sequence to be compared.\n\n    set_seq2(b)\n        Set the second sequence to be compared.\n\n    find_longest_match(alo=0, ahi=None, blo=0, bhi=None)\n        Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n    get_matching_blocks()\n        R""eturn list of triples describing matching subsequences.\n\n    get_opcodes()\n        Return list of 5-tuples describing how to turn a into b.\n\n    ratio()\n        Return a measure of the sequences' similarity (float in [0,1]).\n\n    quick_ratio()\n        Return an upper bound on .ratio() relatively quickly.\n\n    real_quick_ratio()\n        Return an upper bound on ratio() very quickly.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib_SequenceMatcher},
  {Py_tp_clear, (void *)__pyx_tp_clear_9cydifflib_SequenceMatcher},
  {Py_tp_methods, (void *)__pyx_methods_9cydifflib_SequenceMatcher},
  {Py_tp_init, (void *)__pyx_pw_9cydifflib_15SequenceMatcher_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib_SequenceMatcher},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib_SequenceMatcher_spec = {
  "cydifflib.SequenceMatcher",
  sizeof(struct __pyx_obj_9cydifflib_SequenceMatcher),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib_SequenceMatcher_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib_SequenceMatcher = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""SequenceMatcher", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib_SequenceMatcher), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib_SequenceMatcher, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    SequenceMatcher is a flexible class for comparing pairs of sequences of\n    any type, so long as the sequence elements are hashable.  The basic\n    algorithm predates, and is a little fancier than, an algorithm\n    published in the late 1980's by Ratcliff and Obershelp under the\n    hyperbolic name \"gestalt pattern matching\".  The basic idea is to find\n    the longest contiguous matching subsequence that contains no \"junk\"\n    elements (R-O doesn't address junk).  The same idea is then applied\n    recursively to the pieces of the sequences to the left and to the right\n    of the matching subsequence.  This does not yield minimal edit\n    sequences, but does tend to yield matches that \"look right\" to people.\n\n    SequenceMatcher tries to compute a \"human-friendly diff\" between two\n    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the\n    longest *contiguous* & junk-free matching subsequence.  That's what\n    catches peoples' eyes.  The Windows(tm) windiff has another interesting\n    notion, pairing up elements that appear uniquely in each sequence.\n    That, and the method here, appear to yield more intuitive difference\n    reports than does diff.  This method appears to be the least vulnerable\n    to synching up on blocks of \"junk lines\", though (like blank lines in\n    ordinary text files, or maybe \"<P>\" lines in HTML files).  That may be\n    because this is the only method of the 3 that has a *concept* of\n    \"junk\" <wink>.\n\n    Example, comparing two strings, and considering blanks to be \"junk\":\n\n    >>> s = SequenceMatcher(lambda x: x == \" \",\n    ...                     \"private Thread currentThread;\",\n    ...                     \"private volatile Thread currentThread;\")\n    >>>\n\n    .ratio() returns a float in [0, 1], measuring the \"similarity\" of the\n    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the\n    sequences are close matches:\n\n    >>> print(round(s.ra""tio(), 3))\n    0.866\n    >>>\n\n    If you're only interested in where the sequences match,\n    .get_matching_blocks() is handy:\n\n    >>> for block in s.get_matching_blocks():\n    ...     print(\"a[%d] and b[%d] match for %d elements\" % block)\n    a[0] and b[0] match for 8 elements\n    a[8] and b[17] match for 21 elements\n    a[29] and b[38] match for 0 elements\n\n    Note that the last tuple returned by .get_matching_blocks() is always a\n    dummy, (len(a), len(b), 0), and this is the only case in which the last\n    tuple element (number of elements matched) is 0.\n\n    If you want to know how to change the first sequence into the second,\n    use .get_opcodes():\n\n    >>> for opcode in s.get_opcodes():\n    ...     print(\"%6s a[%d:%d] b[%d:%d]\" % opcode)\n     equal a[0:8] b[0:8]\n    insert a[8:8] b[8:17]\n     equal a[8:29] b[17:38]\n\n    See the Differ class for a fancy human-friendly file differencer, which\n    uses SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n\n    See also function get_close_matches() in this module, which shows how\n    simple code building on SequenceMatcher can be used to do useful work.\n\n    Timing:  Basic R-O is cubic time worst case and quadratic time expected\n    case.  SequenceMatcher is quadratic time for the worst case and has\n    expected-case behavior dependent in a complicated way on how many\n    elements the sequences have in common; best case time is linear.\n\n    Methods:\n\n    __init__(isjunk=None, a='', b='')\n        Construct a SequenceMatcher.\n\n    set_seqs(a, b)\n        Set the two sequences to be compared.\n\n    set_seq1(a)\n        Set the first sequence to be compared.\n\n    set_seq2(b)\n        Set the second sequence to be compared.\n\n    find_longest_match(alo=0, ahi=None, blo=0, bhi=None)\n        Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n    get_matching_blocks()\n        R""eturn list of triples describing matching subsequences.\n\n    get_opcodes()\n        Return list of 5-tuples describing how to turn a into b.\n\n    ratio()\n        Return a measure of the sequences' similarity (float in [0,1]).\n\n    quick_ratio()\n        Return an upper bound on .ratio() relatively quickly.\n\n    real_quick_ratio()\n        Return an upper bound on ratio() very quickly.\n    "), /*tp_doc*/
  __pyx_tp_traverse_9cydifflib_SequenceMatcher, /*tp_traverse*/
  __pyx_tp_clear_9cydifflib_SequenceMatcher, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9cydifflib_SequenceMatcher, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9cydifflib_15SequenceMatcher_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib_SequenceMatcher, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *__pyx_freelist_9cydifflib___pyx_scope_struct__get_grouped_opcodes[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct__get_grouped_opcodes = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct__get_grouped_opcodes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct__get_grouped_opcodes > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct__get_grouped_opcodes[--__pyx_freecount_9cydifflib___pyx_scope_struct__get_grouped_opcodes];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct__get_grouped_opcodes(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_codes);
  Py_CLEAR(p->__pyx_v_group);
  Py_CLEAR(p->__pyx_v_i1);
  Py_CLEAR(p->__pyx_v_i2);
  Py_CLEAR(p->__pyx_v_j1);
  Py_CLEAR(p->__pyx_v_j2);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_v_nn);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tag);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct__get_grouped_opcodes < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct__get_grouped_opcodes[__pyx_freecount_9cydifflib___pyx_scope_struct__get_grouped_opcodes++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct__get_grouped_opcodes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes *)o;
  if (p->__pyx_v_codes) {
    e = (*v)(p->__pyx_v_codes, a); if (e) return e;
  }
  if (p->__pyx_v_group) {
    e = (*v)(p->__pyx_v_group, a); if (e) return e;
  }
  if (p->__pyx_v_i1) {
    e = (*v)(p->__pyx_v_i1, a); if (e) return e;
  }
  if (p->__pyx_v_i2) {
    e = (*v)(p->__pyx_v_i2, a); if (e) return e;
  }
  if (p->__pyx_v_j1) {
    e = (*v)(p->__pyx_v_j1, a); if (e) return e;
  }
  if (p->__pyx_v_j2) {
    e = (*v)(p->__pyx_v_j2, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_v_nn) {
    e = (*v)(p->__pyx_v_nn, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct__get_grouped_opcodes},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct__get_grouped_opcodes},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct__get_grouped_opcodes},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes_spec = {
  "cydifflib.__pyx_scope_struct__get_grouped_opcodes",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct__get_grouped_opcodes", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct__get_grouped_opcodes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct__get_grouped_opcodes, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct__get_grouped_opcodes, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct__get_grouped_opcodes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *__pyx_freelist_9cydifflib___pyx_scope_struct_1_ratio[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_1_ratio = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_1_ratio(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_1_ratio > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_1_ratio[--__pyx_freecount_9cydifflib___pyx_scope_struct_1_ratio];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_1_ratio(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_1_ratio < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_1_ratio[__pyx_freecount_9cydifflib___pyx_scope_struct_1_ratio++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_1_ratio(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9cydifflib___pyx_scope_struct_1_ratio(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_9cydifflib_SequenceMatcher *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_1_ratio_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_1_ratio},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_1_ratio},
  {Py_tp_clear, (void *)__pyx_tp_clear_9cydifflib___pyx_scope_struct_1_ratio},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_1_ratio},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_1_ratio_spec = {
  "cydifflib.__pyx_scope_struct_1_ratio",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_1_ratio_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_1_ratio = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_1_ratio", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_1_ratio), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_1_ratio, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_1_ratio, /*tp_traverse*/
  __pyx_tp_clear_9cydifflib___pyx_scope_struct_1_ratio, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_1_ratio, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *__pyx_freelist_9cydifflib___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_2_genexpr = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_2_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_2_genexpr[--__pyx_freecount_9cydifflib___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_triple);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_2_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_2_genexpr[__pyx_freecount_9cydifflib___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_triple) {
    e = (*v)(p->__pyx_v_triple, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_2_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_2_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_2_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_2_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_2_genexpr_spec = {
  "cydifflib.__pyx_scope_struct_2_genexpr",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_2_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *__pyx_freelist_9cydifflib___pyx_scope_struct_3__keep_original_ws[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_3__keep_original_ws = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_3__keep_original_ws(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_3__keep_original_ws > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_3__keep_original_ws[--__pyx_freecount_9cydifflib___pyx_scope_struct_3__keep_original_ws];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_3__keep_original_ws(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_tag_s);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_3__keep_original_ws < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_3__keep_original_ws[__pyx_freecount_9cydifflib___pyx_scope_struct_3__keep_original_ws++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_3__keep_original_ws(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *)o;
  if (p->__pyx_v_s) {
    e = (*v)(p->__pyx_v_s, a); if (e) return e;
  }
  if (p->__pyx_v_tag_s) {
    e = (*v)(p->__pyx_v_tag_s, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9cydifflib___pyx_scope_struct_3__keep_original_ws(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws *)o;
  tmp = ((PyObject*)p->__pyx_v_s);
  p->__pyx_v_s = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_tag_s);
  p->__pyx_v_tag_s = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_3__keep_original_ws},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_3__keep_original_ws},
  {Py_tp_clear, (void *)__pyx_tp_clear_9cydifflib___pyx_scope_struct_3__keep_original_ws},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_3__keep_original_ws},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws_spec = {
  "cydifflib.__pyx_scope_struct_3__keep_original_ws",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_3__keep_original_ws", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_3__keep_original_ws), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_3__keep_original_ws, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_3__keep_original_ws, /*tp_traverse*/
  __pyx_tp_clear_9cydifflib___pyx_scope_struct_3__keep_original_ws, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_3__keep_original_ws, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *__pyx_freelist_9cydifflib___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_4_genexpr[--__pyx_freecount_9cydifflib___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_c);
  Py_CLEAR(p->__pyx_v_tag_c);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_4_genexpr[__pyx_freecount_9cydifflib___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_c) {
    e = (*v)(p->__pyx_v_c, a); if (e) return e;
  }
  if (p->__pyx_v_tag_c) {
    e = (*v)(p->__pyx_v_tag_c, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_4_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_4_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_4_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_4_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_4_genexpr_spec = {
  "cydifflib.__pyx_scope_struct_4_genexpr",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_4_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *__pyx_freelist_9cydifflib___pyx_scope_struct_5_compare[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_5_compare = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_5_compare(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_5_compare > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_5_compare[--__pyx_freecount_9cydifflib___pyx_scope_struct_5_compare];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_5_compare(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_a);
  Py_CLEAR(p->__pyx_v_ahi);
  Py_CLEAR(p->__pyx_v_alo);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_v_bhi);
  Py_CLEAR(p->__pyx_v_blo);
  Py_CLEAR(p->__pyx_v_cruncher);
  Py_CLEAR(p->__pyx_v_g);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tag);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_5_compare < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_5_compare[__pyx_freecount_9cydifflib___pyx_scope_struct_5_compare++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_5_compare(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare *)o;
  if (p->__pyx_v_a) {
    e = (*v)(p->__pyx_v_a, a); if (e) return e;
  }
  if (p->__pyx_v_ahi) {
    e = (*v)(p->__pyx_v_ahi, a); if (e) return e;
  }
  if (p->__pyx_v_alo) {
    e = (*v)(p->__pyx_v_alo, a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_v_bhi) {
    e = (*v)(p->__pyx_v_bhi, a); if (e) return e;
  }
  if (p->__pyx_v_blo) {
    e = (*v)(p->__pyx_v_blo, a); if (e) return e;
  }
  if (p->__pyx_v_cruncher) {
    e = (*v)(((PyObject *)p->__pyx_v_cruncher), a); if (e) return e;
  }
  if (p->__pyx_v_g) {
    e = (*v)(p->__pyx_v_g, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_5_compare_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_5_compare},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_5_compare},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_5_compare},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_5_compare_spec = {
  "cydifflib.__pyx_scope_struct_5_compare",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_5_compare_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_5_compare = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_5_compare", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_5_compare), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_5_compare, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_5_compare, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_5_compare, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *__pyx_freelist_9cydifflib___pyx_scope_struct_6__dump[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_6__dump = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_6__dump(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_6__dump > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_6__dump[--__pyx_freecount_9cydifflib___pyx_scope_struct_6__dump];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_6__dump(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_hi);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_v_lo);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tag);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_6__dump < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_6__dump[__pyx_freecount_9cydifflib___pyx_scope_struct_6__dump++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_6__dump(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump *)o;
  if (p->__pyx_v_hi) {
    e = (*v)(p->__pyx_v_hi, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_v_lo) {
    e = (*v)(p->__pyx_v_lo, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_6__dump_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_6__dump},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_6__dump},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_6__dump},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_6__dump_spec = {
  "cydifflib.__pyx_scope_struct_6__dump",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_6__dump_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_6__dump = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_6__dump", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_6__dump), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_6__dump, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_6__dump, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_6__dump, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *__pyx_freelist_9cydifflib___pyx_scope_struct_7__plain_replace[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_7__plain_replace = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_7__plain_replace(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_7__plain_replace > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_7__plain_replace[--__pyx_freecount_9cydifflib___pyx_scope_struct_7__plain_replace];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_7__plain_replace(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_a);
  Py_CLEAR(p->__pyx_v_ahi);
  Py_CLEAR(p->__pyx_v_alo);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_v_bhi);
  Py_CLEAR(p->__pyx_v_blo);
  Py_CLEAR(p->__pyx_v_first);
  Py_CLEAR(p->__pyx_v_g);
  Py_CLEAR(p->__pyx_v_second);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_7__plain_replace < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_7__plain_replace[__pyx_freecount_9cydifflib___pyx_scope_struct_7__plain_replace++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_7__plain_replace(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace *)o;
  if (p->__pyx_v_a) {
    e = (*v)(p->__pyx_v_a, a); if (e) return e;
  }
  if (p->__pyx_v_ahi) {
    e = (*v)(p->__pyx_v_ahi, a); if (e) return e;
  }
  if (p->__pyx_v_alo) {
    e = (*v)(p->__pyx_v_alo, a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_v_bhi) {
    e = (*v)(p->__pyx_v_bhi, a); if (e) return e;
  }
  if (p->__pyx_v_blo) {
    e = (*v)(p->__pyx_v_blo, a); if (e) return e;
  }
  if (p->__pyx_v_first) {
    e = (*v)(p->__pyx_v_first, a); if (e) return e;
  }
  if (p->__pyx_v_g) {
    e = (*v)(p->__pyx_v_g, a); if (e) return e;
  }
  if (p->__pyx_v_second) {
    e = (*v)(p->__pyx_v_second, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_7__plain_replace},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_7__plain_replace},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_7__plain_replace},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace_spec = {
  "cydifflib.__pyx_scope_struct_7__plain_replace",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_7__plain_replace", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_7__plain_replace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_7__plain_replace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_7__plain_replace, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_7__plain_replace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *__pyx_freelist_9cydifflib___pyx_scope_struct_8__fancy_replace[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_8__fancy_replace = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_8__fancy_replace(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_8__fancy_replace > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_8__fancy_replace[--__pyx_freecount_9cydifflib___pyx_scope_struct_8__fancy_replace];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_8__fancy_replace(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_a);
  Py_CLEAR(p->__pyx_v_aelt);
  Py_CLEAR(p->__pyx_v_ahi);
  Py_CLEAR(p->__pyx_v_ai);
  Py_CLEAR(p->__pyx_v_ai1);
  Py_CLEAR(p->__pyx_v_ai2);
  Py_CLEAR(p->__pyx_v_alo);
  Py_CLEAR(p->__pyx_v_atags);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_v_belt);
  Py_CLEAR(p->__pyx_v_best_i);
  Py_CLEAR(p->__pyx_v_best_j);
  Py_CLEAR(p->__pyx_v_best_ratio);
  Py_CLEAR(p->__pyx_v_bhi);
  Py_CLEAR(p->__pyx_v_bj);
  Py_CLEAR(p->__pyx_v_bj1);
  Py_CLEAR(p->__pyx_v_bj2);
  Py_CLEAR(p->__pyx_v_blo);
  Py_CLEAR(p->__pyx_v_btags);
  Py_CLEAR(p->__pyx_v_cruncher);
  Py_CLEAR(p->__pyx_v_eqi);
  Py_CLEAR(p->__pyx_v_eqj);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_v_j);
  Py_CLEAR(p->__pyx_v_la);
  Py_CLEAR(p->__pyx_v_lb);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tag);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_8__fancy_replace < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_8__fancy_replace[__pyx_freecount_9cydifflib___pyx_scope_struct_8__fancy_replace++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_8__fancy_replace(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace *)o;
  if (p->__pyx_v_a) {
    e = (*v)(p->__pyx_v_a, a); if (e) return e;
  }
  if (p->__pyx_v_aelt) {
    e = (*v)(p->__pyx_v_aelt, a); if (e) return e;
  }
  if (p->__pyx_v_ahi) {
    e = (*v)(p->__pyx_v_ahi, a); if (e) return e;
  }
  if (p->__pyx_v_ai) {
    e = (*v)(p->__pyx_v_ai, a); if (e) return e;
  }
  if (p->__pyx_v_ai1) {
    e = (*v)(p->__pyx_v_ai1, a); if (e) return e;
  }
  if (p->__pyx_v_ai2) {
    e = (*v)(p->__pyx_v_ai2, a); if (e) return e;
  }
  if (p->__pyx_v_alo) {
    e = (*v)(p->__pyx_v_alo, a); if (e) return e;
  }
  if (p->__pyx_v_atags) {
    e = (*v)(p->__pyx_v_atags, a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_v_belt) {
    e = (*v)(p->__pyx_v_belt, a); if (e) return e;
  }
  if (p->__pyx_v_best_i) {
    e = (*v)(p->__pyx_v_best_i, a); if (e) return e;
  }
  if (p->__pyx_v_best_j) {
    e = (*v)(p->__pyx_v_best_j, a); if (e) return e;
  }
  if (p->__pyx_v_best_ratio) {
    e = (*v)(p->__pyx_v_best_ratio, a); if (e) return e;
  }
  if (p->__pyx_v_bhi) {
    e = (*v)(p->__pyx_v_bhi, a); if (e) return e;
  }
  if (p->__pyx_v_bj) {
    e = (*v)(p->__pyx_v_bj, a); if (e) return e;
  }
  if (p->__pyx_v_bj1) {
    e = (*v)(p->__pyx_v_bj1, a); if (e) return e;
  }
  if (p->__pyx_v_bj2) {
    e = (*v)(p->__pyx_v_bj2, a); if (e) return e;
  }
  if (p->__pyx_v_blo) {
    e = (*v)(p->__pyx_v_blo, a); if (e) return e;
  }
  if (p->__pyx_v_btags) {
    e = (*v)(p->__pyx_v_btags, a); if (e) return e;
  }
  if (p->__pyx_v_cruncher) {
    e = (*v)(((PyObject *)p->__pyx_v_cruncher), a); if (e) return e;
  }
  if (p->__pyx_v_eqi) {
    e = (*v)(p->__pyx_v_eqi, a); if (e) return e;
  }
  if (p->__pyx_v_eqj) {
    e = (*v)(p->__pyx_v_eqj, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_v_j) {
    e = (*v)(p->__pyx_v_j, a); if (e) return e;
  }
  if (p->__pyx_v_la) {
    e = (*v)(p->__pyx_v_la, a); if (e) return e;
  }
  if (p->__pyx_v_lb) {
    e = (*v)(p->__pyx_v_lb, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_8__fancy_replace},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_8__fancy_replace},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_8__fancy_replace},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace_spec = {
  "cydifflib.__pyx_scope_struct_8__fancy_replace",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_8__fancy_replace", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_8__fancy_replace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_8__fancy_replace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_8__fancy_replace, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_8__fancy_replace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *__pyx_freelist_9cydifflib___pyx_scope_struct_9__fancy_helper[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_9__fancy_helper = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_9__fancy_helper(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_9__fancy_helper > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_9__fancy_helper[--__pyx_freecount_9cydifflib___pyx_scope_struct_9__fancy_helper];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_9__fancy_helper(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_a);
  Py_CLEAR(p->__pyx_v_ahi);
  Py_CLEAR(p->__pyx_v_alo);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_v_bhi);
  Py_CLEAR(p->__pyx_v_blo);
  Py_CLEAR(p->__pyx_v_g);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_9__fancy_helper < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_9__fancy_helper[__pyx_freecount_9cydifflib___pyx_scope_struct_9__fancy_helper++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_9__fancy_helper(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper *)o;
  if (p->__pyx_v_a) {
    e = (*v)(p->__pyx_v_a, a); if (e) return e;
  }
  if (p->__pyx_v_ahi) {
    e = (*v)(p->__pyx_v_ahi, a); if (e) return e;
  }
  if (p->__pyx_v_alo) {
    e = (*v)(p->__pyx_v_alo, a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_v_bhi) {
    e = (*v)(p->__pyx_v_bhi, a); if (e) return e;
  }
  if (p->__pyx_v_blo) {
    e = (*v)(p->__pyx_v_blo, a); if (e) return e;
  }
  if (p->__pyx_v_g) {
    e = (*v)(p->__pyx_v_g, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_9__fancy_helper},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_9__fancy_helper},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_9__fancy_helper},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper_spec = {
  "cydifflib.__pyx_scope_struct_9__fancy_helper",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_9__fancy_helper", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_9__fancy_helper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_9__fancy_helper, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_9__fancy_helper, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_9__fancy_helper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *__pyx_freelist_9cydifflib___pyx_scope_struct_10__qformat[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_10__qformat = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_10__qformat(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_10__qformat > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_10__qformat[--__pyx_freecount_9cydifflib___pyx_scope_struct_10__qformat];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_10__qformat(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_aline);
  Py_CLEAR(p->__pyx_v_atags);
  Py_CLEAR(p->__pyx_v_bline);
  Py_CLEAR(p->__pyx_v_btags);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_10__qformat < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_10__qformat[__pyx_freecount_9cydifflib___pyx_scope_struct_10__qformat++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_10__qformat(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat *)o;
  if (p->__pyx_v_aline) {
    e = (*v)(p->__pyx_v_aline, a); if (e) return e;
  }
  if (p->__pyx_v_atags) {
    e = (*v)(p->__pyx_v_atags, a); if (e) return e;
  }
  if (p->__pyx_v_bline) {
    e = (*v)(p->__pyx_v_bline, a); if (e) return e;
  }
  if (p->__pyx_v_btags) {
    e = (*v)(p->__pyx_v_btags, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_10__qformat_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_10__qformat},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_10__qformat},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_10__qformat},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_10__qformat_spec = {
  "cydifflib.__pyx_scope_struct_10__qformat",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_10__qformat_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_10__qformat = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_10__qformat", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_10__qformat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_10__qformat, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_10__qformat, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_10__qformat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *__pyx_freelist_9cydifflib___pyx_scope_struct_11_unified_diff[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_11_unified_diff = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_11_unified_diff(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_11_unified_diff > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_11_unified_diff[--__pyx_freecount_9cydifflib___pyx_scope_struct_11_unified_diff];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_11_unified_diff(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_a);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_v_file1_range);
  Py_CLEAR(p->__pyx_v_file2_range);
  Py_CLEAR(p->__pyx_v_first);
  Py_CLEAR(p->__pyx_v_fromdate);
  Py_CLEAR(p->__pyx_v_fromfile);
  Py_CLEAR(p->__pyx_v_fromfiledate);
  Py_CLEAR(p->__pyx_v_group);
  Py_CLEAR(p->__pyx_v_i1);
  Py_CLEAR(p->__pyx_v_i2);
  Py_CLEAR(p->__pyx_v_j1);
  Py_CLEAR(p->__pyx_v_j2);
  Py_CLEAR(p->__pyx_v_last);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_lineterm);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_v_tag);
  Py_CLEAR(p->__pyx_v_todate);
  Py_CLEAR(p->__pyx_v_tofile);
  Py_CLEAR(p->__pyx_v_tofiledate);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_6);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_11_unified_diff < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_11_unified_diff[__pyx_freecount_9cydifflib___pyx_scope_struct_11_unified_diff++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_11_unified_diff(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff *)o;
  if (p->__pyx_v_a) {
    e = (*v)(p->__pyx_v_a, a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_v_file1_range) {
    e = (*v)(p->__pyx_v_file1_range, a); if (e) return e;
  }
  if (p->__pyx_v_file2_range) {
    e = (*v)(p->__pyx_v_file2_range, a); if (e) return e;
  }
  if (p->__pyx_v_first) {
    e = (*v)(p->__pyx_v_first, a); if (e) return e;
  }
  if (p->__pyx_v_fromdate) {
    e = (*v)(p->__pyx_v_fromdate, a); if (e) return e;
  }
  if (p->__pyx_v_fromfile) {
    e = (*v)(p->__pyx_v_fromfile, a); if (e) return e;
  }
  if (p->__pyx_v_fromfiledate) {
    e = (*v)(p->__pyx_v_fromfiledate, a); if (e) return e;
  }
  if (p->__pyx_v_group) {
    e = (*v)(p->__pyx_v_group, a); if (e) return e;
  }
  if (p->__pyx_v_i1) {
    e = (*v)(p->__pyx_v_i1, a); if (e) return e;
  }
  if (p->__pyx_v_i2) {
    e = (*v)(p->__pyx_v_i2, a); if (e) return e;
  }
  if (p->__pyx_v_j1) {
    e = (*v)(p->__pyx_v_j1, a); if (e) return e;
  }
  if (p->__pyx_v_j2) {
    e = (*v)(p->__pyx_v_j2, a); if (e) return e;
  }
  if (p->__pyx_v_last) {
    e = (*v)(p->__pyx_v_last, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_lineterm) {
    e = (*v)(p->__pyx_v_lineterm, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  if (p->__pyx_v_todate) {
    e = (*v)(p->__pyx_v_todate, a); if (e) return e;
  }
  if (p->__pyx_v_tofile) {
    e = (*v)(p->__pyx_v_tofile, a); if (e) return e;
  }
  if (p->__pyx_v_tofiledate) {
    e = (*v)(p->__pyx_v_tofiledate, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_11_unified_diff},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_11_unified_diff},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_11_unified_diff},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff_spec = {
  "cydifflib.__pyx_scope_struct_11_unified_diff",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_11_unified_diff", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_11_unified_diff), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_11_unified_diff, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_11_unified_diff, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_11_unified_diff, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *__pyx_freelist_9cydifflib___pyx_scope_struct_12_context_diff[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_12_context_diff = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_12_context_diff(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_12_context_diff > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_12_context_diff[--__pyx_freecount_9cydifflib___pyx_scope_struct_12_context_diff];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_12_context_diff(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_a);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_v_file1_range);
  Py_CLEAR(p->__pyx_v_file2_range);
  Py_CLEAR(p->__pyx_v_first);
  Py_CLEAR(p->__pyx_v_fromdate);
  Py_CLEAR(p->__pyx_v_fromfile);
  Py_CLEAR(p->__pyx_v_fromfiledate);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_v_group);
  Py_CLEAR(p->__pyx_v_i1);
  Py_CLEAR(p->__pyx_v_i2);
  Py_CLEAR(p->__pyx_v_j1);
  Py_CLEAR(p->__pyx_v_j2);
  Py_CLEAR(p->__pyx_v_last);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_lineterm);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_v_prefix);
  Py_CLEAR(p->__pyx_v_tag);
  Py_CLEAR(p->__pyx_v_todate);
  Py_CLEAR(p->__pyx_v_tofile);
  Py_CLEAR(p->__pyx_v_tofiledate);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_6);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_12_context_diff < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_12_context_diff[__pyx_freecount_9cydifflib___pyx_scope_struct_12_context_diff++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_12_context_diff(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff *)o;
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_a) {
    e = (*v)(p->__pyx_v_a, a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_v_file1_range) {
    e = (*v)(p->__pyx_v_file1_range, a); if (e) return e;
  }
  if (p->__pyx_v_file2_range) {
    e = (*v)(p->__pyx_v_file2_range, a); if (e) return e;
  }
  if (p->__pyx_v_first) {
    e = (*v)(p->__pyx_v_first, a); if (e) return e;
  }
  if (p->__pyx_v_fromdate) {
    e = (*v)(p->__pyx_v_fromdate, a); if (e) return e;
  }
  if (p->__pyx_v_fromfile) {
    e = (*v)(p->__pyx_v_fromfile, a); if (e) return e;
  }
  if (p->__pyx_v_fromfiledate) {
    e = (*v)(p->__pyx_v_fromfiledate, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_v_group) {
    e = (*v)(p->__pyx_v_group, a); if (e) return e;
  }
  if (p->__pyx_v_i1) {
    e = (*v)(p->__pyx_v_i1, a); if (e) return e;
  }
  if (p->__pyx_v_i2) {
    e = (*v)(p->__pyx_v_i2, a); if (e) return e;
  }
  if (p->__pyx_v_j1) {
    e = (*v)(p->__pyx_v_j1, a); if (e) return e;
  }
  if (p->__pyx_v_j2) {
    e = (*v)(p->__pyx_v_j2, a); if (e) return e;
  }
  if (p->__pyx_v_last) {
    e = (*v)(p->__pyx_v_last, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_lineterm) {
    e = (*v)(p->__pyx_v_lineterm, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_v_prefix) {
    e = (*v)(p->__pyx_v_prefix, a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  if (p->__pyx_v_todate) {
    e = (*v)(p->__pyx_v_todate, a); if (e) return e;
  }
  if (p->__pyx_v_tofile) {
    e = (*v)(p->__pyx_v_tofile, a); if (e) return e;
  }
  if (p->__pyx_v_tofiledate) {
    e = (*v)(p->__pyx_v_tofiledate, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_12_context_diff_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_12_context_diff},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_12_context_diff},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_12_context_diff},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_12_context_diff_spec = {
  "cydifflib.__pyx_scope_struct_12_context_diff",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_12_context_diff_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_12_context_diff = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_12_context_diff", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_12_context_diff), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_12_context_diff, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_12_context_diff, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_12_context_diff, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *__pyx_freelist_9cydifflib___pyx_scope_struct_13_genexpr[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_13_genexpr = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_13_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_13_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_13_genexpr[--__pyx_freecount_9cydifflib___pyx_scope_struct_13_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_13_genexpr(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_tag);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_13_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_13_genexpr[__pyx_freecount_9cydifflib___pyx_scope_struct_13_genexpr++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_13_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_13_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_13_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_13_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_13_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_13_genexpr_spec = {
  "cydifflib.__pyx_scope_struct_13_genexpr",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_13_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_13_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_13_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_13_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_13_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_13_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_13_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *__pyx_freelist_9cydifflib___pyx_scope_struct_14_genexpr[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_14_genexpr = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_14_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_14_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_14_genexpr[--__pyx_freecount_9cydifflib___pyx_scope_struct_14_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_14_genexpr(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_tag);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_14_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_14_genexpr[__pyx_freecount_9cydifflib___pyx_scope_struct_14_genexpr++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_14_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_14_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_14_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_14_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_14_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_14_genexpr_spec = {
  "cydifflib.__pyx_scope_struct_14_genexpr",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_14_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_14_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_14_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_14_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_14_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_14_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_14_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *__pyx_freelist_9cydifflib___pyx_scope_struct_15_diff_bytes[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_15_diff_bytes = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_15_diff_bytes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_15_diff_bytes > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_15_diff_bytes[--__pyx_freecount_9cydifflib___pyx_scope_struct_15_diff_bytes];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_15_diff_bytes(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_a);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_v_decode);
  Py_CLEAR(p->__pyx_v_dfunc);
  Py_CLEAR(p->__pyx_v_fromfile);
  Py_CLEAR(p->__pyx_v_fromfiledate);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_lines);
  Py_CLEAR(p->__pyx_v_lineterm);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_v_tofile);
  Py_CLEAR(p->__pyx_v_tofiledate);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_15_diff_bytes < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_15_diff_bytes[__pyx_freecount_9cydifflib___pyx_scope_struct_15_diff_bytes++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_15_diff_bytes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes *)o;
  if (p->__pyx_v_a) {
    e = (*v)(p->__pyx_v_a, a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_v_decode) {
    e = (*v)(p->__pyx_v_decode, a); if (e) return e;
  }
  if (p->__pyx_v_dfunc) {
    e = (*v)(p->__pyx_v_dfunc, a); if (e) return e;
  }
  if (p->__pyx_v_fromfile) {
    e = (*v)(p->__pyx_v_fromfile, a); if (e) return e;
  }
  if (p->__pyx_v_fromfiledate) {
    e = (*v)(p->__pyx_v_fromfiledate, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_lines) {
    e = (*v)(p->__pyx_v_lines, a); if (e) return e;
  }
  if (p->__pyx_v_lineterm) {
    e = (*v)(p->__pyx_v_lineterm, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_v_tofile) {
    e = (*v)(p->__pyx_v_tofile, a); if (e) return e;
  }
  if (p->__pyx_v_tofiledate) {
    e = (*v)(p->__pyx_v_tofiledate, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_15_diff_bytes},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_15_diff_bytes},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_15_diff_bytes},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes_spec = {
  "cydifflib.__pyx_scope_struct_15_diff_bytes",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_15_diff_bytes", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_15_diff_bytes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_15_diff_bytes, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_15_diff_bytes, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_15_diff_bytes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *__pyx_freelist_9cydifflib___pyx_scope_struct_16__mdiff[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_16__mdiff = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_16__mdiff(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_16__mdiff > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_16__mdiff[--__pyx_freecount_9cydifflib___pyx_scope_struct_16__mdiff];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_16__mdiff(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v__line_iterator);
  Py_CLEAR(p->__pyx_v__line_pair_iterator);
  Py_CLEAR(p->__pyx_v__make_line);
  Py_CLEAR(p->__pyx_v_change_re);
  Py_CLEAR(p->__pyx_v_charjunk);
  Py_CLEAR(p->__pyx_v_context);
  Py_CLEAR(p->__pyx_v_contextLines);
  Py_CLEAR(p->__pyx_v_diff_lines_iterator);
  Py_CLEAR(p->__pyx_v_found_diff);
  Py_CLEAR(p->__pyx_v_from_line);
  Py_CLEAR(p->__pyx_v_fromlines);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_v_index);
  Py_CLEAR(p->__pyx_v_line_pair_iterator);
  Py_CLEAR(p->__pyx_v_linejunk);
  Py_CLEAR(p->__pyx_v_lines_to_write);
  Py_CLEAR(p->__pyx_v_re);
  Py_CLEAR(p->__pyx_v_to_line);
  Py_CLEAR(p->__pyx_v_tolines);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_16__mdiff < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_16__mdiff[__pyx_freecount_9cydifflib___pyx_scope_struct_16__mdiff++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_16__mdiff(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff *)o;
  if (p->__pyx_v__line_iterator) {
    e = (*v)(p->__pyx_v__line_iterator, a); if (e) return e;
  }
  if (p->__pyx_v__line_pair_iterator) {
    e = (*v)(p->__pyx_v__line_pair_iterator, a); if (e) return e;
  }
  if (p->__pyx_v__make_line) {
    e = (*v)(p->__pyx_v__make_line, a); if (e) return e;
  }
  if (p->__pyx_v_change_re) {
    e = (*v)(p->__pyx_v_change_re, a); if (e) return e;
  }
  if (p->__pyx_v_charjunk) {
    e = (*v)(p->__pyx_v_charjunk, a); if (e) return e;
  }
  if (p->__pyx_v_context) {
    e = (*v)(p->__pyx_v_context, a); if (e) return e;
  }
  if (p->__pyx_v_contextLines) {
    e = (*v)(p->__pyx_v_contextLines, a); if (e) return e;
  }
  if (p->__pyx_v_diff_lines_iterator) {
    e = (*v)(p->__pyx_v_diff_lines_iterator, a); if (e) return e;
  }
  if (p->__pyx_v_found_diff) {
    e = (*v)(p->__pyx_v_found_diff, a); if (e) return e;
  }
  if (p->__pyx_v_from_line) {
    e = (*v)(p->__pyx_v_from_line, a); if (e) return e;
  }
  if (p->__pyx_v_fromlines) {
    e = (*v)(p->__pyx_v_fromlines, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_v_index) {
    e = (*v)(p->__pyx_v_index, a); if (e) return e;
  }
  if (p->__pyx_v_line_pair_iterator) {
    e = (*v)(p->__pyx_v_line_pair_iterator, a); if (e) return e;
  }
  if (p->__pyx_v_linejunk) {
    e = (*v)(p->__pyx_v_linejunk, a); if (e) return e;
  }
  if (p->__pyx_v_lines_to_write) {
    e = (*v)(p->__pyx_v_lines_to_write, a); if (e) return e;
  }
  if (p->__pyx_v_re) {
    e = (*v)(p->__pyx_v_re, a); if (e) return e;
  }
  if (p->__pyx_v_to_line) {
    e = (*v)(p->__pyx_v_to_line, a); if (e) return e;
  }
  if (p->__pyx_v_tolines) {
    e = (*v)(p->__pyx_v_tolines, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_16__mdiff_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_16__mdiff},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_16__mdiff},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_16__mdiff},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_16__mdiff_spec = {
  "cydifflib.__pyx_scope_struct_16__mdiff",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_16__mdiff_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_16__mdiff = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_16__mdiff", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_16__mdiff), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_16__mdiff, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_16__mdiff, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_16__mdiff, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *__pyx_freelist_9cydifflib___pyx_scope_struct_17__line_iterator[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_17__line_iterator = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_17__line_iterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_17__line_iterator > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_17__line_iterator[--__pyx_freecount_9cydifflib___pyx_scope_struct_17__line_iterator];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_17__line_iterator(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_from_line);
  Py_CLEAR(p->__pyx_8genexpr5__pyx_v_line);
  Py_CLEAR(p->__pyx_v_lines);
  Py_CLEAR(p->__pyx_v_num_blanks_pending);
  Py_CLEAR(p->__pyx_v_num_blanks_to_yield);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_to_line);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_17__line_iterator < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_17__line_iterator[__pyx_freecount_9cydifflib___pyx_scope_struct_17__line_iterator++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_17__line_iterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_from_line) {
    e = (*v)(p->__pyx_v_from_line, a); if (e) return e;
  }
  if (p->__pyx_8genexpr5__pyx_v_line) {
    e = (*v)(p->__pyx_8genexpr5__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_lines) {
    e = (*v)(p->__pyx_v_lines, a); if (e) return e;
  }
  if (p->__pyx_v_num_blanks_pending) {
    e = (*v)(p->__pyx_v_num_blanks_pending, a); if (e) return e;
  }
  if (p->__pyx_v_num_blanks_to_yield) {
    e = (*v)(p->__pyx_v_num_blanks_to_yield, a); if (e) return e;
  }
  if (p->__pyx_v_to_line) {
    e = (*v)(p->__pyx_v_to_line, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_17__line_iterator},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_17__line_iterator},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_17__line_iterator},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator_spec = {
  "cydifflib.__pyx_scope_struct_17__line_iterator",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_17__line_iterator", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_17__line_iterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_17__line_iterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_17__line_iterator, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_17__line_iterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *__pyx_freelist_9cydifflib___pyx_scope_struct_18__line_pair_iterator[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_18__line_pair_iterator = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_18__line_pair_iterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_18__line_pair_iterator > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_18__line_pair_iterator[--__pyx_freecount_9cydifflib___pyx_scope_struct_18__line_pair_iterator];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_18__line_pair_iterator(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_found_diff);
  Py_CLEAR(p->__pyx_v_fromDiff);
  Py_CLEAR(p->__pyx_v_from_line);
  Py_CLEAR(p->__pyx_v_fromlines);
  Py_CLEAR(p->__pyx_v_line_iterator);
  Py_CLEAR(p->__pyx_v_to_diff);
  Py_CLEAR(p->__pyx_v_to_line);
  Py_CLEAR(p->__pyx_v_tolines);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_18__line_pair_iterator < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_18__line_pair_iterator[__pyx_freecount_9cydifflib___pyx_scope_struct_18__line_pair_iterator++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_18__line_pair_iterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_found_diff) {
    e = (*v)(p->__pyx_v_found_diff, a); if (e) return e;
  }
  if (p->__pyx_v_fromDiff) {
    e = (*v)(p->__pyx_v_fromDiff, a); if (e) return e;
  }
  if (p->__pyx_v_from_line) {
    e = (*v)(p->__pyx_v_from_line, a); if (e) return e;
  }
  if (p->__pyx_v_fromlines) {
    e = (*v)(p->__pyx_v_fromlines, a); if (e) return e;
  }
  if (p->__pyx_v_line_iterator) {
    e = (*v)(p->__pyx_v_line_iterator, a); if (e) return e;
  }
  if (p->__pyx_v_to_diff) {
    e = (*v)(p->__pyx_v_to_diff, a); if (e) return e;
  }
  if (p->__pyx_v_to_line) {
    e = (*v)(p->__pyx_v_to_line, a); if (e) return e;
  }
  if (p->__pyx_v_tolines) {
    e = (*v)(p->__pyx_v_tolines, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_18__line_pair_iterator},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_18__line_pair_iterator},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_18__line_pair_iterator},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator_spec = {
  "cydifflib.__pyx_scope_struct_18__line_pair_iterator",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_18__line_pair_iterator", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_18__line_pair_iterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_18__line_pair_iterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_18__line_pair_iterator, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_18__line_pair_iterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *__pyx_freelist_9cydifflib___pyx_scope_struct_19__tab_newline_replace[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_19__tab_newline_replace = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_19__tab_newline_replace(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_19__tab_newline_replace > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_19__tab_newline_replace[--__pyx_freecount_9cydifflib___pyx_scope_struct_19__tab_newline_replace];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_19__tab_newline_replace(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_19__tab_newline_replace < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_19__tab_newline_replace[__pyx_freecount_9cydifflib___pyx_scope_struct_19__tab_newline_replace++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_19__tab_newline_replace(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9cydifflib___pyx_scope_struct_19__tab_newline_replace(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_19__tab_newline_replace},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_19__tab_newline_replace},
  {Py_tp_clear, (void *)__pyx_tp_clear_9cydifflib___pyx_scope_struct_19__tab_newline_replace},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_19__tab_newline_replace},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace_spec = {
  "cydifflib.__pyx_scope_struct_19__tab_newline_replace",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_19__tab_newline_replace", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_19__tab_newline_replace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_19__tab_newline_replace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_19__tab_newline_replace, /*tp_traverse*/
  __pyx_tp_clear_9cydifflib___pyx_scope_struct_19__tab_newline_replace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_19__tab_newline_replace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *__pyx_freelist_9cydifflib___pyx_scope_struct_20__line_wrapper[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_20__line_wrapper = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_20__line_wrapper(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_20__line_wrapper > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_20__line_wrapper[--__pyx_freecount_9cydifflib___pyx_scope_struct_20__line_wrapper];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_20__line_wrapper(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_diffs);
  Py_CLEAR(p->__pyx_v_flag);
  Py_CLEAR(p->__pyx_v_fromdata);
  Py_CLEAR(p->__pyx_v_fromline);
  Py_CLEAR(p->__pyx_v_fromlist);
  Py_CLEAR(p->__pyx_v_fromtext);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_todata);
  Py_CLEAR(p->__pyx_v_toline);
  Py_CLEAR(p->__pyx_v_tolist);
  Py_CLEAR(p->__pyx_v_totext);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_20__line_wrapper < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_20__line_wrapper[__pyx_freecount_9cydifflib___pyx_scope_struct_20__line_wrapper++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_20__line_wrapper(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper *)o;
  if (p->__pyx_v_diffs) {
    e = (*v)(p->__pyx_v_diffs, a); if (e) return e;
  }
  if (p->__pyx_v_flag) {
    e = (*v)(p->__pyx_v_flag, a); if (e) return e;
  }
  if (p->__pyx_v_fromdata) {
    e = (*v)(p->__pyx_v_fromdata, a); if (e) return e;
  }
  if (p->__pyx_v_fromline) {
    e = (*v)(p->__pyx_v_fromline, a); if (e) return e;
  }
  if (p->__pyx_v_fromlist) {
    e = (*v)(p->__pyx_v_fromlist, a); if (e) return e;
  }
  if (p->__pyx_v_fromtext) {
    e = (*v)(p->__pyx_v_fromtext, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_v_todata) {
    e = (*v)(p->__pyx_v_todata, a); if (e) return e;
  }
  if (p->__pyx_v_toline) {
    e = (*v)(p->__pyx_v_toline, a); if (e) return e;
  }
  if (p->__pyx_v_tolist) {
    e = (*v)(p->__pyx_v_tolist, a); if (e) return e;
  }
  if (p->__pyx_v_totext) {
    e = (*v)(p->__pyx_v_totext, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_20__line_wrapper},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_20__line_wrapper},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_20__line_wrapper},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper_spec = {
  "cydifflib.__pyx_scope_struct_20__line_wrapper",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_20__line_wrapper", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_20__line_wrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_20__line_wrapper, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_20__line_wrapper, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_20__line_wrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *__pyx_freelist_9cydifflib___pyx_scope_struct_21_restore[8];
static int __pyx_freecount_9cydifflib___pyx_scope_struct_21_restore = 0;

static PyObject *__pyx_tp_new_9cydifflib___pyx_scope_struct_21_restore(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9cydifflib___pyx_scope_struct_21_restore > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore)))) {
    o = (PyObject*)__pyx_freelist_9cydifflib___pyx_scope_struct_21_restore[--__pyx_freecount_9cydifflib___pyx_scope_struct_21_restore];
    memset(o, 0, sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_21_restore(PyObject *o) {
  struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_delta);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_prefixes);
  Py_CLEAR(p->__pyx_v_tag);
  Py_CLEAR(p->__pyx_v_which);
  Py_CLEAR(p->__pyx_t_1);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9cydifflib___pyx_scope_struct_21_restore < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore)))) {
    __pyx_freelist_9cydifflib___pyx_scope_struct_21_restore[__pyx_freecount_9cydifflib___pyx_scope_struct_21_restore++] = ((struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9cydifflib___pyx_scope_struct_21_restore(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *p = (struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore *)o;
  if (p->__pyx_v_delta) {
    e = (*v)(p->__pyx_v_delta, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_prefixes) {
    e = (*v)(p->__pyx_v_prefixes, a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  if (p->__pyx_v_which) {
    e = (*v)(p->__pyx_v_which, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9cydifflib___pyx_scope_struct_21_restore_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9cydifflib___pyx_scope_struct_21_restore},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9cydifflib___pyx_scope_struct_21_restore},
  {Py_tp_new, (void *)__pyx_tp_new_9cydifflib___pyx_scope_struct_21_restore},
  {0, 0},
};
static PyType_Spec __pyx_type_9cydifflib___pyx_scope_struct_21_restore_spec = {
  "cydifflib.__pyx_scope_struct_21_restore",
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9cydifflib___pyx_scope_struct_21_restore_slots,
};
#else

static PyTypeObject __pyx_type_9cydifflib___pyx_scope_struct_21_restore = {
  PyVarObject_HEAD_INIT(0, 0)
  "cydifflib.""__pyx_scope_struct_21_restore", /*tp_name*/
  sizeof(struct __pyx_obj_9cydifflib___pyx_scope_struct_21_restore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9cydifflib___pyx_scope_struct_21_restore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9cydifflib___pyx_scope_struct_21_restore, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9cydifflib___pyx_scope_struct_21_restore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_USE_MODULE_STATE
  {0, __pyx_k_, sizeof(__pyx_k_), 0, 0, 0, 0},
  {0, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {0, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {0, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {0, __pyx_k_Compare_a_and_b_lists_of_string, sizeof(__pyx_k_Compare_a_and_b_lists_of_string), 0, 1, 0, 0},
  {0, __pyx_k_Compare_two_sequences_of_lines, sizeof(__pyx_k_Compare_two_sequences_of_lines), 0, 1, 0, 0},
  {0, __pyx_k_Compare_two_sequences_of_lines_2, sizeof(__pyx_k_Compare_two_sequences_of_lines_2), 0, 1, 0, 0},
  {0, __pyx_k_Compare_two_sequences_of_lines_3, sizeof(__pyx_k_Compare_two_sequences_of_lines_3), 0, 1, 0, 0},
  {0, __pyx_k_DOCTYPE_html_PUBLIC_W3C_DTD_XHT, sizeof(__pyx_k_DOCTYPE_html_PUBLIC_W3C_DTD_XHT), 0, 0, 1, 0},
  {0, __pyx_k_Differ, sizeof(__pyx_k_Differ), 0, 0, 1, 1},
  {0, __pyx_k_Differ___init, sizeof(__pyx_k_Differ___init), 0, 0, 1, 1},
  {0, __pyx_k_Differ__dump, sizeof(__pyx_k_Differ__dump), 0, 0, 1, 1},
  {0, __pyx_k_Differ__fancy_helper, sizeof(__pyx_k_Differ__fancy_helper), 0, 0, 1, 1},
  {0, __pyx_k_Differ__fancy_replace, sizeof(__pyx_k_Differ__fancy_replace), 0, 0, 1, 1},
  {0, __pyx_k_Differ__fancy_replace_line_1034, sizeof(__pyx_k_Differ__fancy_replace_line_1034), 0, 1, 0, 0},
  {0, __pyx_k_Differ__plain_replace, sizeof(__pyx_k_Differ__plain_replace), 0, 0, 1, 1},
  {0, __pyx_k_Differ__qformat, sizeof(__pyx_k_Differ__qformat), 0, 0, 1, 1},
  {0, __pyx_k_Differ__qformat_line_1140, sizeof(__pyx_k_Differ__qformat_line_1140), 0, 1, 0, 0},
  {0, __pyx_k_Differ_compare, sizeof(__pyx_k_Differ_compare), 0, 0, 1, 1},
  {0, __pyx_k_Differ_compare_line_974, sizeof(__pyx_k_Differ_compare_line_974), 0, 1, 0, 0},
  {0, __pyx_k_Differ_is_a_class_for_comparing, sizeof(__pyx_k_Differ_is_a_class_for_comparing), 0, 0, 1, 0},
  {0, __pyx_k_Find_longest_matching_block_in_a, sizeof(__pyx_k_Find_longest_matching_block_in_a), 0, 1, 0, 0},
  {0, __pyx_k_For_producing_HTML_side_by_side, sizeof(__pyx_k_For_producing_HTML_side_by_side), 0, 0, 1, 0},
  {0, __pyx_k_Format_output_and_deal_with_tab, sizeof(__pyx_k_Format_output_and_deal_with_tab), 0, 1, 0, 0},
  {0, __pyx_k_Generate_one_of_the_two_sequenc, sizeof(__pyx_k_Generate_one_of_the_two_sequenc), 0, 1, 0, 0},
  {0, __pyx_k_GenericAlias, sizeof(__pyx_k_GenericAlias), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff, sizeof(__pyx_k_HtmlDiff), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff___init, sizeof(__pyx_k_HtmlDiff___init), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff__collect_lines, sizeof(__pyx_k_HtmlDiff__collect_lines), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff__convert_flags, sizeof(__pyx_k_HtmlDiff__convert_flags), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff__format_line, sizeof(__pyx_k_HtmlDiff__format_line), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff__line_wrapper, sizeof(__pyx_k_HtmlDiff__line_wrapper), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff__make_prefix, sizeof(__pyx_k_HtmlDiff__make_prefix), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff__split_line, sizeof(__pyx_k_HtmlDiff__split_line), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff__tab_newline_replace, sizeof(__pyx_k_HtmlDiff__tab_newline_replace), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff__tab_newline_replace_lo, sizeof(__pyx_k_HtmlDiff__tab_newline_replace_lo), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff_make_file, sizeof(__pyx_k_HtmlDiff_make_file), 0, 0, 1, 1},
  {0, __pyx_k_HtmlDiff_make_table, sizeof(__pyx_k_HtmlDiff_make_table), 0, 0, 1, 1},
  {0, __pyx_k_IS_CHARACTER_JUNK, sizeof(__pyx_k_IS_CHARACTER_JUNK), 0, 0, 1, 1},
  {0, __pyx_k_IS_CHARACTER_JUNK_line_1202, sizeof(__pyx_k_IS_CHARACTER_JUNK_line_1202), 0, 1, 0, 0},
  {0, __pyx_k_IS_LINE_JUNK, sizeof(__pyx_k_IS_LINE_JUNK), 0, 0, 1, 1},
  {0, __pyx_k_IS_LINE_JUNK_line_1186, sizeof(__pyx_k_IS_LINE_JUNK_line_1186), 0, 1, 0, 0},
  {0, __pyx_k_Isolate_change_clusters_by_elim, sizeof(__pyx_k_Isolate_change_clusters_by_elim), 0, 1, 0, 0},
  {0, __pyx_k_Match, sizeof(__pyx_k_Match), 0, 0, 1, 1},
  {0, __pyx_k_Return_True_for_ignorable_chara, sizeof(__pyx_k_Return_True_for_ignorable_chara), 0, 1, 0, 0},
  {0, __pyx_k_Return_True_for_ignorable_line, sizeof(__pyx_k_Return_True_for_ignorable_line), 0, 1, 0, 0},
  {0, __pyx_k_Return_a_measure_of_the_sequence, sizeof(__pyx_k_Return_a_measure_of_the_sequence), 0, 1, 0, 0},
  {0, __pyx_k_Return_list_of_5_tuples_describi, sizeof(__pyx_k_Return_list_of_5_tuples_describi), 0, 1, 0, 0},
  {0, __pyx_k_Return_list_of_triples_describin, sizeof(__pyx_k_Return_list_of_triples_describin), 0, 1, 0, 0},
  {0, __pyx_k_SequenceMatcher, sizeof(__pyx_k_SequenceMatcher), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher___reduce_cython, sizeof(__pyx_k_SequenceMatcher___reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher___setstate_cytho, sizeof(__pyx_k_SequenceMatcher___setstate_cytho), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_find_longest_mat, sizeof(__pyx_k_SequenceMatcher_find_longest_mat), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_find_longest_mat_2, sizeof(__pyx_k_SequenceMatcher_find_longest_mat_2), 0, 1, 0, 0},
  {0, __pyx_k_SequenceMatcher_get_grouped_opco, sizeof(__pyx_k_SequenceMatcher_get_grouped_opco), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_get_grouped_opco_2, sizeof(__pyx_k_SequenceMatcher_get_grouped_opco_2), 0, 1, 0, 0},
  {0, __pyx_k_SequenceMatcher_get_matching_blo, sizeof(__pyx_k_SequenceMatcher_get_matching_blo), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_get_matching_blo_2, sizeof(__pyx_k_SequenceMatcher_get_matching_blo_2), 0, 1, 0, 0},
  {0, __pyx_k_SequenceMatcher_get_opcodes, sizeof(__pyx_k_SequenceMatcher_get_opcodes), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_get_opcodes_line, sizeof(__pyx_k_SequenceMatcher_get_opcodes_line), 0, 1, 0, 0},
  {0, __pyx_k_SequenceMatcher_quick_ratio, sizeof(__pyx_k_SequenceMatcher_quick_ratio), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_ratio, sizeof(__pyx_k_SequenceMatcher_ratio), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_ratio_line_730, sizeof(__pyx_k_SequenceMatcher_ratio_line_730), 0, 1, 0, 0},
  {0, __pyx_k_SequenceMatcher_real_quick_ratio, sizeof(__pyx_k_SequenceMatcher_real_quick_ratio), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_set_seq1, sizeof(__pyx_k_SequenceMatcher_set_seq1), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_set_seq1_line_28, sizeof(__pyx_k_SequenceMatcher_set_seq1_line_28), 0, 1, 0, 0},
  {0, __pyx_k_SequenceMatcher_set_seq2, sizeof(__pyx_k_SequenceMatcher_set_seq2), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_set_seq2_line_31, sizeof(__pyx_k_SequenceMatcher_set_seq2_line_31), 0, 1, 0, 0},
  {0, __pyx_k_SequenceMatcher_set_seqs, sizeof(__pyx_k_SequenceMatcher_set_seqs), 0, 0, 1, 1},
  {0, __pyx_k_SequenceMatcher_set_seqs_line_27, sizeof(__pyx_k_SequenceMatcher_set_seqs_line_27), 0, 1, 0, 0},
  {0, __pyx_k_Set_the_first_sequence_to_be_com, sizeof(__pyx_k_Set_the_first_sequence_to_be_com), 0, 1, 0, 0},
  {0, __pyx_k_Set_the_second_sequence_to_be_co, sizeof(__pyx_k_Set_the_second_sequence_to_be_co), 0, 1, 0, 0},
  {0, __pyx_k_Set_the_two_sequences_to_be_comp, sizeof(__pyx_k_Set_the_two_sequences_to_be_comp), 0, 1, 0, 0},
  {0, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_Use_SequenceMatcher_to_return_li, sizeof(__pyx_k_Use_SequenceMatcher_to_return_li), 0, 1, 0, 0},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k_When_replacing_one_block_of_lin, sizeof(__pyx_k_When_replacing_one_block_of_lin), 0, 1, 0, 0},
  {0, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {0, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
  {0, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 0},
  {0, __pyx_k__143, sizeof(__pyx_k__143), 0, 0, 1, 1},
  {0, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {0, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {0, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 0, 0},
  {0, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 0},
  {0, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {0, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {0, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {0, __pyx_k__20, sizeof(__pyx_k__20), 0, 0, 1, 0},
  {0, __pyx_k__21, sizeof(__pyx_k__21), 0, 0, 1, 0},
  {0, __pyx_k__23, sizeof(__pyx_k__23), 0, 0, 1, 0},
  {0, __pyx_k__24, sizeof(__pyx_k__24), 0, 0, 1, 0},
  {0, __pyx_k__25, sizeof(__pyx_k__25), 0, 0, 1, 0},
  {0, __pyx_k__26, sizeof(__pyx_k__26), 0, 0, 1, 0},
  {0, __pyx_k__28, sizeof(__pyx_k__28), 0, 0, 1, 0},
  {0, __pyx_k__29, sizeof(__pyx_k__29), 0, 0, 1, 0},
  {0, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 0},
  {0, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 0},
  {0, __pyx_k__32, sizeof(__pyx_k__32), 0, 0, 1, 0},
  {0, __pyx_k__39, sizeof(__pyx_k__39), 0, 0, 1, 0},
  {0, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {0, __pyx_k__42, sizeof(__pyx_k__42), 0, 0, 1, 0},
  {0, __pyx_k__43, sizeof(__pyx_k__43), 0, 0, 1, 0},
  {0, __pyx_k__44, sizeof(__pyx_k__44), 0, 0, 1, 0},
  {0, __pyx_k__45, sizeof(__pyx_k__45), 0, 0, 1, 0},
  {0, __pyx_k__46, sizeof(__pyx_k__46), 0, 0, 1, 0},
  {0, __pyx_k__47, sizeof(__pyx_k__47), 0, 0, 1, 0},
  {0, __pyx_k__49, sizeof(__pyx_k__49), 0, 0, 1, 0},
  {0, __pyx_k__50, sizeof(__pyx_k__50), 0, 0, 1, 0},
  {0, __pyx_k__51, sizeof(__pyx_k__51), 0, 0, 1, 0},
  {0, __pyx_k__52, sizeof(__pyx_k__52), 0, 0, 1, 0},
  {0, __pyx_k__57, sizeof(__pyx_k__57), 0, 0, 1, 1},
  {0, __pyx_k__58, sizeof(__pyx_k__58), 0, 0, 1, 0},
  {0, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
  {0, __pyx_k__67, sizeof(__pyx_k__67), 0, 0, 1, 0},
  {0, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
  {0, __pyx_k__72, sizeof(__pyx_k__72), 0, 0, 1, 0},
  {0, __pyx_k__75, sizeof(__pyx_k__75), 0, 0, 1, 0},
  {0, __pyx_k__78, sizeof(__pyx_k__78), 0, 0, 1, 0},
  {0, __pyx_k__81, sizeof(__pyx_k__81), 0, 0, 1, 0},
  {0, __pyx_k__83, sizeof(__pyx_k__83), 0, 0, 1, 0},
  {0, __pyx_k__85, sizeof(__pyx_k__85), 0, 0, 1, 0},
  {0, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {0, __pyx_k_a_b_size, sizeof(__pyx_k_a_b_size), 0, 0, 1, 0},
  {0, __pyx_k_a_href_difflib_chg__s_0_f_a, sizeof(__pyx_k_a_href_difflib_chg__s_0_f_a), 0, 0, 1, 0},
  {0, __pyx_k_a_href_difflib_chg__s__d_n_a, sizeof(__pyx_k_a_href_difflib_chg__s__d_n_a), 0, 0, 1, 0},
  {0, __pyx_k_a_href_difflib_chg__s_top_t_a, sizeof(__pyx_k_a_href_difflib_chg__s_top_t_a), 0, 0, 1, 0},
  {0, __pyx_k_aelt, sizeof(__pyx_k_aelt), 0, 0, 1, 1},
  {0, __pyx_k_ahi, sizeof(__pyx_k_ahi), 0, 0, 1, 1},
  {0, __pyx_k_ahi_2, sizeof(__pyx_k_ahi_2), 0, 0, 1, 1},
  {0, __pyx_k_ai, sizeof(__pyx_k_ai), 0, 0, 1, 1},
  {0, __pyx_k_ai1, sizeof(__pyx_k_ai1), 0, 0, 1, 1},
  {0, __pyx_k_ai2, sizeof(__pyx_k_ai2), 0, 0, 1, 1},
  {0, __pyx_k_aline, sizeof(__pyx_k_aline), 0, 0, 1, 1},
  {0, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {0, __pyx_k_all_arguments_must_be_bytes_not, sizeof(__pyx_k_all_arguments_must_be_bytes_not), 0, 0, 1, 0},
  {0, __pyx_k_all_arguments_must_be_str_not_r, sizeof(__pyx_k_all_arguments_must_be_str_not_r), 0, 0, 1, 0},
  {0, __pyx_k_alo, sizeof(__pyx_k_alo), 0, 0, 1, 1},
  {0, __pyx_k_amp, sizeof(__pyx_k_amp), 0, 0, 1, 0},
  {0, __pyx_k_answer, sizeof(__pyx_k_answer), 0, 0, 1, 1},
  {0, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {0, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {0, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {0, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_atags, sizeof(__pyx_k_atags), 0, 0, 1, 1},
  {0, __pyx_k_autojunk, sizeof(__pyx_k_autojunk), 0, 0, 1, 1},
  {0, __pyx_k_avail, sizeof(__pyx_k_avail), 0, 0, 1, 1},
  {0, __pyx_k_availhas, sizeof(__pyx_k_availhas), 0, 0, 1, 1},
  {0, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {0, __pyx_k_begin, sizeof(__pyx_k_begin), 0, 0, 1, 1},
  {0, __pyx_k_beginning, sizeof(__pyx_k_beginning), 0, 0, 1, 1},
  {0, __pyx_k_belt, sizeof(__pyx_k_belt), 0, 0, 1, 1},
  {0, __pyx_k_best_i, sizeof(__pyx_k_best_i), 0, 0, 1, 1},
  {0, __pyx_k_best_j, sizeof(__pyx_k_best_j), 0, 0, 1, 1},
  {0, __pyx_k_best_ratio, sizeof(__pyx_k_best_ratio), 0, 0, 1, 1},
  {0, __pyx_k_bhi, sizeof(__pyx_k_bhi), 0, 0, 1, 1},
  {0, __pyx_k_bhi_2, sizeof(__pyx_k_bhi_2), 0, 0, 1, 1},
  {0, __pyx_k_bj, sizeof(__pyx_k_bj), 0, 0, 1, 1},
  {0, __pyx_k_bj1, sizeof(__pyx_k_bj1), 0, 0, 1, 1},
  {0, __pyx_k_bj2, sizeof(__pyx_k_bj2), 0, 0, 1, 1},
  {0, __pyx_k_bline, sizeof(__pyx_k_bline), 0, 0, 1, 1},
  {0, __pyx_k_blo, sizeof(__pyx_k_blo), 0, 0, 1, 1},
  {0, __pyx_k_btags, sizeof(__pyx_k_btags), 0, 0, 1, 1},
  {0, __pyx_k_ch, sizeof(__pyx_k_ch), 0, 0, 1, 1},
  {0, __pyx_k_change_re, sizeof(__pyx_k_change_re), 0, 0, 1, 1},
  {0, __pyx_k_charjunk, sizeof(__pyx_k_charjunk), 0, 0, 1, 1},
  {0, __pyx_k_charjunk_2, sizeof(__pyx_k_charjunk_2), 0, 0, 1, 1},
  {0, __pyx_k_charset, sizeof(__pyx_k_charset), 0, 0, 1, 1},
  {0, __pyx_k_check_types, sizeof(__pyx_k_check_types), 0, 0, 1, 1},
  {0, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {0, __pyx_k_codes, sizeof(__pyx_k_codes), 0, 0, 1, 1},
  {0, __pyx_k_collect_lines, sizeof(__pyx_k_collect_lines), 0, 0, 1, 1},
  {0, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {0, __pyx_k_compare, sizeof(__pyx_k_compare), 0, 0, 1, 1},
  {0, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {0, __pyx_k_contains, sizeof(__pyx_k_contains), 0, 0, 1, 1},
  {0, __pyx_k_context, sizeof(__pyx_k_context), 0, 0, 1, 1},
  {0, __pyx_k_contextLines, sizeof(__pyx_k_contextLines), 0, 0, 1, 1},
  {0, __pyx_k_context_diff, sizeof(__pyx_k_context_diff), 0, 0, 1, 1},
  {0, __pyx_k_context_diff_line_1321, sizeof(__pyx_k_context_diff_line_1321), 0, 1, 0, 0},
  {0, __pyx_k_context_diff_locals_genexpr, sizeof(__pyx_k_context_diff_locals_genexpr), 0, 0, 1, 1},
  {0, __pyx_k_context_lines, sizeof(__pyx_k_context_lines), 0, 0, 1, 1},
  {0, __pyx_k_convert_flags, sizeof(__pyx_k_convert_flags), 0, 0, 1, 1},
  {0, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {0, __pyx_k_cruncher, sizeof(__pyx_k_cruncher), 0, 0, 1, 1},
  {0, __pyx_k_cutoff, sizeof(__pyx_k_cutoff), 0, 0, 1, 1},
  {0, __pyx_k_cutoff_must_be_in_0_0_1_0_r, sizeof(__pyx_k_cutoff_must_be_in_0_0_1_0_r), 0, 0, 1, 0},
  {0, __pyx_k_cydifflib, sizeof(__pyx_k_cydifflib), 0, 0, 1, 1},
  {0, __pyx_k_cydifflib_pyx, sizeof(__pyx_k_cydifflib_pyx), 0, 0, 1, 0},
  {0, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 0},
  {0, __pyx_k_data_list, sizeof(__pyx_k_data_list), 0, 0, 1, 1},
  {0, __pyx_k_data_rows, sizeof(__pyx_k_data_rows), 0, 0, 1, 1},
  {0, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {0, __pyx_k_default_prefix, sizeof(__pyx_k_default_prefix), 0, 0, 1, 1},
  {0, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 0, 1, 1},
  {0, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {0, __pyx_k_dfunc, sizeof(__pyx_k_dfunc), 0, 0, 1, 1},
  {0, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {0, __pyx_k_diff_bytes, sizeof(__pyx_k_diff_bytes), 0, 0, 1, 1},
  {0, __pyx_k_diff_bytes_locals_decode, sizeof(__pyx_k_diff_bytes_locals_decode), 0, 0, 1, 1},
  {0, __pyx_k_diff_lines_iterator, sizeof(__pyx_k_diff_lines_iterator), 0, 0, 1, 1},
  {0, __pyx_k_diffs, sizeof(__pyx_k_diffs), 0, 0, 1, 1},
  {0, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {0, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {0, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 0, 1, 1},
  {0, __pyx_k_elt, sizeof(__pyx_k_elt), 0, 0, 1, 1},
  {0, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {0, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {0, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {0, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {0, __pyx_k_eqi, sizeof(__pyx_k_eqi), 0, 0, 1, 1},
  {0, __pyx_k_eqj, sizeof(__pyx_k_eqj), 0, 0, 1, 1},
  {0, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 0, 1, 1},
  {0, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
  {0, __pyx_k_expand_tabs, sizeof(__pyx_k_expand_tabs), 0, 0, 1, 1},
  {0, __pyx_k_expandtabs, sizeof(__pyx_k_expandtabs), 0, 0, 1, 1},
  {0, __pyx_k_fancy_helper, sizeof(__pyx_k_fancy_helper), 0, 0, 1, 1},
  {0, __pyx_k_fancy_replace, sizeof(__pyx_k_fancy_replace), 0, 0, 1, 1},
  {0, __pyx_k_file1_range, sizeof(__pyx_k_file1_range), 0, 0, 1, 1},
  {0, __pyx_k_file2_range, sizeof(__pyx_k_file2_range), 0, 0, 1, 1},
  {0, __pyx_k_file_template, sizeof(__pyx_k_file_template), 0, 0, 1, 1},
  {0, __pyx_k_find_longest_match, sizeof(__pyx_k_find_longest_match), 0, 0, 1, 1},
  {0, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {0, __pyx_k_flag, sizeof(__pyx_k_flag), 0, 0, 1, 1},
  {0, __pyx_k_flaglist, sizeof(__pyx_k_flaglist), 0, 0, 1, 1},
  {0, __pyx_k_fmt, sizeof(__pyx_k_fmt), 0, 0, 1, 1},
  {0, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {0, __pyx_k_format_key, sizeof(__pyx_k_format_key), 0, 0, 1, 1},
  {0, __pyx_k_format_line, sizeof(__pyx_k_format_line), 0, 0, 1, 1},
  {0, __pyx_k_format_range_context, sizeof(__pyx_k_format_range_context), 0, 0, 1, 1},
  {0, __pyx_k_format_range_unified, sizeof(__pyx_k_format_range_unified), 0, 0, 1, 1},
  {0, __pyx_k_found_diff, sizeof(__pyx_k_found_diff), 0, 0, 1, 1},
  {0, __pyx_k_fromDiff, sizeof(__pyx_k_fromDiff), 0, 0, 1, 1},
  {0, __pyx_k_from_d, sizeof(__pyx_k_from_d), 0, 0, 1, 0},
  {0, __pyx_k_from_line, sizeof(__pyx_k_from_line), 0, 0, 1, 1},
  {0, __pyx_k_fromdata, sizeof(__pyx_k_fromdata), 0, 0, 1, 1},
  {0, __pyx_k_fromdate, sizeof(__pyx_k_fromdate), 0, 0, 1, 1},
  {0, __pyx_k_fromdesc, sizeof(__pyx_k_fromdesc), 0, 0, 1, 1},
  {0, __pyx_k_fromfile, sizeof(__pyx_k_fromfile), 0, 0, 1, 1},
  {0, __pyx_k_fromfiledate, sizeof(__pyx_k_fromfiledate), 0, 0, 1, 1},
  {0, __pyx_k_fromline, sizeof(__pyx_k_fromline), 0, 0, 1, 1},
  {0, __pyx_k_fromlines, sizeof(__pyx_k_fromlines), 0, 0, 1, 1},
  {0, __pyx_k_fromlist, sizeof(__pyx_k_fromlist), 0, 0, 1, 1},
  {0, __pyx_k_fromprefix, sizeof(__pyx_k_fromprefix), 0, 0, 1, 1},
  {0, __pyx_k_fromtext, sizeof(__pyx_k_fromtext), 0, 0, 1, 1},
  {0, __pyx_k_fullbcount, sizeof(__pyx_k_fullbcount), 0, 0, 1, 1},
  {0, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {0, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {0, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {0, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {0, __pyx_k_get_close_matches, sizeof(__pyx_k_get_close_matches), 0, 0, 1, 1},
  {0, __pyx_k_get_close_matches_line_799, sizeof(__pyx_k_get_close_matches_line_799), 0, 1, 0, 0},
  {0, __pyx_k_get_grouped_opcodes, sizeof(__pyx_k_get_grouped_opcodes), 0, 0, 1, 1},
  {0, __pyx_k_get_matching_blocks, sizeof(__pyx_k_get_matching_blocks), 0, 0, 1, 1},
  {0, __pyx_k_get_opcodes, sizeof(__pyx_k_get_opcodes), 0, 0, 1, 1},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_group, sizeof(__pyx_k_group), 0, 0, 1, 1},
  {0, __pyx_k_gt, sizeof(__pyx_k_gt), 0, 0, 1, 0},
  {0, __pyx_k_header_row, sizeof(__pyx_k_header_row), 0, 0, 1, 1},
  {0, __pyx_k_heapq, sizeof(__pyx_k_heapq), 0, 0, 1, 1},
  {0, __pyx_k_hi, sizeof(__pyx_k_hi), 0, 0, 1, 1},
  {0, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {0, __pyx_k_i1, sizeof(__pyx_k_i1), 0, 0, 1, 1},
  {0, __pyx_k_i2, sizeof(__pyx_k_i2), 0, 0, 1, 1},
  {0, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {0, __pyx_k_id_difflib_chg__s__d, sizeof(__pyx_k_id_difflib_chg__s__d), 0, 0, 1, 0},
  {0, __pyx_k_id_s_s, sizeof(__pyx_k_id_s_s), 0, 0, 1, 0},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_in_change, sizeof(__pyx_k_in_change), 0, 0, 1, 1},
  {0, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {0, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {0, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_insert, sizeof(__pyx_k_insert), 0, 0, 1, 1},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {0, __pyx_k_isjunk, sizeof(__pyx_k_isjunk), 0, 0, 1, 1},
  {0, __pyx_k_isspace, sizeof(__pyx_k_isspace), 0, 0, 1, 1},
  {0, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {0, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {0, __pyx_k_j1, sizeof(__pyx_k_j1), 0, 0, 1, 1},
  {0, __pyx_k_j2, sizeof(__pyx_k_j2), 0, 0, 1, 1},
  {0, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {0, __pyx_k_keep_original_ws, sizeof(__pyx_k_keep_original_ws), 0, 0, 1, 1},
  {0, __pyx_k_keep_original_ws_locals_genexpr, sizeof(__pyx_k_keep_original_ws_locals_genexpr), 0, 0, 1, 1},
  {0, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {0, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {0, __pyx_k_la, sizeof(__pyx_k_la), 0, 0, 1, 1},
  {0, __pyx_k_last, sizeof(__pyx_k_last), 0, 0, 1, 1},
  {0, __pyx_k_lb, sizeof(__pyx_k_lb), 0, 0, 1, 1},
  {0, __pyx_k_legend, sizeof(__pyx_k_legend), 0, 0, 1, 1},
  {0, __pyx_k_legend_2, sizeof(__pyx_k_legend_2), 0, 0, 1, 1},
  {0, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {0, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {0, __pyx_k_line1, sizeof(__pyx_k_line1), 0, 0, 1, 1},
  {0, __pyx_k_line2, sizeof(__pyx_k_line2), 0, 0, 1, 1},
  {0, __pyx_k_line_iterator, sizeof(__pyx_k_line_iterator), 0, 0, 1, 1},
  {0, __pyx_k_line_iterator_2, sizeof(__pyx_k_line_iterator_2), 0, 0, 1, 1},
  {0, __pyx_k_line_num, sizeof(__pyx_k_line_num), 0, 0, 1, 1},
  {0, __pyx_k_line_pair_iterator, sizeof(__pyx_k_line_pair_iterator), 0, 0, 1, 1},
  {0, __pyx_k_line_pair_iterator_2, sizeof(__pyx_k_line_pair_iterator_2), 0, 0, 1, 1},
  {0, __pyx_k_line_wrapper, sizeof(__pyx_k_line_wrapper), 0, 0, 1, 1},
  {0, __pyx_k_linejunk, sizeof(__pyx_k_linejunk), 0, 0, 1, 1},
  {0, __pyx_k_linejunk_2, sizeof(__pyx_k_linejunk_2), 0, 0, 1, 1},
  {0, __pyx_k_linenum, sizeof(__pyx_k_linenum), 0, 0, 1, 1},
  {0, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {0, __pyx_k_lines_to_compare_must_be_str_not, sizeof(__pyx_k_lines_to_compare_must_be_str_not), 0, 0, 1, 0},
  {0, __pyx_k_lines_to_write, sizeof(__pyx_k_lines_to_write), 0, 0, 1, 1},
  {0, __pyx_k_lineterm, sizeof(__pyx_k_lineterm), 0, 0, 1, 1},
  {0, __pyx_k_lo, sizeof(__pyx_k_lo), 0, 0, 1, 1},
  {0, __pyx_k_lt, sizeof(__pyx_k_lt), 0, 0, 1, 0},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_make_file, sizeof(__pyx_k_make_file), 0, 0, 1, 1},
  {0, __pyx_k_make_line, sizeof(__pyx_k_make_line), 0, 0, 1, 1},
  {0, __pyx_k_make_prefix, sizeof(__pyx_k_make_prefix), 0, 0, 1, 1},
  {0, __pyx_k_make_table, sizeof(__pyx_k_make_table), 0, 0, 1, 1},
  {0, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {0, __pyx_k_mark, sizeof(__pyx_k_mark), 0, 0, 1, 1},
  {0, __pyx_k_markers, sizeof(__pyx_k_markers), 0, 0, 1, 1},
  {0, __pyx_k_match, sizeof(__pyx_k_match), 0, 0, 1, 1},
  {0, __pyx_k_match_object, sizeof(__pyx_k_match_object), 0, 0, 1, 1},
  {0, __pyx_k_matches, sizeof(__pyx_k_matches), 0, 0, 1, 1},
  {0, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {0, __pyx_k_mdiff, sizeof(__pyx_k_mdiff), 0, 0, 1, 1},
  {0, __pyx_k_mdiff_locals__line_iterator, sizeof(__pyx_k_mdiff_locals__line_iterator), 0, 0, 1, 1},
  {0, __pyx_k_mdiff_locals__line_pair_iterato, sizeof(__pyx_k_mdiff_locals__line_pair_iterato), 0, 0, 1, 1},
  {0, __pyx_k_mdiff_locals__make_line, sizeof(__pyx_k_mdiff_locals__make_line), 0, 0, 1, 1},
  {0, __pyx_k_mdiff_locals__make_line_locals, sizeof(__pyx_k_mdiff_locals__make_line_locals), 0, 0, 1, 1},
  {0, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {0, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {0, __pyx_k_mro_entries, sizeof(__pyx_k_mro_entries), 0, 0, 1, 1},
  {0, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {0, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {0, __pyx_k_n_must_be_0_r, sizeof(__pyx_k_n_must_be_0_r), 0, 0, 1, 0},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_namedtuple, sizeof(__pyx_k_namedtuple), 0, 0, 1, 1},
  {0, __pyx_k_namedtuple_2, sizeof(__pyx_k_namedtuple_2), 0, 0, 1, 1},
  {0, __pyx_k_nbsp, sizeof(__pyx_k_nbsp), 0, 0, 1, 0},
  {0, __pyx_k_ndiff, sizeof(__pyx_k_ndiff), 0, 0, 1, 1},
  {0, __pyx_k_ndiff_line_1444, sizeof(__pyx_k_ndiff_line_1444), 0, 1, 0, 0},
  {0, __pyx_k_next_href, sizeof(__pyx_k_next_href), 0, 0, 1, 1},
  {0, __pyx_k_next_id, sizeof(__pyx_k_next_id), 0, 0, 1, 1},
  {0, __pyx_k_nlargest, sizeof(__pyx_k_nlargest), 0, 0, 1, 1},
  {0, __pyx_k_nlargest_2, sizeof(__pyx_k_nlargest_2), 0, 0, 1, 1},
  {0, __pyx_k_nn, sizeof(__pyx_k_nn), 0, 0, 1, 1},
  {0, __pyx_k_num_blanks_pending, sizeof(__pyx_k_num_blanks_pending), 0, 0, 1, 1},
  {0, __pyx_k_num_blanks_to_yield, sizeof(__pyx_k_num_blanks_to_yield), 0, 0, 1, 1},
  {0, __pyx_k_num_chg, sizeof(__pyx_k_num_chg), 0, 0, 1, 1},
  {0, __pyx_k_num_lines, sizeof(__pyx_k_num_lines), 0, 0, 1, 1},
  {0, __pyx_k_numb, sizeof(__pyx_k_numb), 0, 0, 1, 1},
  {0, __pyx_k_numlines, sizeof(__pyx_k_numlines), 0, 0, 1, 1},
  {0, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {0, __pyx_k_pat, sizeof(__pyx_k_pat), 0, 0, 1, 1},
  {0, __pyx_k_plain_replace, sizeof(__pyx_k_plain_replace), 0, 0, 1, 1},
  {0, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {0, __pyx_k_possibilities, sizeof(__pyx_k_possibilities), 0, 0, 1, 1},
  {0, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {0, __pyx_k_prefix_2, sizeof(__pyx_k_prefix_2), 0, 0, 1, 1},
  {0, __pyx_k_prefixes, sizeof(__pyx_k_prefixes), 0, 0, 1, 1},
  {0, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_qformat, sizeof(__pyx_k_qformat), 0, 0, 1, 1},
  {0, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {0, __pyx_k_quick_ratio, sizeof(__pyx_k_quick_ratio), 0, 0, 1, 1},
  {0, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {0, __pyx_k_ratio, sizeof(__pyx_k_ratio), 0, 0, 1, 1},
  {0, __pyx_k_ratio_locals_genexpr, sizeof(__pyx_k_ratio_locals_genexpr), 0, 0, 1, 1},
  {0, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {0, __pyx_k_real_quick_ratio, sizeof(__pyx_k_real_quick_ratio), 0, 0, 1, 1},
  {0, __pyx_k_record_sub_info, sizeof(__pyx_k_record_sub_info), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {0, __pyx_k_restore, sizeof(__pyx_k_restore), 0, 0, 1, 1},
  {0, __pyx_k_restore_line_2160, sizeof(__pyx_k_restore_line_2160), 0, 1, 0, 0},
  {0, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {0, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {0, __pyx_k_rstrip, sizeof(__pyx_k_rstrip), 0, 0, 1, 1},
  {0, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {0, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {0, __pyx_k_s_s_2, sizeof(__pyx_k_s_s_2), 0, 0, 1, 0},
  {0, __pyx_k_score, sizeof(__pyx_k_score), 0, 0, 1, 1},
  {0, __pyx_k_second, sizeof(__pyx_k_second), 0, 0, 1, 1},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_self_a__self_b__cannot_be_conver, sizeof(__pyx_k_self_a__self_b__cannot_be_conver), 0, 0, 1, 0},
  {0, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {0, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
  {0, __pyx_k_set_seq1, sizeof(__pyx_k_set_seq1), 0, 0, 1, 1},
  {0, __pyx_k_set_seq2, sizeof(__pyx_k_set_seq2), 0, 0, 1, 1},
  {0, __pyx_k_set_seqs, sizeof(__pyx_k_set_seqs), 0, 0, 1, 1},
  {0, __pyx_k_setdefault, sizeof(__pyx_k_setdefault), 0, 0, 1, 1},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_side, sizeof(__pyx_k_side), 0, 0, 1, 1},
  {0, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {0, __pyx_k_span, sizeof(__pyx_k_span), 0, 0, 1, 1},
  {0, __pyx_k_span_2, sizeof(__pyx_k_span_2), 0, 0, 1, 0},
  {0, __pyx_k_span_class_diff_add, sizeof(__pyx_k_span_class_diff_add), 0, 0, 1, 0},
  {0, __pyx_k_span_class_diff_chg, sizeof(__pyx_k_span_class_diff_chg), 0, 0, 1, 0},
  {0, __pyx_k_span_class_diff_sub, sizeof(__pyx_k_span_class_diff_sub), 0, 0, 1, 0},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_split_line, sizeof(__pyx_k_split_line), 0, 0, 1, 1},
  {0, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {0, __pyx_k_started, sizeof(__pyx_k_started), 0, 0, 1, 1},
  {0, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
  {0, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_styles, sizeof(__pyx_k_styles), 0, 0, 1, 1},
  {0, __pyx_k_styles_2, sizeof(__pyx_k_styles_2), 0, 0, 1, 1},
  {0, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {0, __pyx_k_sub_info, sizeof(__pyx_k_sub_info), 0, 0, 1, 1},
  {0, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {0, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {0, __pyx_k_surrogateescape, sizeof(__pyx_k_surrogateescape), 0, 0, 1, 1},
  {0, __pyx_k_tab_newline_replace, sizeof(__pyx_k_tab_newline_replace), 0, 0, 1, 1},
  {0, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {0, __pyx_k_table_class_diff_id_difflib_chg, sizeof(__pyx_k_table_class_diff_id_difflib_chg), 0, 0, 1, 0},
  {0, __pyx_k_table_class_diff_summary_Legend, sizeof(__pyx_k_table_class_diff_summary_Legend), 0, 0, 1, 0},
  {0, __pyx_k_table_diff_font_family_Courier, sizeof(__pyx_k_table_diff_font_family_Courier), 0, 0, 1, 0},
  {0, __pyx_k_table_template, sizeof(__pyx_k_table_template), 0, 0, 1, 1},
  {0, __pyx_k_tabsize, sizeof(__pyx_k_tabsize), 0, 0, 1, 1},
  {0, __pyx_k_tabsize_2, sizeof(__pyx_k_tabsize_2), 0, 0, 1, 1},
  {0, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {0, __pyx_k_tag_s, sizeof(__pyx_k_tag_s), 0, 0, 1, 1},
  {0, __pyx_k_tbody_tbody, sizeof(__pyx_k_tbody_tbody), 0, 0, 1, 0},
  {0, __pyx_k_td_class_diff_header_s_s_td_td, sizeof(__pyx_k_td_class_diff_header_s_s_td_td), 0, 0, 1, 0},
  {0, __pyx_k_td_class_diff_next_s_td_s_tr, sizeof(__pyx_k_td_class_diff_next_s_td_s_tr), 0, 0, 1, 0},
  {0, __pyx_k_td_td_td_nbsp_Empty_File_nbsp_t, sizeof(__pyx_k_td_td_td_nbsp_Empty_File_nbsp_t), 0, 0, 1, 0},
  {0, __pyx_k_td_td_td_nbsp_No_Differences_Fo, sizeof(__pyx_k_td_td_td_nbsp_No_Differences_Fo), 0, 0, 1, 0},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {0, __pyx_k_th_class_diff_next_br_th, sizeof(__pyx_k_th_class_diff_next_br_th), 0, 0, 1, 0},
  {0, __pyx_k_th_colspan_2_class_diff_header, sizeof(__pyx_k_th_colspan_2_class_diff_header), 0, 0, 1, 0},
  {0, __pyx_k_thead_tr_s_s_s_s_tr_thead, sizeof(__pyx_k_thead_tr_s_s_s_s_tr_thead), 0, 0, 1, 0},
  {0, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {0, __pyx_k_to_d, sizeof(__pyx_k_to_d), 0, 0, 1, 0},
  {0, __pyx_k_to_diff, sizeof(__pyx_k_to_diff), 0, 0, 1, 1},
  {0, __pyx_k_to_line, sizeof(__pyx_k_to_line), 0, 0, 1, 1},
  {0, __pyx_k_todata, sizeof(__pyx_k_todata), 0, 0, 1, 1},
  {0, __pyx_k_todate, sizeof(__pyx_k_todate), 0, 0, 1, 1},
  {0, __pyx_k_todesc, sizeof(__pyx_k_todesc), 0, 0, 1, 1},
  {0, __pyx_k_tofile, sizeof(__pyx_k_tofile), 0, 0, 1, 1},
  {0, __pyx_k_tofiledate, sizeof(__pyx_k_tofiledate), 0, 0, 1, 1},
  {0, __pyx_k_toline, sizeof(__pyx_k_toline), 0, 0, 1, 1},
  {0, __pyx_k_tolines, sizeof(__pyx_k_tolines), 0, 0, 1, 1},
  {0, __pyx_k_tolist, sizeof(__pyx_k_tolist), 0, 0, 1, 1},
  {0, __pyx_k_toprefix, sizeof(__pyx_k_toprefix), 0, 0, 1, 1},
  {0, __pyx_k_totext, sizeof(__pyx_k_totext), 0, 0, 1, 1},
  {0, __pyx_k_tr_td_class_diff_next_s_s_td_s, sizeof(__pyx_k_tr_td_class_diff_next_s_s_td_s), 0, 0, 1, 0},
  {0, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {0, __pyx_k_unified_diff, sizeof(__pyx_k_unified_diff), 0, 0, 1, 1},
  {0, __pyx_k_unified_diff_line_1236, sizeof(__pyx_k_unified_diff_line_1236), 0, 1, 0, 0},
  {0, __pyx_k_unknown_delta_choice_must_be_1_o, sizeof(__pyx_k_unknown_delta_choice_must_be_1_o), 0, 0, 1, 0},
  {0, __pyx_k_unknown_tag_r, sizeof(__pyx_k_unknown_tag_r), 0, 0, 1, 0},
  {0, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {0, __pyx_k_which, sizeof(__pyx_k_which), 0, 0, 1, 1},
  {0, __pyx_k_which_2, sizeof(__pyx_k_which_2), 0, 0, 1, 1},
  {0, __pyx_k_word, sizeof(__pyx_k_word), 0, 0, 1, 1},
  {0, __pyx_k_wrapcolumn, sizeof(__pyx_k_wrapcolumn), 0, 0, 1, 1},
  {0, __pyx_k_wrapcolumn_2, sizeof(__pyx_k_wrapcolumn_2), 0, 0, 1, 1},
  {0, __pyx_k_ws, sizeof(__pyx_k_ws), 0, 0, 1, 1},
  {0, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {0, __pyx_k_xmlcharrefreplace, sizeof(__pyx_k_xmlcharrefreplace), 0, 0, 1, 1},
  {0, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  #else
  {&__pyx_kp_b_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 0, 0},
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Compare_a_and_b_lists_of_string, __pyx_k_Compare_a_and_b_lists_of_string, sizeof(__pyx_k_Compare_a_and_b_lists_of_string), 0, 1, 0, 0},
  {&__pyx_kp_u_Compare_two_sequences_of_lines, __pyx_k_Compare_two_sequences_of_lines, sizeof(__pyx_k_Compare_two_sequences_of_lines), 0, 1, 0, 0},
  {&__pyx_kp_u_Compare_two_sequences_of_lines_2, __pyx_k_Compare_two_sequences_of_lines_2, sizeof(__pyx_k_Compare_two_sequences_of_lines_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Compare_two_sequences_of_lines_3, __pyx_k_Compare_two_sequences_of_lines_3, sizeof(__pyx_k_Compare_two_sequences_of_lines_3), 0, 1, 0, 0},
  {&__pyx_kp_s_DOCTYPE_html_PUBLIC_W3C_DTD_XHT, __pyx_k_DOCTYPE_html_PUBLIC_W3C_DTD_XHT, sizeof(__pyx_k_DOCTYPE_html_PUBLIC_W3C_DTD_XHT), 0, 0, 1, 0},
  {&__pyx_n_s_Differ, __pyx_k_Differ, sizeof(__pyx_k_Differ), 0, 0, 1, 1},
  {&__pyx_n_s_Differ___init, __pyx_k_Differ___init, sizeof(__pyx_k_Differ___init), 0, 0, 1, 1},
  {&__pyx_n_s_Differ__dump, __pyx_k_Differ__dump, sizeof(__pyx_k_Differ__dump), 0, 0, 1, 1},
  {&__pyx_n_s_Differ__fancy_helper, __pyx_k_Differ__fancy_helper, sizeof(__pyx_k_Differ__fancy_helper), 0, 0, 1, 1},
  {&__pyx_n_s_Differ__fancy_replace, __pyx_k_Differ__fancy_replace, sizeof(__pyx_k_Differ__fancy_replace), 0, 0, 1, 1},
  {&__pyx_kp_u_Differ__fancy_replace_line_1034, __pyx_k_Differ__fancy_replace_line_1034, sizeof(__pyx_k_Differ__fancy_replace_line_1034), 0, 1, 0, 0},
  {&__pyx_n_s_Differ__plain_replace, __pyx_k_Differ__plain_replace, sizeof(__pyx_k_Differ__plain_replace), 0, 0, 1, 1},
  {&__pyx_n_s_Differ__qformat, __pyx_k_Differ__qformat, sizeof(__pyx_k_Differ__qformat), 0, 0, 1, 1},
  {&__pyx_kp_u_Differ__qformat_line_1140, __pyx_k_Differ__qformat_line_1140, sizeof(__pyx_k_Differ__qformat_line_1140), 0, 1, 0, 0},
  {&__pyx_n_s_Differ_compare, __pyx_k_Differ_compare, sizeof(__pyx_k_Differ_compare), 0, 0, 1, 1},
  {&__pyx_kp_u_Differ_compare_line_974, __pyx_k_Differ_compare_line_974, sizeof(__pyx_k_Differ_compare_line_974), 0, 1, 0, 0},
  {&__pyx_kp_s_Differ_is_a_class_for_comparing, __pyx_k_Differ_is_a_class_for_comparing, sizeof(__pyx_k_Differ_is_a_class_for_comparing), 0, 0, 1, 0},
  {&__pyx_kp_u_Find_longest_matching_block_in_a, __pyx_k_Find_longest_matching_block_in_a, sizeof(__pyx_k_Find_longest_matching_block_in_a), 0, 1, 0, 0},
  {&__pyx_kp_s_For_producing_HTML_side_by_side, __pyx_k_For_producing_HTML_side_by_side, sizeof(__pyx_k_For_producing_HTML_side_by_side), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_output_and_deal_with_tab, __pyx_k_Format_output_and_deal_with_tab, sizeof(__pyx_k_Format_output_and_deal_with_tab), 0, 1, 0, 0},
  {&__pyx_kp_u_Generate_one_of_the_two_sequenc, __pyx_k_Generate_one_of_the_two_sequenc, sizeof(__pyx_k_Generate_one_of_the_two_sequenc), 0, 1, 0, 0},
  {&__pyx_n_s_GenericAlias, __pyx_k_GenericAlias, sizeof(__pyx_k_GenericAlias), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff, __pyx_k_HtmlDiff, sizeof(__pyx_k_HtmlDiff), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff___init, __pyx_k_HtmlDiff___init, sizeof(__pyx_k_HtmlDiff___init), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff__collect_lines, __pyx_k_HtmlDiff__collect_lines, sizeof(__pyx_k_HtmlDiff__collect_lines), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff__convert_flags, __pyx_k_HtmlDiff__convert_flags, sizeof(__pyx_k_HtmlDiff__convert_flags), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff__format_line, __pyx_k_HtmlDiff__format_line, sizeof(__pyx_k_HtmlDiff__format_line), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff__line_wrapper, __pyx_k_HtmlDiff__line_wrapper, sizeof(__pyx_k_HtmlDiff__line_wrapper), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff__make_prefix, __pyx_k_HtmlDiff__make_prefix, sizeof(__pyx_k_HtmlDiff__make_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff__split_line, __pyx_k_HtmlDiff__split_line, sizeof(__pyx_k_HtmlDiff__split_line), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff__tab_newline_replace, __pyx_k_HtmlDiff__tab_newline_replace, sizeof(__pyx_k_HtmlDiff__tab_newline_replace), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff__tab_newline_replace_lo, __pyx_k_HtmlDiff__tab_newline_replace_lo, sizeof(__pyx_k_HtmlDiff__tab_newline_replace_lo), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff_make_file, __pyx_k_HtmlDiff_make_file, sizeof(__pyx_k_HtmlDiff_make_file), 0, 0, 1, 1},
  {&__pyx_n_s_HtmlDiff_make_table, __pyx_k_HtmlDiff_make_table, sizeof(__pyx_k_HtmlDiff_make_table), 0, 0, 1, 1},
  {&__pyx_n_s_IS_CHARACTER_JUNK, __pyx_k_IS_CHARACTER_JUNK, sizeof(__pyx_k_IS_CHARACTER_JUNK), 0, 0, 1, 1},
  {&__pyx_kp_u_IS_CHARACTER_JUNK_line_1202, __pyx_k_IS_CHARACTER_JUNK_line_1202, sizeof(__pyx_k_IS_CHARACTER_JUNK_line_1202), 0, 1, 0, 0},
  {&__pyx_n_s_IS_LINE_JUNK, __pyx_k_IS_LINE_JUNK, sizeof(__pyx_k_IS_LINE_JUNK), 0, 0, 1, 1},
  {&__pyx_kp_u_IS_LINE_JUNK_line_1186, __pyx_k_IS_LINE_JUNK_line_1186, sizeof(__pyx_k_IS_LINE_JUNK_line_1186), 0, 1, 0, 0},
  {&__pyx_kp_u_Isolate_change_clusters_by_elim, __pyx_k_Isolate_change_clusters_by_elim, sizeof(__pyx_k_Isolate_change_clusters_by_elim), 0, 1, 0, 0},
  {&__pyx_n_s_Match, __pyx_k_Match, sizeof(__pyx_k_Match), 0, 0, 1, 1},
  {&__pyx_kp_u_Return_True_for_ignorable_chara, __pyx_k_Return_True_for_ignorable_chara, sizeof(__pyx_k_Return_True_for_ignorable_chara), 0, 1, 0, 0},
  {&__pyx_kp_u_Return_True_for_ignorable_line, __pyx_k_Return_True_for_ignorable_line, sizeof(__pyx_k_Return_True_for_ignorable_line), 0, 1, 0, 0},
  {&__pyx_kp_u_Return_a_measure_of_the_sequence, __pyx_k_Return_a_measure_of_the_sequence, sizeof(__pyx_k_Return_a_measure_of_the_sequence), 0, 1, 0, 0},
  {&__pyx_kp_u_Return_list_of_5_tuples_describi, __pyx_k_Return_list_of_5_tuples_describi, sizeof(__pyx_k_Return_list_of_5_tuples_describi), 0, 1, 0, 0},
  {&__pyx_kp_u_Return_list_of_triples_describin, __pyx_k_Return_list_of_triples_describin, sizeof(__pyx_k_Return_list_of_triples_describin), 0, 1, 0, 0},
  {&__pyx_n_s_SequenceMatcher, __pyx_k_SequenceMatcher, sizeof(__pyx_k_SequenceMatcher), 0, 0, 1, 1},
  {&__pyx_n_s_SequenceMatcher___reduce_cython, __pyx_k_SequenceMatcher___reduce_cython, sizeof(__pyx_k_SequenceMatcher___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_SequenceMatcher___setstate_cytho, __pyx_k_SequenceMatcher___setstate_cytho, sizeof(__pyx_k_SequenceMatcher___setstate_cytho), 0, 0, 1, 1},
  {&__pyx_n_s_SequenceMatcher_find_longest_mat, __pyx_k_SequenceMatcher_find_longest_mat, sizeof(__pyx_k_SequenceMatcher_find_longest_mat), 0, 0, 1, 1},
  {&__pyx_kp_u_SequenceMatcher_find_longest_mat_2, __pyx_k_SequenceMatcher_find_longest_mat_2, sizeof(__pyx_k_SequenceMatcher_find_longest_mat_2), 0, 1, 0, 0},
  {&__pyx_n_s_SequenceMatcher_get_grouped_opco, __pyx_k_SequenceMatcher_get_grouped_opco, sizeof(__pyx_k_SequenceMatcher_get_grouped_opco), 0, 0, 1, 1},
  {&__pyx_kp_u_SequenceMatcher_get_grouped_opco_2, __pyx_k_SequenceMatcher_get_grouped_opco_2, sizeof(__pyx_k_SequenceMatcher_get_grouped_opco_2), 0, 1, 0, 0},
  {&__pyx_n_s_SequenceMatcher_get_matching_blo, __pyx_k_SequenceMatcher_get_matching_blo, sizeof(__pyx_k_SequenceMatcher_get_matching_blo), 0, 0, 1, 1},
  {&__pyx_kp_u_SequenceMatcher_get_matching_blo_2, __pyx_k_SequenceMatcher_get_matching_blo_2, sizeof(__pyx_k_SequenceMatcher_get_matching_blo_2), 0, 1, 0, 0},
  {&__pyx_n_s_SequenceMatcher_get_opcodes, __pyx_k_SequenceMatcher_get_opcodes, sizeof(__pyx_k_SequenceMatcher_get_opcodes), 0, 0, 1, 1},
  {&__pyx_kp_u_SequenceMatcher_get_opcodes_line, __pyx_k_SequenceMatcher_get_opcodes_line, sizeof(__pyx_k_SequenceMatcher_get_opcodes_line), 0, 1, 0, 0},
  {&__pyx_n_s_SequenceMatcher_quick_ratio, __pyx_k_SequenceMatcher_quick_ratio, sizeof(__pyx_k_SequenceMatcher_quick_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_SequenceMatcher_ratio, __pyx_k_SequenceMatcher_ratio, sizeof(__pyx_k_SequenceMatcher_ratio), 0, 0, 1, 1},
  {&__pyx_kp_u_SequenceMatcher_ratio_line_730, __pyx_k_SequenceMatcher_ratio_line_730, sizeof(__pyx_k_SequenceMatcher_ratio_line_730), 0, 1, 0, 0},
  {&__pyx_n_s_SequenceMatcher_real_quick_ratio, __pyx_k_SequenceMatcher_real_quick_ratio, sizeof(__pyx_k_SequenceMatcher_real_quick_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_SequenceMatcher_set_seq1, __pyx_k_SequenceMatcher_set_seq1, sizeof(__pyx_k_SequenceMatcher_set_seq1), 0, 0, 1, 1},
  {&__pyx_kp_u_SequenceMatcher_set_seq1_line_28, __pyx_k_SequenceMatcher_set_seq1_line_28, sizeof(__pyx_k_SequenceMatcher_set_seq1_line_28), 0, 1, 0, 0},
  {&__pyx_n_s_SequenceMatcher_set_seq2, __pyx_k_SequenceMatcher_set_seq2, sizeof(__pyx_k_SequenceMatcher_set_seq2), 0, 0, 1, 1},
  {&__pyx_kp_u_SequenceMatcher_set_seq2_line_31, __pyx_k_SequenceMatcher_set_seq2_line_31, sizeof(__pyx_k_SequenceMatcher_set_seq2_line_31), 0, 1, 0, 0},
  {&__pyx_n_s_SequenceMatcher_set_seqs, __pyx_k_SequenceMatcher_set_seqs, sizeof(__pyx_k_SequenceMatcher_set_seqs), 0, 0, 1, 1},
  {&__pyx_kp_u_SequenceMatcher_set_seqs_line_27, __pyx_k_SequenceMatcher_set_seqs_line_27, sizeof(__pyx_k_SequenceMatcher_set_seqs_line_27), 0, 1, 0, 0},
  {&__pyx_kp_u_Set_the_first_sequence_to_be_com, __pyx_k_Set_the_first_sequence_to_be_com, sizeof(__pyx_k_Set_the_first_sequence_to_be_com), 0, 1, 0, 0},
  {&__pyx_kp_u_Set_the_second_sequence_to_be_co, __pyx_k_Set_the_second_sequence_to_be_co, sizeof(__pyx_k_Set_the_second_sequence_to_be_co), 0, 1, 0, 0},
  {&__pyx_kp_u_Set_the_two_sequences_to_be_comp, __pyx_k_Set_the_two_sequences_to_be_comp, sizeof(__pyx_k_Set_the_two_sequences_to_be_comp), 0, 1, 0, 0},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Use_SequenceMatcher_to_return_li, __pyx_k_Use_SequenceMatcher_to_return_li, sizeof(__pyx_k_Use_SequenceMatcher_to_return_li), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_When_replacing_one_block_of_lin, __pyx_k_When_replacing_one_block_of_lin, sizeof(__pyx_k_When_replacing_one_block_of_lin), 0, 1, 0, 0},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_kp_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
  {&__pyx_kp_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 0},
  {&__pyx_n_s__143, __pyx_k__143, sizeof(__pyx_k__143), 0, 0, 1, 1},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {&__pyx_kp_b__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 0, 0},
  {&__pyx_kp_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 0},
  {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_kp_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {&__pyx_kp_s__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 0, 1, 0},
  {&__pyx_kp_s__21, __pyx_k__21, sizeof(__pyx_k__21), 0, 0, 1, 0},
  {&__pyx_kp_s__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 0, 1, 0},
  {&__pyx_kp_s__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 0, 1, 0},
  {&__pyx_kp_s__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 0, 1, 0},
  {&__pyx_kp_s__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 0, 1, 0},
  {&__pyx_kp_s__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 0, 1, 0},
  {&__pyx_kp_s__29, __pyx_k__29, sizeof(__pyx_k__29), 0, 0, 1, 0},
  {&__pyx_kp_s__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 0},
  {&__pyx_kp_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 0},
  {&__pyx_kp_s__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 0, 1, 0},
  {&__pyx_kp_s__39, __pyx_k__39, sizeof(__pyx_k__39), 0, 0, 1, 0},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_kp_s__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 0, 1, 0},
  {&__pyx_kp_s__43, __pyx_k__43, sizeof(__pyx_k__43), 0, 0, 1, 0},
  {&__pyx_kp_s__44, __pyx_k__44, sizeof(__pyx_k__44), 0, 0, 1, 0},
  {&__pyx_kp_s__45, __pyx_k__45, sizeof(__pyx_k__45), 0, 0, 1, 0},
  {&__pyx_kp_s__46, __pyx_k__46, sizeof(__pyx_k__46), 0, 0, 1, 0},
  {&__pyx_kp_s__47, __pyx_k__47, sizeof(__pyx_k__47), 0, 0, 1, 0},
  {&__pyx_kp_s__49, __pyx_k__49, sizeof(__pyx_k__49), 0, 0, 1, 0},
  {&__pyx_kp_s__50, __pyx_k__50, sizeof(__pyx_k__50), 0, 0, 1, 0},
  {&__pyx_kp_s__51, __pyx_k__51, sizeof(__pyx_k__51), 0, 0, 1, 0},
  {&__pyx_kp_s__52, __pyx_k__52, sizeof(__pyx_k__52), 0, 0, 1, 0},
  {&__pyx_n_s__57, __pyx_k__57, sizeof(__pyx_k__57), 0, 0, 1, 1},
  {&__pyx_kp_s__58, __pyx_k__58, sizeof(__pyx_k__58), 0, 0, 1, 0},
  {&__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
  {&__pyx_kp_s__67, __pyx_k__67, sizeof(__pyx_k__67), 0, 0, 1, 0},
  {&__pyx_kp_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
  {&__pyx_kp_s__72, __pyx_k__72, sizeof(__pyx_k__72), 0, 0, 1, 0},
  {&__pyx_kp_s__75, __pyx_k__75, sizeof(__pyx_k__75), 0, 0, 1, 0},
  {&__pyx_kp_s__78, __pyx_k__78, sizeof(__pyx_k__78), 0, 0, 1, 0},
  {&__pyx_kp_s__81, __pyx_k__81, sizeof(__pyx_k__81), 0, 0, 1, 0},
  {&__pyx_kp_s__83, __pyx_k__83, sizeof(__pyx_k__83), 0, 0, 1, 0},
  {&__pyx_kp_s__85, __pyx_k__85, sizeof(__pyx_k__85), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_kp_s_a_b_size, __pyx_k_a_b_size, sizeof(__pyx_k_a_b_size), 0, 0, 1, 0},
  {&__pyx_kp_s_a_href_difflib_chg__s_0_f_a, __pyx_k_a_href_difflib_chg__s_0_f_a, sizeof(__pyx_k_a_href_difflib_chg__s_0_f_a), 0, 0, 1, 0},
  {&__pyx_kp_s_a_href_difflib_chg__s__d_n_a, __pyx_k_a_href_difflib_chg__s__d_n_a, sizeof(__pyx_k_a_href_difflib_chg__s__d_n_a), 0, 0, 1, 0},
  {&__pyx_kp_s_a_href_difflib_chg__s_top_t_a, __pyx_k_a_href_difflib_chg__s_top_t_a, sizeof(__pyx_k_a_href_difflib_chg__s_top_t_a), 0, 0, 1, 0},
  {&__pyx_n_s_aelt, __pyx_k_aelt, sizeof(__pyx_k_aelt), 0, 0, 1, 1},
  {&__pyx_n_s_ahi, __pyx_k_ahi, sizeof(__pyx_k_ahi), 0, 0, 1, 1},
  {&__pyx_n_s_ahi_2, __pyx_k_ahi_2, sizeof(__pyx_k_ahi_2), 0, 0, 1, 1},
  {&__pyx_n_s_ai, __pyx_k_ai, sizeof(__pyx_k_ai), 0, 0, 1, 1},
  {&__pyx_n_s_ai1, __pyx_k_ai1, sizeof(__pyx_k_ai1), 0, 0, 1, 1},
  {&__pyx_n_s_ai2, __pyx_k_ai2, sizeof(__pyx_k_ai2), 0, 0, 1, 1},
  {&__pyx_n_s_aline, __pyx_k_aline, sizeof(__pyx_k_aline), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_kp_s_all_arguments_must_be_bytes_not, __pyx_k_all_arguments_must_be_bytes_not, sizeof(__pyx_k_all_arguments_must_be_bytes_not), 0, 0, 1, 0},
  {&__pyx_kp_s_all_arguments_must_be_str_not_r, __pyx_k_all_arguments_must_be_str_not_r, sizeof(__pyx_k_all_arguments_must_be_str_not_r), 0, 0, 1, 0},
  {&__pyx_n_s_alo, __pyx_k_alo, sizeof(__pyx_k_alo), 0, 0, 1, 1},
  {&__pyx_kp_s_amp, __pyx_k_amp, sizeof(__pyx_k_amp), 0, 0, 1, 0},
  {&__pyx_n_s_answer, __pyx_k_answer, sizeof(__pyx_k_answer), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_atags, __pyx_k_atags, sizeof(__pyx_k_atags), 0, 0, 1, 1},
  {&__pyx_n_s_autojunk, __pyx_k_autojunk, sizeof(__pyx_k_autojunk), 0, 0, 1, 1},
  {&__pyx_n_s_avail, __pyx_k_avail, sizeof(__pyx_k_avail), 0, 0, 1, 1},
  {&__pyx_n_s_availhas, __pyx_k_availhas, sizeof(__pyx_k_availhas), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_begin, __pyx_k_begin, sizeof(__pyx_k_begin), 0, 0, 1, 1},
  {&__pyx_n_s_beginning, __pyx_k_beginning, sizeof(__pyx_k_beginning), 0, 0, 1, 1},
  {&__pyx_n_s_belt, __pyx_k_belt, sizeof(__pyx_k_belt), 0, 0, 1, 1},
  {&__pyx_n_s_best_i, __pyx_k_best_i, sizeof(__pyx_k_best_i), 0, 0, 1, 1},
  {&__pyx_n_s_best_j, __pyx_k_best_j, sizeof(__pyx_k_best_j), 0, 0, 1, 1},
  {&__pyx_n_s_best_ratio, __pyx_k_best_ratio, sizeof(__pyx_k_best_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_bhi, __pyx_k_bhi, sizeof(__pyx_k_bhi), 0, 0, 1, 1},
  {&__pyx_n_s_bhi_2, __pyx_k_bhi_2, sizeof(__pyx_k_bhi_2), 0, 0, 1, 1},
  {&__pyx_n_s_bj, __pyx_k_bj, sizeof(__pyx_k_bj), 0, 0, 1, 1},
  {&__pyx_n_s_bj1, __pyx_k_bj1, sizeof(__pyx_k_bj1), 0, 0, 1, 1},
  {&__pyx_n_s_bj2, __pyx_k_bj2, sizeof(__pyx_k_bj2), 0, 0, 1, 1},
  {&__pyx_n_s_bline, __pyx_k_bline, sizeof(__pyx_k_bline), 0, 0, 1, 1},
  {&__pyx_n_s_blo, __pyx_k_blo, sizeof(__pyx_k_blo), 0, 0, 1, 1},
  {&__pyx_n_s_btags, __pyx_k_btags, sizeof(__pyx_k_btags), 0, 0, 1, 1},
  {&__pyx_n_s_ch, __pyx_k_ch, sizeof(__pyx_k_ch), 0, 0, 1, 1},
  {&__pyx_n_s_change_re, __pyx_k_change_re, sizeof(__pyx_k_change_re), 0, 0, 1, 1},
  {&__pyx_n_s_charjunk, __pyx_k_charjunk, sizeof(__pyx_k_charjunk), 0, 0, 1, 1},
  {&__pyx_n_s_charjunk_2, __pyx_k_charjunk_2, sizeof(__pyx_k_charjunk_2), 0, 0, 1, 1},
  {&__pyx_n_s_charset, __pyx_k_charset, sizeof(__pyx_k_charset), 0, 0, 1, 1},
  {&__pyx_n_s_check_types, __pyx_k_check_types, sizeof(__pyx_k_check_types), 0, 0, 1, 1},
  {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_codes, __pyx_k_codes, sizeof(__pyx_k_codes), 0, 0, 1, 1},
  {&__pyx_n_s_collect_lines, __pyx_k_collect_lines, sizeof(__pyx_k_collect_lines), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_compare, __pyx_k_compare, sizeof(__pyx_k_compare), 0, 0, 1, 1},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_s_contains, __pyx_k_contains, sizeof(__pyx_k_contains), 0, 0, 1, 1},
  {&__pyx_n_s_context, __pyx_k_context, sizeof(__pyx_k_context), 0, 0, 1, 1},
  {&__pyx_n_s_contextLines, __pyx_k_contextLines, sizeof(__pyx_k_contextLines), 0, 0, 1, 1},
  {&__pyx_n_s_context_diff, __pyx_k_context_diff, sizeof(__pyx_k_context_diff), 0, 0, 1, 1},
  {&__pyx_kp_u_context_diff_line_1321, __pyx_k_context_diff_line_1321, sizeof(__pyx_k_context_diff_line_1321), 0, 1, 0, 0},
  {&__pyx_n_s_context_diff_locals_genexpr, __pyx_k_context_diff_locals_genexpr, sizeof(__pyx_k_context_diff_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_context_lines, __pyx_k_context_lines, sizeof(__pyx_k_context_lines), 0, 0, 1, 1},
  {&__pyx_n_s_convert_flags, __pyx_k_convert_flags, sizeof(__pyx_k_convert_flags), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_cruncher, __pyx_k_cruncher, sizeof(__pyx_k_cruncher), 0, 0, 1, 1},
  {&__pyx_n_s_cutoff, __pyx_k_cutoff, sizeof(__pyx_k_cutoff), 0, 0, 1, 1},
  {&__pyx_kp_s_cutoff_must_be_in_0_0_1_0_r, __pyx_k_cutoff_must_be_in_0_0_1_0_r, sizeof(__pyx_k_cutoff_must_be_in_0_0_1_0_r), 0, 0, 1, 0},
  {&__pyx_n_s_cydifflib, __pyx_k_cydifflib, sizeof(__pyx_k_cydifflib), 0, 0, 1, 1},
  {&__pyx_kp_s_cydifflib_pyx, __pyx_k_cydifflib_pyx, sizeof(__pyx_k_cydifflib_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 0},
  {&__pyx_n_s_data_list, __pyx_k_data_list, sizeof(__pyx_k_data_list), 0, 0, 1, 1},
  {&__pyx_n_s_data_rows, __pyx_k_data_rows, sizeof(__pyx_k_data_rows), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_default_prefix, __pyx_k_default_prefix, sizeof(__pyx_k_default_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 0, 1, 1},
  {&__pyx_n_s_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {&__pyx_n_s_dfunc, __pyx_k_dfunc, sizeof(__pyx_k_dfunc), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_diff_bytes, __pyx_k_diff_bytes, sizeof(__pyx_k_diff_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_diff_bytes_locals_decode, __pyx_k_diff_bytes_locals_decode, sizeof(__pyx_k_diff_bytes_locals_decode), 0, 0, 1, 1},
  {&__pyx_n_s_diff_lines_iterator, __pyx_k_diff_lines_iterator, sizeof(__pyx_k_diff_lines_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_diffs, __pyx_k_diffs, sizeof(__pyx_k_diffs), 0, 0, 1, 1},
  {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dump, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 0, 1, 1},
  {&__pyx_n_s_elt, __pyx_k_elt, sizeof(__pyx_k_elt), 0, 0, 1, 1},
  {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eqi, __pyx_k_eqi, sizeof(__pyx_k_eqi), 0, 0, 1, 1},
  {&__pyx_n_s_eqj, __pyx_k_eqj, sizeof(__pyx_k_eqj), 0, 0, 1, 1},
  {&__pyx_n_s_equal, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 0, 1, 1},
  {&__pyx_n_s_err, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
  {&__pyx_n_s_expand_tabs, __pyx_k_expand_tabs, sizeof(__pyx_k_expand_tabs), 0, 0, 1, 1},
  {&__pyx_n_s_expandtabs, __pyx_k_expandtabs, sizeof(__pyx_k_expandtabs), 0, 0, 1, 1},
  {&__pyx_n_s_fancy_helper, __pyx_k_fancy_helper, sizeof(__pyx_k_fancy_helper), 0, 0, 1, 1},
  {&__pyx_n_s_fancy_replace, __pyx_k_fancy_replace, sizeof(__pyx_k_fancy_replace), 0, 0, 1, 1},
  {&__pyx_n_s_file1_range, __pyx_k_file1_range, sizeof(__pyx_k_file1_range), 0, 0, 1, 1},
  {&__pyx_n_s_file2_range, __pyx_k_file2_range, sizeof(__pyx_k_file2_range), 0, 0, 1, 1},
  {&__pyx_n_s_file_template, __pyx_k_file_template, sizeof(__pyx_k_file_template), 0, 0, 1, 1},
  {&__pyx_n_s_find_longest_match, __pyx_k_find_longest_match, sizeof(__pyx_k_find_longest_match), 0, 0, 1, 1},
  {&__pyx_n_s_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {&__pyx_n_s_flag, __pyx_k_flag, sizeof(__pyx_k_flag), 0, 0, 1, 1},
  {&__pyx_n_s_flaglist, __pyx_k_flaglist, sizeof(__pyx_k_flaglist), 0, 0, 1, 1},
  {&__pyx_n_s_fmt, __pyx_k_fmt, sizeof(__pyx_k_fmt), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_format_key, __pyx_k_format_key, sizeof(__pyx_k_format_key), 0, 0, 1, 1},
  {&__pyx_n_s_format_line, __pyx_k_format_line, sizeof(__pyx_k_format_line), 0, 0, 1, 1},
  {&__pyx_n_s_format_range_context, __pyx_k_format_range_context, sizeof(__pyx_k_format_range_context), 0, 0, 1, 1},
  {&__pyx_n_s_format_range_unified, __pyx_k_format_range_unified, sizeof(__pyx_k_format_range_unified), 0, 0, 1, 1},
  {&__pyx_n_s_found_diff, __pyx_k_found_diff, sizeof(__pyx_k_found_diff), 0, 0, 1, 1},
  {&__pyx_n_s_fromDiff, __pyx_k_fromDiff, sizeof(__pyx_k_fromDiff), 0, 0, 1, 1},
  {&__pyx_kp_s_from_d, __pyx_k_from_d, sizeof(__pyx_k_from_d), 0, 0, 1, 0},
  {&__pyx_n_s_from_line, __pyx_k_from_line, sizeof(__pyx_k_from_line), 0, 0, 1, 1},
  {&__pyx_n_s_fromdata, __pyx_k_fromdata, sizeof(__pyx_k_fromdata), 0, 0, 1, 1},
  {&__pyx_n_s_fromdate, __pyx_k_fromdate, sizeof(__pyx_k_fromdate), 0, 0, 1, 1},
  {&__pyx_n_s_fromdesc, __pyx_k_fromdesc, sizeof(__pyx_k_fromdesc), 0, 0, 1, 1},
  {&__pyx_n_s_fromfile, __pyx_k_fromfile, sizeof(__pyx_k_fromfile), 0, 0, 1, 1},
  {&__pyx_n_s_fromfiledate, __pyx_k_fromfiledate, sizeof(__pyx_k_fromfiledate), 0, 0, 1, 1},
  {&__pyx_n_s_fromline, __pyx_k_fromline, sizeof(__pyx_k_fromline), 0, 0, 1, 1},
  {&__pyx_n_s_fromlines, __pyx_k_fromlines, sizeof(__pyx_k_fromlines), 0, 0, 1, 1},
  {&__pyx_n_s_fromlist, __pyx_k_fromlist, sizeof(__pyx_k_fromlist), 0, 0, 1, 1},
  {&__pyx_n_s_fromprefix, __pyx_k_fromprefix, sizeof(__pyx_k_fromprefix), 0, 0, 1, 1},
  {&__pyx_n_s_fromtext, __pyx_k_fromtext, sizeof(__pyx_k_fromtext), 0, 0, 1, 1},
  {&__pyx_n_s_fullbcount, __pyx_k_fullbcount, sizeof(__pyx_k_fullbcount), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_close_matches, __pyx_k_get_close_matches, sizeof(__pyx_k_get_close_matches), 0, 0, 1, 1},
  {&__pyx_kp_u_get_close_matches_line_799, __pyx_k_get_close_matches_line_799, sizeof(__pyx_k_get_close_matches_line_799), 0, 1, 0, 0},
  {&__pyx_n_s_get_grouped_opcodes, __pyx_k_get_grouped_opcodes, sizeof(__pyx_k_get_grouped_opcodes), 0, 0, 1, 1},
  {&__pyx_n_s_get_matching_blocks, __pyx_k_get_matching_blocks, sizeof(__pyx_k_get_matching_blocks), 0, 0, 1, 1},
  {&__pyx_n_s_get_opcodes, __pyx_k_get_opcodes, sizeof(__pyx_k_get_opcodes), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_group, __pyx_k_group, sizeof(__pyx_k_group), 0, 0, 1, 1},
  {&__pyx_kp_s_gt, __pyx_k_gt, sizeof(__pyx_k_gt), 0, 0, 1, 0},
  {&__pyx_n_s_header_row, __pyx_k_header_row, sizeof(__pyx_k_header_row), 0, 0, 1, 1},
  {&__pyx_n_s_heapq, __pyx_k_heapq, sizeof(__pyx_k_heapq), 0, 0, 1, 1},
  {&__pyx_n_s_hi, __pyx_k_hi, sizeof(__pyx_k_hi), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_i1, __pyx_k_i1, sizeof(__pyx_k_i1), 0, 0, 1, 1},
  {&__pyx_n_s_i2, __pyx_k_i2, sizeof(__pyx_k_i2), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_kp_s_id_difflib_chg__s__d, __pyx_k_id_difflib_chg__s__d, sizeof(__pyx_k_id_difflib_chg__s__d), 0, 0, 1, 0},
  {&__pyx_kp_s_id_s_s, __pyx_k_id_s_s, sizeof(__pyx_k_id_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_change, __pyx_k_in_change, sizeof(__pyx_k_in_change), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_insert, __pyx_k_insert, sizeof(__pyx_k_insert), 0, 0, 1, 1},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {&__pyx_n_s_isjunk, __pyx_k_isjunk, sizeof(__pyx_k_isjunk), 0, 0, 1, 1},
  {&__pyx_n_s_isspace, __pyx_k_isspace, sizeof(__pyx_k_isspace), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_j1, __pyx_k_j1, sizeof(__pyx_k_j1), 0, 0, 1, 1},
  {&__pyx_n_s_j2, __pyx_k_j2, sizeof(__pyx_k_j2), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_keep_original_ws, __pyx_k_keep_original_ws, sizeof(__pyx_k_keep_original_ws), 0, 0, 1, 1},
  {&__pyx_n_s_keep_original_ws_locals_genexpr, __pyx_k_keep_original_ws_locals_genexpr, sizeof(__pyx_k_keep_original_ws_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_la, __pyx_k_la, sizeof(__pyx_k_la), 0, 0, 1, 1},
  {&__pyx_n_s_last, __pyx_k_last, sizeof(__pyx_k_last), 0, 0, 1, 1},
  {&__pyx_n_s_lb, __pyx_k_lb, sizeof(__pyx_k_lb), 0, 0, 1, 1},
  {&__pyx_n_s_legend, __pyx_k_legend, sizeof(__pyx_k_legend), 0, 0, 1, 1},
  {&__pyx_n_s_legend_2, __pyx_k_legend_2, sizeof(__pyx_k_legend_2), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_line1, __pyx_k_line1, sizeof(__pyx_k_line1), 0, 0, 1, 1},
  {&__pyx_n_s_line2, __pyx_k_line2, sizeof(__pyx_k_line2), 0, 0, 1, 1},
  {&__pyx_n_s_line_iterator, __pyx_k_line_iterator, sizeof(__pyx_k_line_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_line_iterator_2, __pyx_k_line_iterator_2, sizeof(__pyx_k_line_iterator_2), 0, 0, 1, 1},
  {&__pyx_n_s_line_num, __pyx_k_line_num, sizeof(__pyx_k_line_num), 0, 0, 1, 1},
  {&__pyx_n_s_line_pair_iterator, __pyx_k_line_pair_iterator, sizeof(__pyx_k_line_pair_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_line_pair_iterator_2, __pyx_k_line_pair_iterator_2, sizeof(__pyx_k_line_pair_iterator_2), 0, 0, 1, 1},
  {&__pyx_n_s_line_wrapper, __pyx_k_line_wrapper, sizeof(__pyx_k_line_wrapper), 0, 0, 1, 1},
  {&__pyx_n_s_linejunk, __pyx_k_linejunk, sizeof(__pyx_k_linejunk), 0, 0, 1, 1},
  {&__pyx_n_s_linejunk_2, __pyx_k_linejunk_2, sizeof(__pyx_k_linejunk_2), 0, 0, 1, 1},
  {&__pyx_n_s_linenum, __pyx_k_linenum, sizeof(__pyx_k_linenum), 0, 0, 1, 1},
  {&__pyx_n_s_lines, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {&__pyx_kp_s_lines_to_compare_must_be_str_not, __pyx_k_lines_to_compare_must_be_str_not, sizeof(__pyx_k_lines_to_compare_must_be_str_not), 0, 0, 1, 0},
  {&__pyx_n_s_lines_to_write, __pyx_k_lines_to_write, sizeof(__pyx_k_lines_to_write), 0, 0, 1, 1},
  {&__pyx_n_s_lineterm, __pyx_k_lineterm, sizeof(__pyx_k_lineterm), 0, 0, 1, 1},
  {&__pyx_n_s_lo, __pyx_k_lo, sizeof(__pyx_k_lo), 0, 0, 1, 1},
  {&__pyx_kp_s_lt, __pyx_k_lt, sizeof(__pyx_k_lt), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_make_file, __pyx_k_make_file, sizeof(__pyx_k_make_file), 0, 0, 1, 1},
  {&__pyx_n_s_make_line, __pyx_k_make_line, sizeof(__pyx_k_make_line), 0, 0, 1, 1},
  {&__pyx_n_s_make_prefix, __pyx_k_make_prefix, sizeof(__pyx_k_make_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_make_table, __pyx_k_make_table, sizeof(__pyx_k_make_table), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_mark, __pyx_k_mark, sizeof(__pyx_k_mark), 0, 0, 1, 1},
  {&__pyx_n_s_markers, __pyx_k_markers, sizeof(__pyx_k_markers), 0, 0, 1, 1},
  {&__pyx_n_s_match, __pyx_k_match, sizeof(__pyx_k_match), 0, 0, 1, 1},
  {&__pyx_n_s_match_object, __pyx_k_match_object, sizeof(__pyx_k_match_object), 0, 0, 1, 1},
  {&__pyx_n_s_matches, __pyx_k_matches, sizeof(__pyx_k_matches), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_mdiff, __pyx_k_mdiff, sizeof(__pyx_k_mdiff), 0, 0, 1, 1},
  {&__pyx_n_s_mdiff_locals__line_iterator, __pyx_k_mdiff_locals__line_iterator, sizeof(__pyx_k_mdiff_locals__line_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_mdiff_locals__line_pair_iterato, __pyx_k_mdiff_locals__line_pair_iterato, sizeof(__pyx_k_mdiff_locals__line_pair_iterato), 0, 0, 1, 1},
  {&__pyx_n_s_mdiff_locals__make_line, __pyx_k_mdiff_locals__make_line, sizeof(__pyx_k_mdiff_locals__make_line), 0, 0, 1, 1},
  {&__pyx_n_s_mdiff_locals__make_line_locals, __pyx_k_mdiff_locals__make_line_locals, sizeof(__pyx_k_mdiff_locals__make_line_locals), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_mro_entries, __pyx_k_mro_entries, sizeof(__pyx_k_mro_entries), 0, 0, 1, 1},
  {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_kp_s_n_must_be_0_r, __pyx_k_n_must_be_0_r, sizeof(__pyx_k_n_must_be_0_r), 0, 0, 1, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_namedtuple, __pyx_k_namedtuple, sizeof(__pyx_k_namedtuple), 0, 0, 1, 1},
  {&__pyx_n_s_namedtuple_2, __pyx_k_namedtuple_2, sizeof(__pyx_k_namedtuple_2), 0, 0, 1, 1},
  {&__pyx_kp_s_nbsp, __pyx_k_nbsp, sizeof(__pyx_k_nbsp), 0, 0, 1, 0},
  {&__pyx_n_s_ndiff, __pyx_k_ndiff, sizeof(__pyx_k_ndiff), 0, 0, 1, 1},
  {&__pyx_kp_u_ndiff_line_1444, __pyx_k_ndiff_line_1444, sizeof(__pyx_k_ndiff_line_1444), 0, 1, 0, 0},
  {&__pyx_n_s_next_href, __pyx_k_next_href, sizeof(__pyx_k_next_href), 0, 0, 1, 1},
  {&__pyx_n_s_next_id, __pyx_k_next_id, sizeof(__pyx_k_next_id), 0, 0, 1, 1},
  {&__pyx_n_s_nlargest, __pyx_k_nlargest, sizeof(__pyx_k_nlargest), 0, 0, 1, 1},
  {&__pyx_n_s_nlargest_2, __pyx_k_nlargest_2, sizeof(__pyx_k_nlargest_2), 0, 0, 1, 1},
  {&__pyx_n_s_nn, __pyx_k_nn, sizeof(__pyx_k_nn), 0, 0, 1, 1},
  {&__pyx_n_s_num_blanks_pending, __pyx_k_num_blanks_pending, sizeof(__pyx_k_num_blanks_pending), 0, 0, 1, 1},
  {&__pyx_n_s_num_blanks_to_yield, __pyx_k_num_blanks_to_yield, sizeof(__pyx_k_num_blanks_to_yield), 0, 0, 1, 1},
  {&__pyx_n_s_num_chg, __pyx_k_num_chg, sizeof(__pyx_k_num_chg), 0, 0, 1, 1},
  {&__pyx_n_s_num_lines, __pyx_k_num_lines, sizeof(__pyx_k_num_lines), 0, 0, 1, 1},
  {&__pyx_n_s_numb, __pyx_k_numb, sizeof(__pyx_k_numb), 0, 0, 1, 1},
  {&__pyx_n_s_numlines, __pyx_k_numlines, sizeof(__pyx_k_numlines), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_pat, __pyx_k_pat, sizeof(__pyx_k_pat), 0, 0, 1, 1},
  {&__pyx_n_s_plain_replace, __pyx_k_plain_replace, sizeof(__pyx_k_plain_replace), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_possibilities, __pyx_k_possibilities, sizeof(__pyx_k_possibilities), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_prefix_2, __pyx_k_prefix_2, sizeof(__pyx_k_prefix_2), 0, 0, 1, 1},
  {&__pyx_n_s_prefixes, __pyx_k_prefixes, sizeof(__pyx_k_prefixes), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qformat, __pyx_k_qformat, sizeof(__pyx_k_qformat), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_quick_ratio, __pyx_k_quick_ratio, sizeof(__pyx_k_quick_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ratio, __pyx_k_ratio, sizeof(__pyx_k_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_ratio_locals_genexpr, __pyx_k_ratio_locals_genexpr, sizeof(__pyx_k_ratio_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_real_quick_ratio, __pyx_k_real_quick_ratio, sizeof(__pyx_k_real_quick_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_record_sub_info, __pyx_k_record_sub_info, sizeof(__pyx_k_record_sub_info), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_restore, __pyx_k_restore, sizeof(__pyx_k_restore), 0, 0, 1, 1},
  {&__pyx_kp_u_restore_line_2160, __pyx_k_restore_line_2160, sizeof(__pyx_k_restore_line_2160), 0, 1, 0, 0},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {&__pyx_n_s_rstrip, __pyx_k_rstrip, sizeof(__pyx_k_rstrip), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_2, __pyx_k_s_s_2, sizeof(__pyx_k_s_s_2), 0, 0, 1, 0},
  {&__pyx_n_s_score, __pyx_k_score, sizeof(__pyx_k_score), 0, 0, 1, 1},
  {&__pyx_n_s_second, __pyx_k_second, sizeof(__pyx_k_second), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_a__self_b__cannot_be_conver, __pyx_k_self_a__self_b__cannot_be_conver, sizeof(__pyx_k_self_a__self_b__cannot_be_conver), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
  {&__pyx_n_s_set_seq1, __pyx_k_set_seq1, sizeof(__pyx_k_set_seq1), 0, 0, 1, 1},
  {&__pyx_n_s_set_seq2, __pyx_k_set_seq2, sizeof(__pyx_k_set_seq2), 0, 0, 1, 1},
  {&__pyx_n_s_set_seqs, __pyx_k_set_seqs, sizeof(__pyx_k_set_seqs), 0, 0, 1, 1},
  {&__pyx_n_s_setdefault, __pyx_k_setdefault, sizeof(__pyx_k_setdefault), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_side, __pyx_k_side, sizeof(__pyx_k_side), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_span, __pyx_k_span, sizeof(__pyx_k_span), 0, 0, 1, 1},
  {&__pyx_kp_s_span_2, __pyx_k_span_2, sizeof(__pyx_k_span_2), 0, 0, 1, 0},
  {&__pyx_kp_s_span_class_diff_add, __pyx_k_span_class_diff_add, sizeof(__pyx_k_span_class_diff_add), 0, 0, 1, 0},
  {&__pyx_kp_s_span_class_diff_chg, __pyx_k_span_class_diff_chg, sizeof(__pyx_k_span_class_diff_chg), 0, 0, 1, 0},
  {&__pyx_kp_s_span_class_diff_sub, __pyx_k_span_class_diff_sub, sizeof(__pyx_k_span_class_diff_sub), 0, 0, 1, 0},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_split_line, __pyx_k_split_line, sizeof(__pyx_k_split_line), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_started, __pyx_k_started, sizeof(__pyx_k_started), 0, 0, 1, 1},
  {&__pyx_n_s_startswith, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_styles, __pyx_k_styles, sizeof(__pyx_k_styles), 0, 0, 1, 1},
  {&__pyx_n_s_styles_2, __pyx_k_styles_2, sizeof(__pyx_k_styles_2), 0, 0, 1, 1},
  {&__pyx_n_s_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {&__pyx_n_s_sub_info, __pyx_k_sub_info, sizeof(__pyx_k_sub_info), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_surrogateescape, __pyx_k_surrogateescape, sizeof(__pyx_k_surrogateescape), 0, 0, 1, 1},
  {&__pyx_n_s_tab_newline_replace, __pyx_k_tab_newline_replace, sizeof(__pyx_k_tab_newline_replace), 0, 0, 1, 1},
  {&__pyx_n_s_table, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {&__pyx_kp_s_table_class_diff_id_difflib_chg, __pyx_k_table_class_diff_id_difflib_chg, sizeof(__pyx_k_table_class_diff_id_difflib_chg), 0, 0, 1, 0},
  {&__pyx_kp_s_table_class_diff_summary_Legend, __pyx_k_table_class_diff_summary_Legend, sizeof(__pyx_k_table_class_diff_summary_Legend), 0, 0, 1, 0},
  {&__pyx_kp_s_table_diff_font_family_Courier, __pyx_k_table_diff_font_family_Courier, sizeof(__pyx_k_table_diff_font_family_Courier), 0, 0, 1, 0},
  {&__pyx_n_s_table_template, __pyx_k_table_template, sizeof(__pyx_k_table_template), 0, 0, 1, 1},
  {&__pyx_n_s_tabsize, __pyx_k_tabsize, sizeof(__pyx_k_tabsize), 0, 0, 1, 1},
  {&__pyx_n_s_tabsize_2, __pyx_k_tabsize_2, sizeof(__pyx_k_tabsize_2), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_tag_s, __pyx_k_tag_s, sizeof(__pyx_k_tag_s), 0, 0, 1, 1},
  {&__pyx_kp_s_tbody_tbody, __pyx_k_tbody_tbody, sizeof(__pyx_k_tbody_tbody), 0, 0, 1, 0},
  {&__pyx_kp_s_td_class_diff_header_s_s_td_td, __pyx_k_td_class_diff_header_s_s_td_td, sizeof(__pyx_k_td_class_diff_header_s_s_td_td), 0, 0, 1, 0},
  {&__pyx_kp_s_td_class_diff_next_s_td_s_tr, __pyx_k_td_class_diff_next_s_td_s_tr, sizeof(__pyx_k_td_class_diff_next_s_td_s_tr), 0, 0, 1, 0},
  {&__pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t, __pyx_k_td_td_td_nbsp_Empty_File_nbsp_t, sizeof(__pyx_k_td_td_td_nbsp_Empty_File_nbsp_t), 0, 0, 1, 0},
  {&__pyx_kp_s_td_td_td_nbsp_No_Differences_Fo, __pyx_k_td_td_td_nbsp_No_Differences_Fo, sizeof(__pyx_k_td_td_td_nbsp_No_Differences_Fo), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_kp_s_th_class_diff_next_br_th, __pyx_k_th_class_diff_next_br_th, sizeof(__pyx_k_th_class_diff_next_br_th), 0, 0, 1, 0},
  {&__pyx_kp_s_th_colspan_2_class_diff_header, __pyx_k_th_colspan_2_class_diff_header, sizeof(__pyx_k_th_colspan_2_class_diff_header), 0, 0, 1, 0},
  {&__pyx_kp_s_thead_tr_s_s_s_s_tr_thead, __pyx_k_thead_tr_s_s_s_s_tr_thead, sizeof(__pyx_k_thead_tr_s_s_s_s_tr_thead), 0, 0, 1, 0},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_kp_s_to_d, __pyx_k_to_d, sizeof(__pyx_k_to_d), 0, 0, 1, 0},
  {&__pyx_n_s_to_diff, __pyx_k_to_diff, sizeof(__pyx_k_to_diff), 0, 0, 1, 1},
  {&__pyx_n_s_to_line, __pyx_k_to_line, sizeof(__pyx_k_to_line), 0, 0, 1, 1},
  {&__pyx_n_s_todata, __pyx_k_todata, sizeof(__pyx_k_todata), 0, 0, 1, 1},
  {&__pyx_n_s_todate, __pyx_k_todate, sizeof(__pyx_k_todate), 0, 0, 1, 1},
  {&__pyx_n_s_todesc, __pyx_k_todesc, sizeof(__pyx_k_todesc), 0, 0, 1, 1},
  {&__pyx_n_s_tofile, __pyx_k_tofile, sizeof(__pyx_k_tofile), 0, 0, 1, 1},
  {&__pyx_n_s_tofiledate, __pyx_k_tofiledate, sizeof(__pyx_k_tofiledate), 0, 0, 1, 1},
  {&__pyx_n_s_toline, __pyx_k_toline, sizeof(__pyx_k_toline), 0, 0, 1, 1},
  {&__pyx_n_s_tolines, __pyx_k_tolines, sizeof(__pyx_k_tolines), 0, 0, 1, 1},
  {&__pyx_n_s_tolist, __pyx_k_tolist, sizeof(__pyx_k_tolist), 0, 0, 1, 1},
  {&__pyx_n_s_toprefix, __pyx_k_toprefix, sizeof(__pyx_k_toprefix), 0, 0, 1, 1},
  {&__pyx_n_s_totext, __pyx_k_totext, sizeof(__pyx_k_totext), 0, 0, 1, 1},
  {&__pyx_kp_s_tr_td_class_diff_next_s_s_td_s, __pyx_k_tr_td_class_diff_next_s_s_td_s, sizeof(__pyx_k_tr_td_class_diff_next_s_s_td_s), 0, 0, 1, 0},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_n_s_unified_diff, __pyx_k_unified_diff, sizeof(__pyx_k_unified_diff), 0, 0, 1, 1},
  {&__pyx_kp_u_unified_diff_line_1236, __pyx_k_unified_diff_line_1236, sizeof(__pyx_k_unified_diff_line_1236), 0, 1, 0, 0},
  {&__pyx_kp_s_unknown_delta_choice_must_be_1_o, __pyx_k_unknown_delta_choice_must_be_1_o, sizeof(__pyx_k_unknown_delta_choice_must_be_1_o), 0, 0, 1, 0},
  {&__pyx_kp_s_unknown_tag_r, __pyx_k_unknown_tag_r, sizeof(__pyx_k_unknown_tag_r), 0, 0, 1, 0},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_n_s_which, __pyx_k_which, sizeof(__pyx_k_which), 0, 0, 1, 1},
  {&__pyx_n_s_which_2, __pyx_k_which_2, sizeof(__pyx_k_which_2), 0, 0, 1, 1},
  {&__pyx_n_s_word, __pyx_k_word, sizeof(__pyx_k_word), 0, 0, 1, 1},
  {&__pyx_n_s_wrapcolumn, __pyx_k_wrapcolumn, sizeof(__pyx_k_wrapcolumn), 0, 0, 1, 1},
  {&__pyx_n_s_wrapcolumn_2, __pyx_k_wrapcolumn_2, sizeof(__pyx_k_wrapcolumn_2), 0, 0, 1, 1},
  {&__pyx_n_s_ws, __pyx_k_ws, sizeof(__pyx_k_ws), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xmlcharrefreplace, __pyx_k_xmlcharrefreplace, sizeof(__pyx_k_xmlcharrefreplace), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 1807, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 375, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 752, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 829, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 852, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 1021, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 1432, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 1428, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 1717, __pyx_L1_error)
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_n_s_reversed); if (!__pyx_builtin_reversed) __PYX_ERR(0, 1562, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cydifflib.pyx":707
 *         codes = self.get_opcodes()
 *         if not codes:
 *             codes = [("equal", 0, 1, 0, 1)]             # <<<<<<<<<<<<<<
 *         # Fixup leading and trailing groups if they show no changes.
 *         if codes[0][0] == 'equal':
 */
  __pyx_tuple__3 = PyTuple_Pack(5, __pyx_n_s_equal, __pyx_int_0, __pyx_int_1, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "cydifflib.pyx":1427
 *     def decode(s):
 *         try:
 *             return s.decode('ascii', 'surrogateescape')             # <<<<<<<<<<<<<<
 *         except AttributeError as err:
 *             msg = ('all arguments must be bytes, not %s (%r)' %
 */
  __pyx_tuple__34 = PyTuple_Pack(2, __pyx_n_s_ascii, __pyx_n_s_surrogateescape); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "cydifflib.pyx":1425
 *     bytes rather than str.
 *     """
 *     def decode(s):             # <<<<<<<<<<<<<<
 *         try:
 *             return s.decode('ascii', 'surrogateescape')
 */
  __pyx_tuple__35 = PyTuple_Pack(3, __pyx_n_s_s, __pyx_n_s_err, __pyx_n_s_msg); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 1425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_decode, 1425, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 1425, __pyx_L1_error)

  /* "cydifflib.pyx":1550
 *         # text with user's line format to allow for usage of the line number.
 *         if format_key is None:
 *             return (num_lines[side],lines.pop(0)[2:])             # <<<<<<<<<<<<<<
 *         # Handle case of intraline changes
 *         if format_key == '?':
 */
  __pyx_slice__38 = PySlice_New(__pyx_int_2, Py_None, Py_None); if (unlikely(!__pyx_slice__38)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__38);
  __Pyx_GIVEREF(__pyx_slice__38);

  /* "cydifflib.pyx":1556
 *             # find intraline changes (store change type and indices in tuples)
 *             sub_info = []
 *             def record_sub_info(match_object,sub_info=sub_info):             # <<<<<<<<<<<<<<
 *                 sub_info.append([match_object.group(1)[0],match_object.span()])
 *                 return match_object.group(1)
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_match_object, __pyx_n_s_sub_info); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_record_sub_info, 1556, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 1556, __pyx_L1_error)

  /* "cydifflib.pyx":1617
 *                 yield _make_line(lines,'-',0), None, True
 *                 continue
 *             elif s.startswith(('--?+', '--+', '- ')):             # <<<<<<<<<<<<<<
 *                 # in delete block and see an intraline change or unchanged line
 *                 # coming: yield the delete line and then blanks
 */
  __pyx_tuple__48 = PyTuple_Pack(3, __pyx_kp_s__46, __pyx_kp_s__47, __pyx_kp_s__15); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "cydifflib.pyx":1641
 *                 yield None, _make_line(lines,'+',1), True
 *                 continue
 *             elif s.startswith(('+ ', '+-')):             # <<<<<<<<<<<<<<
 *                 # will be leaving an add block: yield blanks then add line
 *                 from_line, to_line = None, _make_line(lines,'+',1)
 */
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_kp_s__18, __pyx_kp_s__52); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 1641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "cydifflib.pyx":1658
 *             while(num_blanks_to_yield < 0):
 *                 num_blanks_to_yield += 1
 *                 yield None,('','\n'),True             # <<<<<<<<<<<<<<
 *             while(num_blanks_to_yield > 0):
 *                 num_blanks_to_yield -= 1
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_kp_s_, __pyx_kp_s__17); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_tuple__55 = PyTuple_Pack(3, Py_None, __pyx_tuple__54, Py_True); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "cydifflib.pyx":1661
 *             while(num_blanks_to_yield > 0):
 *                 num_blanks_to_yield -= 1
 *                 yield ('','\n'),None,True             # <<<<<<<<<<<<<<
 *             if s.startswith('X'):
 *                 return
 */
  __pyx_tuple__56 = PyTuple_Pack(3, __pyx_tuple__54, Py_None, Py_True); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "cydifflib.pyx":1523
 *     diff_lines_iterator = ndiff(fromlines,tolines,linejunk,charjunk)
 * 
 *     def _make_line(lines, format_key, side, num_lines=[0,0]):             # <<<<<<<<<<<<<<
 *         """Returns line of text with user's change markup and line formatting.
 * 
 */
  __pyx_tuple__59 = PyTuple_Pack(12, __pyx_n_s_lines, __pyx_n_s_format_key, __pyx_n_s_side, __pyx_n_s_num_lines, __pyx_n_s_text, __pyx_n_s_markers, __pyx_n_s_sub_info, __pyx_n_s_record_sub_info, __pyx_n_s_record_sub_info, __pyx_n_s_key, __pyx_n_s_begin, __pyx_n_s_end); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_make_line, 1523, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 1523, __pyx_L1_error)

  /* "cydifflib.pyx":1579
 *         return (num_lines[side],text)
 * 
 *     def _line_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */
  __pyx_tuple__61 = PyTuple_Pack(7, __pyx_n_s_lines, __pyx_n_s_num_blanks_pending, __pyx_n_s_num_blanks_to_yield, __pyx_n_s_s, __pyx_n_s_from_line, __pyx_n_s_to_line, __pyx_n_s_line); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_line_iterator, 1579, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 1579, __pyx_L1_error)

  /* "cydifflib.pyx":1667
 *                 yield from_line,to_line,True
 * 
 *     def _line_pair_iterator():             # <<<<<<<<<<<<<<
 *         """Yields from/to lines of text with a change indication.
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(8, __pyx_n_s_line_iterator_2, __pyx_n_s_fromlines, __pyx_n_s_tolines, __pyx_n_s_from_line, __pyx_n_s_to_line, __pyx_n_s_found_diff, __pyx_n_s_fromDiff, __pyx_n_s_to_diff); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 1667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_line_pair_iterator, 1667, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 1667, __pyx_L1_error)

  /* "cydifflib.pyx":1725
 *             # the user's separator.
 *             if index > context:
 *                 yield None, None, None             # <<<<<<<<<<<<<<
 *                 lines_to_write = context
 *             else:
 */
  __pyx_tuple__65 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 1725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "cydifflib.pyx":1885
 *         def expand_tabs(line):
 *             # hide real spaces
 *             line = line.replace(' ','\0')             # <<<<<<<<<<<<<<
 *             # expand tabs into spaces
 *             line = line.expandtabs(self._tabsize)
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_kp_s__4, __pyx_kp_s__42); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "cydifflib.pyx":1890
 *             # replace spaces from expanded tabs back into tab characters
 *             # (we'll replace them with markup after we do differencing)
 *             line = line.replace(' ','\t')             # <<<<<<<<<<<<<<
 *             return line.replace('\0',' ').rstrip('\n')
 *         fromlines = [expand_tabs(line) for line in fromlines]
 */
  __pyx_tuple__68 = PyTuple_Pack(2, __pyx_kp_s__4, __pyx_kp_s__67); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "cydifflib.pyx":1891
 *             # (we'll replace them with markup after we do differencing)
 *             line = line.replace(' ','\t')
 *             return line.replace('\0',' ').rstrip('\n')             # <<<<<<<<<<<<<<
 *         fromlines = [expand_tabs(line) for line in fromlines]
 *         tolines = [expand_tabs(line) for line in tolines]
 */
  __pyx_tuple__69 = PyTuple_Pack(2, __pyx_kp_s__42, __pyx_kp_s__4); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "cydifflib.pyx":1883
 *         characters will be replaced with a nonbreakable space.
 *         """
 *         def expand_tabs(line):             # <<<<<<<<<<<<<<
 *             # hide real spaces
 *             line = line.replace(' ','\0')
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_n_s_line); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_expand_tabs, 1883, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 1883, __pyx_L1_error)

  /* "cydifflib.pyx":1972
 *                     fromdata = fromlist.pop(0)
 *                 else:
 *                     fromdata = ('',' ')             # <<<<<<<<<<<<<<
 *                 if tolist:
 *                     todata = tolist.pop(0)
 */
  __pyx_tuple__74 = PyTuple_Pack(2, __pyx_kp_s_, __pyx_kp_s__4); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "cydifflib.pyx":2015
 *             id = ''
 *         # replace those things that would get confused with HTML symbols
 *         text=text.replace("&","&amp;").replace(">","&gt;").replace("<","&lt;")             # <<<<<<<<<<<<<<
 * 
 *         # make space non-breakable so they don't get compressed or line wrapped
 */
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_kp_s__75, __pyx_kp_s_amp); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_tuple__77 = PyTuple_Pack(2, __pyx_kp_s__72, __pyx_kp_s_gt); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_tuple__79 = PyTuple_Pack(2, __pyx_kp_s__78, __pyx_kp_s_lt); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "cydifflib.pyx":2018
 * 
 *         # make space non-breakable so they don't get compressed or line wrapped
 *         text = text.replace(' ','&nbsp;').rstrip()             # <<<<<<<<<<<<<<
 * 
 *         return '<td class="diff_header"%s>%s</td><td nowrap="nowrap">%s</td>' \
 */
  __pyx_tuple__80 = PyTuple_Pack(2, __pyx_kp_s__4, __pyx_kp_s_nbsp); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 2018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "cydifflib.pyx":2152
 *             prefix=self._prefix[1])
 * 
 *         return table.replace('\0+','<span class="diff_add">'). \             # <<<<<<<<<<<<<<
 *                      replace('\0-','<span class="diff_sub">'). \
 *                      replace('\0^','<span class="diff_chg">'). \
 */
  __pyx_tuple__82 = PyTuple_Pack(2, __pyx_kp_s__81, __pyx_kp_s_span_class_diff_add); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "cydifflib.pyx":2153
 * 
 *         return table.replace('\0+','<span class="diff_add">'). \
 *                      replace('\0-','<span class="diff_sub">'). \             # <<<<<<<<<<<<<<
 *                      replace('\0^','<span class="diff_chg">'). \
 *                      replace('\1','</span>'). \
 */
  __pyx_tuple__84 = PyTuple_Pack(2, __pyx_kp_s__83, __pyx_kp_s_span_class_diff_sub); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "cydifflib.pyx":2154
 *         return table.replace('\0+','<span class="diff_add">'). \
 *                      replace('\0-','<span class="diff_sub">'). \
 *                      replace('\0^','<span class="diff_chg">'). \             # <<<<<<<<<<<<<<
 *                      replace('\1','</span>'). \
 *                      replace('\t','&nbsp;')
 */
  __pyx_tuple__86 = PyTuple_Pack(2, __pyx_kp_s__85, __pyx_kp_s_span_class_diff_chg); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "cydifflib.pyx":2155
 *                      replace('\0-','<span class="diff_sub">'). \
 *                      replace('\0^','<span class="diff_chg">'). \
 *                      replace('\1','</span>'). \             # <<<<<<<<<<<<<<
 *                      replace('\t','&nbsp;')
 * 
 */
  __pyx_tuple__87 = PyTuple_Pack(2, __pyx_kp_s__43, __pyx_kp_s_span_2); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 2155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "cydifflib.pyx":2156
 *                      replace('\0^','<span class="diff_chg">'). \
 *                      replace('\1','</span>'). \
 *                      replace('\t','&nbsp;')             # <<<<<<<<<<<<<<
 * 
 * del re
 */
  __pyx_tuple__88 = PyTuple_Pack(2, __pyx_kp_s__67, __pyx_kp_s_nbsp); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 2156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "cydifflib.pyx":2192
 *     prefixes = ("  ", tag)
 *     for line in delta:
 *         if line[:2] in prefixes:             # <<<<<<<<<<<<<<
 *             yield line[2:]
 */
  __pyx_slice__90 = PySlice_New(Py_None, __pyx_int_2, Py_None); if (unlikely(!__pyx_slice__90)) __PYX_ERR(0, 2192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__90);
  __Pyx_GIVEREF(__pyx_slice__90);

  /* "cydifflib.pyx":43
 * from libcpp.unordered_map cimport unordered_map
 * 
 * Match = _namedtuple('Match', 'a b size')             # <<<<<<<<<<<<<<
 * """
 * cdef class Match:
 */
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_n_s_Match, __pyx_kp_s_a_b_size); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "cydifflib.pyx":274
 *         self.set_seqs(a, b)
 * 
 *     cpdef set_seqs(self, a, b):             # <<<<<<<<<<<<<<
 *         """Set the two sequences to be compared.
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_set_seqs, 274, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 274, __pyx_L1_error)

  /* "cydifflib.pyx":286
 *         self.set_seq2(b)
 * 
 *     cpdef set_seq1(self, a):             # <<<<<<<<<<<<<<
 *         """Set the first sequence to be compared.
 * 
 */
  __pyx_tuple__94 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_a); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_set_seq1, 286, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 286, __pyx_L1_error)

  /* "cydifflib.pyx":313
 *         self.la = len(a)
 * 
 *     cpdef set_seq2(self, b):             # <<<<<<<<<<<<<<
 *         """Set the second sequence to be compared.
 * 
 */
  __pyx_tuple__96 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_b); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_set_seq2, 313, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 313, __pyx_L1_error)

  /* "cydifflib.pyx":491
 *         return CMatch(besti, bestj, bestsize)
 * 
 *     def find_longest_match(self, alo=0, ahi=None, blo=0, bhi=None):             # <<<<<<<<<<<<<<
 *         """Find longest matching block in a[alo:ahi] and b[blo:bhi].
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_alo, __pyx_n_s_ahi, __pyx_n_s_blo, __pyx_n_s_bhi, __pyx_n_s_ahi_2, __pyx_n_s_bhi_2, __pyx_n_s_match); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_find_longest_match, 491, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 491, __pyx_L1_error)
  __pyx_tuple__100 = PyTuple_Pack(4, __pyx_int_0, Py_None, __pyx_int_0, Py_None); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "cydifflib.pyx":542
 *         return Match(match.a, match.b, match.size)
 * 
 *     cpdef get_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """Return list of triples describing matching subsequences.
 * 
 */
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_get_matching_blocks, 542, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 542, __pyx_L1_error)

  /* "cydifflib.pyx":625
 *         return self.matching_blocks
 * 
 *     def get_opcodes(self):             # <<<<<<<<<<<<<<
 *         """Return list of 5-tuples describing how to turn a into b.
 * 
 */
  __pyx_tuple__103 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_answer, __pyx_n_s_ai, __pyx_n_s_bj, __pyx_n_s_size, __pyx_n_s_tag); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_get_opcodes, 625, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 625, __pyx_L1_error)

  /* "cydifflib.pyx":680
 *         return answer
 * 
 *     def get_grouped_opcodes(self, n=3):             # <<<<<<<<<<<<<<
 *         """ Isolate change clusters by eliminating ranges with no changes.
 * 
 */
  __pyx_tuple__105 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_n, __pyx_n_s_codes, __pyx_n_s_tag, __pyx_n_s_i1, __pyx_n_s_i2, __pyx_n_s_j1, __pyx_n_s_j2, __pyx_n_s_nn, __pyx_n_s_group); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_get_grouped_opcodes, 680, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 680, __pyx_L1_error)
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "cydifflib.pyx":730
 *             yield group
 * 
 *     def ratio(self):             # <<<<<<<<<<<<<<
 *         """Return a measure of the sequences' similarity (float in [0,1]).
 * 
 */
  __pyx_tuple__107 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_matches, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_ratio, 730, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 730, __pyx_L1_error)

  /* "cydifflib.pyx":755
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 *     def quick_ratio(self):             # <<<<<<<<<<<<<<
 *         """Return an upper bound on ratio() relatively quickly.
 * 
 */
  __pyx_tuple__109 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_fullbcount, __pyx_n_s_elt, __pyx_n_s_avail, __pyx_n_s_availhas, __pyx_n_s_matches, __pyx_n_s_numb); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_quick_ratio, 755, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 755, __pyx_L1_error)

  /* "cydifflib.pyx":784
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 *     def real_quick_ratio(self):             # <<<<<<<<<<<<<<
 *         """Return an upper bound on ratio() very quickly.
 * 
 */
  __pyx_tuple__111 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_la, __pyx_n_s_lb); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__111, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_real_quick_ratio, 784, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(0, 784, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__113 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__115 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cydifflib.pyx":799
 * 
 * 
 * def get_close_matches(word, possibilities, n=3, cutoff=0.6):             # <<<<<<<<<<<<<<
 *     """Use SequenceMatcher to return list of the best "good enough" matches.
 * 
 */
  __pyx_tuple__117 = PyTuple_Pack(9, __pyx_n_s_word, __pyx_n_s_possibilities, __pyx_n_s_n, __pyx_n_s_cutoff, __pyx_n_s_result, __pyx_n_s_s, __pyx_n_s_x, __pyx_n_s_score, __pyx_n_s_x); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__117, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_get_close_matches, 799, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 799, __pyx_L1_error)
  __pyx_tuple__119 = PyTuple_Pack(2, ((PyObject *)__pyx_int_3), ((PyObject*)__pyx_float_0_6)); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "cydifflib.pyx":848
 * 
 * 
 * def _keep_original_ws(s, tag_s):             # <<<<<<<<<<<<<<
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 */
  __pyx_tuple__120 = PyTuple_Pack(4, __pyx_n_s_s, __pyx_n_s_tag_s, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_keep_original_ws, 848, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 848, __pyx_L1_error)

  /* "cydifflib.pyx":951
 *     """
 * 
 *     def __init__(self, linejunk=None, charjunk=None):             # <<<<<<<<<<<<<<
 *         """
 *         Construct a text differencer, with optional filters.
 */
  __pyx_tuple__122 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_linejunk, __pyx_n_s_charjunk); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_init, 951, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 951, __pyx_L1_error)
  __pyx_tuple__124 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "cydifflib.pyx":974
 *         self.charjunk = charjunk
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         r"""
 *         Compare two sequences of lines; generate the resulting delta.
 */
  __pyx_tuple__125 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_cruncher, __pyx_n_s_tag, __pyx_n_s_alo, __pyx_n_s_ahi, __pyx_n_s_blo, __pyx_n_s_bhi, __pyx_n_s_g); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_compare, 974, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 974, __pyx_L1_error)

  /* "cydifflib.pyx":1015
 *             yield from g
 * 
 *     def _dump(self, tag, x, lo, hi):             # <<<<<<<<<<<<<<
 *         """Generate comparison results for a same-tagged range."""
 *         for i in range(lo, hi):
 */
  __pyx_tuple__126 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_tag, __pyx_n_s_x, __pyx_n_s_lo, __pyx_n_s_hi, __pyx_n_s_i); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_dump, 1015, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 1015, __pyx_L1_error)

  /* "cydifflib.pyx":1020
 *             yield '%s %s' % (tag, x[i])
 * 
 *     def _plain_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         assert alo < ahi and blo < bhi
 *         # dump the shorter block first -- reduces the burden on short-term
 */
  __pyx_tuple__127 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_a, __pyx_n_s_alo, __pyx_n_s_ahi, __pyx_n_s_b, __pyx_n_s_blo, __pyx_n_s_bhi, __pyx_n_s_first, __pyx_n_s_second, __pyx_n_s_g); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_plain_replace, 1020, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 1020, __pyx_L1_error)

  /* "cydifflib.pyx":1034
 *             yield from g
 * 
 *     def _fancy_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         r"""
 *         When replacing one block of lines with another, search the blocks
 */
  __pyx_tuple__128 = PyTuple_Pack(29, __pyx_n_s_self, __pyx_n_s_a, __pyx_n_s_alo, __pyx_n_s_ahi, __pyx_n_s_b, __pyx_n_s_blo, __pyx_n_s_bhi, __pyx_n_s_best_ratio, __pyx_n_s_cutoff, __pyx_n_s_cruncher, __pyx_n_s_eqi, __pyx_n_s_eqj, __pyx_n_s_j, __pyx_n_s_bj, __pyx_n_s_i, __pyx_n_s_ai, __pyx_n_s_best_i, __pyx_n_s_best_j, __pyx_n_s_aelt, __pyx_n_s_belt, __pyx_n_s_atags, __pyx_n_s_btags, __pyx_n_s_tag, __pyx_n_s_ai1, __pyx_n_s_ai2, __pyx_n_s_bj1, __pyx_n_s_bj2, __pyx_n_s_la, __pyx_n_s_lb); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 29, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_fancy_replace, 1034, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 1034, __pyx_L1_error)

  /* "cydifflib.pyx":1128
 *         yield from self._fancy_helper(a, best_i+1, ahi, b, best_j+1, bhi)
 * 
 *     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         g = []
 *         if alo < ahi:
 */
  __pyx_tuple__129 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_a, __pyx_n_s_alo, __pyx_n_s_ahi, __pyx_n_s_b, __pyx_n_s_blo, __pyx_n_s_bhi, __pyx_n_s_g); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__129, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_fancy_helper, 1128, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 1128, __pyx_L1_error)

  /* "cydifflib.pyx":1140
 *         yield from g
 * 
 *     def _qformat(self, aline, bline, atags, btags):             # <<<<<<<<<<<<<<
 *         r"""
 *         Format "?" output and deal with tabs.
 */
  __pyx_tuple__130 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_aline, __pyx_n_s_bline, __pyx_n_s_atags, __pyx_n_s_btags); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_qformat, 1140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 1140, __pyx_L1_error)

  /* "cydifflib.pyx":1186
 * import re
 * 
 * def IS_LINE_JUNK(line, pat=re.compile(r"\s*(?:#\s*)?$").match):             # <<<<<<<<<<<<<<
 *     r"""
 *     Return True for ignorable line: iff `line` is blank or contains a single '#'.
 */
  __pyx_tuple__131 = PyTuple_Pack(2, __pyx_n_s_line, __pyx_n_s_pat); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_IS_LINE_JUNK, 1186, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __pyx_tuple__133 = PyTuple_Pack(1, __pyx_kp_s_s_s_2); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "cydifflib.pyx":1202
 *     return pat(line) is not None
 * 
 * def IS_CHARACTER_JUNK(ch, ws=" \t"):             # <<<<<<<<<<<<<<
 *     r"""
 *     Return True for ignorable character: iff `ch` is a space or tab.
 */
  __pyx_tuple__134 = PyTuple_Pack(2, __pyx_n_s_ch, __pyx_n_s_ws); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_IS_CHARACTER_JUNK, 1202, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __pyx_tuple__136 = PyTuple_Pack(1, ((PyObject*)__pyx_kp_s__19)); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);

  /* "cydifflib.pyx":1225
 * ########################################################################
 * 
 * def _format_range_unified(start, stop):             # <<<<<<<<<<<<<<
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 */
  __pyx_tuple__137 = PyTuple_Pack(4, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_beginning, __pyx_n_s_length); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__137, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_format_range_unified, 1225, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(0, 1225, __pyx_L1_error)

  /* "cydifflib.pyx":1236
 *     return '{},{}'.format(beginning, length)
 * 
 * def unified_diff(a, b, fromfile='', tofile='', fromfiledate='',             # <<<<<<<<<<<<<<
 *                  tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */
  __pyx_tuple__139 = PyTuple_Pack(22, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_fromfile, __pyx_n_s_tofile, __pyx_n_s_fromfiledate, __pyx_n_s_tofiledate, __pyx_n_s_n, __pyx_n_s_lineterm, __pyx_n_s_started, __pyx_n_s_group, __pyx_n_s_fromdate, __pyx_n_s_todate, __pyx_n_s_first, __pyx_n_s_last, __pyx_n_s_file1_range, __pyx_n_s_file2_range, __pyx_n_s_tag, __pyx_n_s_i1, __pyx_n_s_i2, __pyx_n_s_j1, __pyx_n_s_j2, __pyx_n_s_line); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 22, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__139, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_unified_diff, 1236, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __pyx_tuple__140 = PyTuple_Pack(6, ((PyObject*)__pyx_kp_s_), ((PyObject*)__pyx_kp_s_), ((PyObject*)__pyx_kp_s_), ((PyObject*)__pyx_kp_s_), ((PyObject *)__pyx_int_3), ((PyObject*)__pyx_kp_s__17)); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);

  /* "cydifflib.pyx":1309
 * ########################################################################
 * 
 * def _format_range_context(start, stop):             # <<<<<<<<<<<<<<
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 */
  __pyx_tuple__141 = PyTuple_Pack(4, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_beginning, __pyx_n_s_length); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__141, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_format_range_context, 1309, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(0, 1309, __pyx_L1_error)

  /* "cydifflib.pyx":1321
 * 
 * # See http://www.unix.org/single_unix_specification/
 * def context_diff(a, b, fromfile='', tofile='',             # <<<<<<<<<<<<<<
 *                  fromfiledate='', tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */
  __pyx_tuple__144 = PyTuple_Pack(27, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_fromfile, __pyx_n_s_tofile, __pyx_n_s_fromfiledate, __pyx_n_s_tofiledate, __pyx_n_s_n, __pyx_n_s_lineterm, __pyx_n_s_prefix_2, __pyx_n_s_started, __pyx_n_s_group, __pyx_n_s_fromdate, __pyx_n_s_todate, __pyx_n_s_first, __pyx_n_s_last, __pyx_n_s_file1_range, __pyx_n_s_tag, __pyx_n_s_i1, __pyx_n_s_i2, __pyx_n_s__143, __pyx_n_s_line, __pyx_n_s_file2_range, __pyx_n_s_j1, __pyx_n_s_j2, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 27, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_context_diff, 1321, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __pyx_tuple__145 = PyTuple_Pack(6, ((PyObject*)__pyx_kp_s_), ((PyObject*)__pyx_kp_s_), ((PyObject*)__pyx_kp_s_), ((PyObject*)__pyx_kp_s_), ((PyObject *)__pyx_int_3), ((PyObject*)__pyx_kp_s__17)); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);

  /* "cydifflib.pyx":1397
 *                         yield prefix[tag] + line
 * 
 * def _check_types(a, b, *args):             # <<<<<<<<<<<<<<
 *     # Checking types is weird, but the alternative is garbled output when
 *     # someone passes mixed bytes and str to {unified,context}_diff(). E.g.
 */
  __pyx_tuple__146 = PyTuple_Pack(4, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_args, __pyx_n_s_arg); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_check_types, 1397, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 1397, __pyx_L1_error)

  /* "cydifflib.pyx":1414
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 * 
 * def diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'',             # <<<<<<<<<<<<<<
 *                fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n'):
 *     r"""
 */
  __pyx_tuple__148 = PyTuple_Pack(13, __pyx_n_s_dfunc, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_fromfile, __pyx_n_s_tofile, __pyx_n_s_fromfiledate, __pyx_n_s_tofiledate, __pyx_n_s_n, __pyx_n_s_lineterm, __pyx_n_s_decode, __pyx_n_s_decode, __pyx_n_s_lines, __pyx_n_s_line); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(9, 0, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_diff_bytes, 1414, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __pyx_tuple__149 = PyTuple_Pack(6, ((PyObject*)__pyx_kp_b_), ((PyObject*)__pyx_kp_b_), ((PyObject*)__pyx_kp_b_), ((PyObject*)__pyx_kp_b_), ((PyObject *)__pyx_int_3), ((PyObject*)__pyx_kp_b__17)); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "cydifflib.pyx":1444
 *         yield line.encode('ascii', 'surrogateescape')
 * 
 * def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compare `a` and `b` (lists of strings); return a `Differ`-style delta.
 */
  __pyx_tuple__150 = PyTuple_Pack(4, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_linejunk, __pyx_n_s_charjunk); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_ndiff, 1444, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(0, 1444, __pyx_L1_error)

  /* "cydifflib.pyx":1481
 *     return Differ(linejunk, charjunk).compare(a, b)
 * 
 * def _mdiff(fromlines, tolines, context=None, linejunk=None,             # <<<<<<<<<<<<<<
 *            charjunk=IS_CHARACTER_JUNK):
 *     r"""Returns generator yielding marked up from/to side by side differences.
 */
  __pyx_tuple__152 = PyTuple_Pack(22, __pyx_n_s_fromlines, __pyx_n_s_tolines, __pyx_n_s_context, __pyx_n_s_linejunk, __pyx_n_s_charjunk, __pyx_n_s_re, __pyx_n_s_change_re, __pyx_n_s_diff_lines_iterator, __pyx_n_s_make_line, __pyx_n_s_make_line, __pyx_n_s_line_iterator, __pyx_n_s_line_iterator, __pyx_n_s_line_pair_iterator, __pyx_n_s_line_pair_iterator, __pyx_n_s_line_pair_iterator_2, __pyx_n_s_lines_to_write, __pyx_n_s_index, __pyx_n_s_contextLines, __pyx_n_s_found_diff, __pyx_n_s_from_line, __pyx_n_s_to_line, __pyx_n_s_i); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 22, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_mdiff, 1481, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 1481, __pyx_L1_error)

  /* "cydifflib.pyx":1807
 *     </table>"""
 * 
 * class HtmlDiff(object):             # <<<<<<<<<<<<<<
 *     """For producing HTML side by side comparison with change highlights.
 * 
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_tuple__154 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);

  /* "cydifflib.pyx":1829
 *     _default_prefix = 0
 * 
 *     def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,             # <<<<<<<<<<<<<<
 *                  charjunk=IS_CHARACTER_JUNK):
 *         """HtmlDiff instance initializer
 */
  __pyx_tuple__155 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_tabsize, __pyx_n_s_wrapcolumn, __pyx_n_s_linejunk, __pyx_n_s_charjunk); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_init, 1829, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 1829, __pyx_L1_error)

  /* "cydifflib.pyx":1846
 *         self._charjunk = charjunk
 * 
 *     def make_file(self, fromlines, tolines, fromdesc='', todesc='',             # <<<<<<<<<<<<<<
 *                   context=False, numlines=5, *, charset='utf-8'):
 *         """Returns HTML file of side by side comparison with change highlights
 */
  __pyx_tuple__157 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_fromlines, __pyx_n_s_tolines, __pyx_n_s_fromdesc, __pyx_n_s_todesc, __pyx_n_s_context, __pyx_n_s_numlines, __pyx_n_s_charset); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(7, 0, 1, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_make_file, 1846, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __pyx_tuple__159 = PyTuple_Pack(4, ((PyObject*)__pyx_kp_s_), ((PyObject*)__pyx_kp_s_), ((PyObject *)Py_False), ((PyObject *)__pyx_int_5)); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);

  /* "cydifflib.pyx":1873
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)
 * 
 *     def _tab_newline_replace(self,fromlines,tolines):             # <<<<<<<<<<<<<<
 *         """Returns from/to line lists with tabs expanded and newlines removed.
 * 
 */
  __pyx_tuple__160 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_fromlines, __pyx_n_s_tolines, __pyx_n_s_expand_tabs, __pyx_n_s_expand_tabs, __pyx_n_s_line, __pyx_n_s_line); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(0, 1873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_tab_newline_replace, 1873, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(0, 1873, __pyx_L1_error)

  /* "cydifflib.pyx":1896
 *         return fromlines,tolines
 * 
 *     def _split_line(self,data_list,line_num,text):             # <<<<<<<<<<<<<<
 *         """Builds list of text lines by splitting text lines at wrap point
 * 
 */
  __pyx_tuple__162 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_data_list, __pyx_n_s_line_num, __pyx_n_s_text, __pyx_n_s_size, __pyx_n_s_max, __pyx_n_s_i, __pyx_n_s_n, __pyx_n_s_mark, __pyx_n_s_line1, __pyx_n_s_line2); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(0, 1896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__162, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_split_line, 1896, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) __PYX_ERR(0, 1896, __pyx_L1_error)

  /* "cydifflib.pyx":1951
 *         self._split_line(data_list,'>',line2)
 * 
 *     def _line_wrapper(self,diffs):             # <<<<<<<<<<<<<<
 *         """Returns iterator that splits (wraps) mdiff text lines"""
 * 
 */
  __pyx_tuple__164 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_diffs, __pyx_n_s_fromdata, __pyx_n_s_todata, __pyx_n_s_flag, __pyx_n_s_fromline, __pyx_n_s_fromtext, __pyx_n_s_toline, __pyx_n_s_totext, __pyx_n_s_fromlist, __pyx_n_s_tolist); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(0, 1951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__164, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_line_wrapper, 1951, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 1951, __pyx_L1_error)

  /* "cydifflib.pyx":1979
 *                 yield fromdata,todata,flag
 * 
 *     def _collect_lines(self,diffs):             # <<<<<<<<<<<<<<
 *         """Collects mdiff output into separate lists
 * 
 */
  __pyx_tuple__165 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_diffs, __pyx_n_s_fromlist, __pyx_n_s_tolist, __pyx_n_s_flaglist, __pyx_n_s_fromdata, __pyx_n_s_todata, __pyx_n_s_flag); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_collect_lines, 1979, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(0, 1979, __pyx_L1_error)

  /* "cydifflib.pyx":2000
 *         return fromlist,tolist,flaglist
 * 
 *     def _format_line(self,side,flag,linenum,text):             # <<<<<<<<<<<<<<
 *         """Returns HTML markup of "from" / "to" text lines
 * 
 */
  __pyx_tuple__167 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_side, __pyx_n_s_flag, __pyx_n_s_linenum, __pyx_n_s_text, __pyx_n_s_id); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(0, 2000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__167, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_format_line, 2000, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) __PYX_ERR(0, 2000, __pyx_L1_error)

  /* "cydifflib.pyx":2023
 *                % (id,linenum,text)
 * 
 *     def _make_prefix(self):             # <<<<<<<<<<<<<<
 *         """Create unique anchor prefixes"""
 * 
 */
  __pyx_tuple__169 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_fromprefix, __pyx_n_s_toprefix); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(0, 2023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_make_prefix, 2023, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(0, 2023, __pyx_L1_error)

  /* "cydifflib.pyx":2034
 *         self._prefix = [fromprefix,toprefix]
 * 
 *     def _convert_flags(self,fromlist,tolist,flaglist,context,numlines):             # <<<<<<<<<<<<<<
 *         """Makes list of "next" links"""
 * 
 */
  __pyx_tuple__171 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_fromlist, __pyx_n_s_tolist, __pyx_n_s_flaglist, __pyx_n_s_context, __pyx_n_s_numlines, __pyx_n_s_toprefix, __pyx_n_s_next_id, __pyx_n_s_next_href, __pyx_n_s_num_chg, __pyx_n_s_in_change, __pyx_n_s_last, __pyx_n_s_i, __pyx_n_s_flag); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_convert_flags, 2034, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(0, 2034, __pyx_L1_error)

  /* "cydifflib.pyx":2081
 *         return fromlist,tolist,flaglist,next_href,next_id
 * 
 *     def make_table(self,fromlines,tolines,fromdesc='',todesc='',context=False,             # <<<<<<<<<<<<<<
 *                    numlines=5):
 *         """Returns HTML table of side by side comparison with change highlights
 */
  __pyx_tuple__173 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_fromlines, __pyx_n_s_tolines, __pyx_n_s_fromdesc, __pyx_n_s_todesc, __pyx_n_s_context, __pyx_n_s_numlines, __pyx_n_s_context_lines, __pyx_n_s_diffs, __pyx_n_s_fromlist, __pyx_n_s_tolist, __pyx_n_s_flaglist, __pyx_n_s_next_href, __pyx_n_s_next_id, __pyx_n_s_s, __pyx_n_s_fmt, __pyx_n_s_i, __pyx_n_s_header_row, __pyx_n_s_table); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_make_table, 2081, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __pyx_tuple__175 = PyTuple_Pack(4, ((PyObject*)__pyx_kp_s_), ((PyObject*)__pyx_kp_s_), ((PyObject *)Py_False), ((PyObject *)__pyx_int_5)); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);

  /* "cydifflib.pyx":2160
 * del re
 * 
 * def restore(delta, which):             # <<<<<<<<<<<<<<
 *     r"""
 *     Generate one of the two sequences that generated a delta.
 */
  __pyx_tuple__176 = PyTuple_Pack(6, __pyx_n_s_delta, __pyx_n_s_which, __pyx_n_s_which_2, __pyx_n_s_tag, __pyx_n_s_prefixes, __pyx_n_s_line); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__176, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cydifflib_pyx, __pyx_n_s_restore, 2160, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_get.method_name = &__pyx_n_s_get;
  __pyx_umethod_PyDict_Type_setdefault.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_setdefault.method_name = &__pyx_n_s_setdefault;
  #if CYTHON_USE_MODULE_STATE
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_b_) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_kp_s_) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_n_s_AssertionError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_n_s_AttributeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_kp_u_Compare_a_and_b_lists_of_string) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_kp_u_Compare_two_sequences_of_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_kp_u_Compare_two_sequences_of_lines_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_kp_u_Compare_two_sequences_of_lines_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_kp_s_DOCTYPE_html_PUBLIC_W3C_DTD_XHT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_n_s_Differ) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_n_s_Differ___init) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_n_s_Differ__dump) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_n_s_Differ__fancy_helper) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_n_s_Differ__fancy_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_kp_u_Differ__fancy_replace_line_1034) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_s_Differ__plain_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_n_s_Differ__qformat) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_kp_u_Differ__qformat_line_1140) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_s_Differ_compare) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_kp_u_Differ_compare_line_974) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_kp_s_Differ_is_a_class_for_comparing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_kp_u_Find_longest_matching_block_in_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_kp_s_For_producing_HTML_side_by_side) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_kp_u_Format_output_and_deal_with_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_kp_u_Generate_one_of_the_two_sequenc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_s_GenericAlias) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s_HtmlDiff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_s_HtmlDiff___init) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_n_s_HtmlDiff__collect_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_HtmlDiff__convert_flags) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_HtmlDiff__format_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_HtmlDiff__line_wrapper) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_HtmlDiff__make_prefix) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_HtmlDiff__split_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_HtmlDiff__tab_newline_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_n_s_HtmlDiff__tab_newline_replace_lo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_n_s_HtmlDiff_make_file) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_s_HtmlDiff_make_table) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_n_s_IS_CHARACTER_JUNK) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_kp_u_IS_CHARACTER_JUNK_line_1202) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_n_s_IS_LINE_JUNK) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_kp_u_IS_LINE_JUNK_line_1186) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_kp_u_Isolate_change_clusters_by_elim) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_s_Match) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_kp_u_Return_True_for_ignorable_chara) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_kp_u_Return_True_for_ignorable_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_kp_u_Return_a_measure_of_the_sequence) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_kp_u_Return_list_of_5_tuples_describi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_kp_u_Return_list_of_triples_describin) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_s_SequenceMatcher) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_SequenceMatcher___reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_SequenceMatcher___setstate_cytho) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_s_SequenceMatcher_find_longest_mat) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_kp_u_SequenceMatcher_find_longest_mat_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_s_SequenceMatcher_get_grouped_opco) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_kp_u_SequenceMatcher_get_grouped_opco_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_SequenceMatcher_get_matching_blo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_kp_u_SequenceMatcher_get_matching_blo_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_s_SequenceMatcher_get_opcodes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_kp_u_SequenceMatcher_get_opcodes_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_SequenceMatcher_quick_ratio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_s_SequenceMatcher_ratio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_kp_u_SequenceMatcher_ratio_line_730) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_n_s_SequenceMatcher_real_quick_ratio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_n_s_SequenceMatcher_set_seq1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_kp_u_SequenceMatcher_set_seq1_line_28) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_SequenceMatcher_set_seq2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_kp_u_SequenceMatcher_set_seq2_line_31) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_SequenceMatcher_set_seqs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_kp_u_SequenceMatcher_set_seqs_line_27) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_kp_u_Set_the_first_sequence_to_be_com) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_kp_u_Set_the_second_sequence_to_be_co) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_kp_u_Set_the_two_sequences_to_be_comp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_n_s_StopIteration) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_kp_u_Use_SequenceMatcher_to_return_li) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_kp_u_When_replacing_one_block_of_lin) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_n_s_X) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_kp_s__11) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_kp_s__12) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_n_s__143) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_kp_s__15) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_kp_u__16) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_kp_b__17) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_kp_s__17) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_kp_u__17) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_kp_s__18) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_kp_s__19) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_kp_s__20) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_kp_s__21) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_kp_s__23) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_kp_s__24) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_kp_s__25) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_kp_s__26) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_kp_s__28) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_kp_s__29) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_kp_s__30) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_kp_s__31) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_kp_s__32) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_kp_s__39) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_kp_s__4) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_kp_s__42) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_kp_s__43) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_kp_s__44) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_kp_s__45) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_kp_s__46) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_kp_s__47) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_kp_s__49) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_kp_s__50) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_kp_s__51) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_kp_s__52) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_n_s__57) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_kp_s__58) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_kp_s__6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_kp_s__67) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_kp_s__7) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_kp_s__72) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_kp_s__75) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_kp_s__78) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_kp_s__81) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_kp_s__83) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_kp_s__85) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_n_s_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_kp_s_a_b_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_kp_s_a_href_difflib_chg__s_0_f_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_kp_s_a_href_difflib_chg__s__d_n_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_kp_s_a_href_difflib_chg__s_top_t_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_n_s_aelt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_n_s_ahi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_n_s_ahi_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_n_s_ai) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_n_s_ai1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_n_s_ai2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_n_s_aline) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_n_s_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_kp_s_all_arguments_must_be_bytes_not) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_kp_s_all_arguments_must_be_str_not_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_n_s_alo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_kp_s_amp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_n_s_answer) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[141], &__pyx_n_s_append) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[142], &__pyx_n_s_arg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[143], &__pyx_n_s_args) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[144], &__pyx_n_s_ascii) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[145], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[146], &__pyx_n_s_atags) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[147], &__pyx_n_s_autojunk) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[148], &__pyx_n_s_avail) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[149], &__pyx_n_s_availhas) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[150], &__pyx_n_s_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[151], &__pyx_n_s_begin) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[152], &__pyx_n_s_beginning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[153], &__pyx_n_s_belt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[154], &__pyx_n_s_best_i) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[155], &__pyx_n_s_best_j) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[156], &__pyx_n_s_best_ratio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[157], &__pyx_n_s_bhi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[158], &__pyx_n_s_bhi_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[159], &__pyx_n_s_bj) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[160], &__pyx_n_s_bj1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[161], &__pyx_n_s_bj2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[162], &__pyx_n_s_bline) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[163], &__pyx_n_s_blo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[164], &__pyx_n_s_btags) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[165], &__pyx_n_s_ch) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[166], &__pyx_n_s_change_re) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[167], &__pyx_n_s_charjunk) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[168], &__pyx_n_s_charjunk_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[169], &__pyx_n_s_charset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[170], &__pyx_n_s_check_types) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[171], &__pyx_n_s_class_getitem) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[172], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[173], &__pyx_n_s_close) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[174], &__pyx_n_s_codes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[175], &__pyx_n_s_collect_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[176], &__pyx_n_s_collections) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[177], &__pyx_n_s_compare) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[178], &__pyx_n_s_compile) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[179], &__pyx_n_s_contains) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[180], &__pyx_n_s_context) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[181], &__pyx_n_s_contextLines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[182], &__pyx_n_s_context_diff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[183], &__pyx_kp_u_context_diff_line_1321) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[184], &__pyx_n_s_context_diff_locals_genexpr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[185], &__pyx_n_s_context_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[186], &__pyx_n_s_convert_flags) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[187], &__pyx_n_s_count) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[188], &__pyx_n_s_cruncher) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[189], &__pyx_n_s_cutoff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[190], &__pyx_kp_s_cutoff_must_be_in_0_0_1_0_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[191], &__pyx_n_s_cydifflib) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[192], &__pyx_kp_s_cydifflib_pyx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[193], &__pyx_kp_s_d) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[194], &__pyx_n_s_data_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[195], &__pyx_n_s_data_rows) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[196], &__pyx_n_s_decode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[197], &__pyx_n_s_default_prefix) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[198], &__pyx_n_s_delete) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[199], &__pyx_n_s_delta) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[200], &__pyx_n_s_dfunc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[201], &__pyx_n_s_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[202], &__pyx_n_s_diff_bytes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[203], &__pyx_n_s_diff_bytes_locals_decode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[204], &__pyx_n_s_diff_lines_iterator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[205], &__pyx_n_s_diffs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[206], &__pyx_kp_u_disable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[207], &__pyx_n_s_doc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[208], &__pyx_n_s_dump) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[209], &__pyx_n_s_elt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[210], &__pyx_kp_u_enable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[211], &__pyx_n_s_encode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[212], &__pyx_n_s_end) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[213], &__pyx_n_s_enumerate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[214], &__pyx_n_s_eqi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[215], &__pyx_n_s_eqj) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[216], &__pyx_n_s_equal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[217], &__pyx_n_s_err) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[218], &__pyx_n_s_expand_tabs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[219], &__pyx_n_s_expandtabs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[220], &__pyx_n_s_fancy_helper) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[221], &__pyx_n_s_fancy_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[222], &__pyx_n_s_file1_range) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[223], &__pyx_n_s_file2_range) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[224], &__pyx_n_s_file_template) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[225], &__pyx_n_s_find_longest_match) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[226], &__pyx_n_s_first) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[227], &__pyx_n_s_flag) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[228], &__pyx_n_s_flaglist) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[229], &__pyx_n_s_fmt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[230], &__pyx_n_s_format) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[231], &__pyx_n_s_format_key) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[232], &__pyx_n_s_format_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[233], &__pyx_n_s_format_range_context) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[234], &__pyx_n_s_format_range_unified) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[235], &__pyx_n_s_found_diff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[236], &__pyx_n_s_fromDiff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[237], &__pyx_kp_s_from_d) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[238], &__pyx_n_s_from_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[239], &__pyx_n_s_fromdata) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[240], &__pyx_n_s_fromdate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[241], &__pyx_n_s_fromdesc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[242], &__pyx_n_s_fromfile) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[243], &__pyx_n_s_fromfiledate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[244], &__pyx_n_s_fromline) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[245], &__pyx_n_s_fromlines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[246], &__pyx_n_s_fromlist) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[247], &__pyx_n_s_fromprefix) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[248], &__pyx_n_s_fromtext) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[249], &__pyx_n_s_fullbcount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[250], &__pyx_n_s_g) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[251], &__pyx_kp_u_gc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[252], &__pyx_n_s_genexpr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[253], &__pyx_n_s_get) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[254], &__pyx_n_s_get_close_matches) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[255], &__pyx_kp_u_get_close_matches_line_799) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[256], &__pyx_n_s_get_grouped_opcodes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[257], &__pyx_n_s_get_matching_blocks) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[258], &__pyx_n_s_get_opcodes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[259], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[260], &__pyx_n_s_group) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[261], &__pyx_kp_s_gt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[262], &__pyx_n_s_header_row) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[263], &__pyx_n_s_heapq) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[264], &__pyx_n_s_hi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[265], &__pyx_n_s_i) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[266], &__pyx_n_s_i1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[267], &__pyx_n_s_i2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[268], &__pyx_n_s_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[269], &__pyx_kp_s_id_difflib_chg__s__d) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[270], &__pyx_kp_s_id_s_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[271], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[272], &__pyx_n_s_in_change) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[273], &__pyx_n_s_index) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[274], &__pyx_n_s_init) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[275], &__pyx_n_s_init_subclass) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[276], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[277], &__pyx_n_s_insert) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[278], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[279], &__pyx_kp_u_isenabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[280], &__pyx_n_s_isjunk) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[281], &__pyx_n_s_isspace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[282], &__pyx_n_s_items) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[283], &__pyx_n_s_j) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[284], &__pyx_n_s_j1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[285], &__pyx_n_s_j2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[286], &__pyx_n_s_join) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[287], &__pyx_n_s_keep_original_ws) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[288], &__pyx_n_s_keep_original_ws_locals_genexpr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[289], &__pyx_n_s_key) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[290], &__pyx_n_s_keys) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[291], &__pyx_n_s_la) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[292], &__pyx_n_s_last) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[293], &__pyx_n_s_lb) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[294], &__pyx_n_s_legend) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[295], &__pyx_n_s_legend_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[296], &__pyx_n_s_length) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[297], &__pyx_n_s_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[298], &__pyx_n_s_line1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[299], &__pyx_n_s_line2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[300], &__pyx_n_s_line_iterator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[301], &__pyx_n_s_line_iterator_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[302], &__pyx_n_s_line_num) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[303], &__pyx_n_s_line_pair_iterator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[304], &__pyx_n_s_line_pair_iterator_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[305], &__pyx_n_s_line_wrapper) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[306], &__pyx_n_s_linejunk) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[307], &__pyx_n_s_linejunk_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[308], &__pyx_n_s_linenum) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[309], &__pyx_n_s_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[310], &__pyx_kp_s_lines_to_compare_must_be_str_not) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[311], &__pyx_n_s_lines_to_write) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[312], &__pyx_n_s_lineterm) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[313], &__pyx_n_s_lo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[314], &__pyx_kp_s_lt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[315], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[316], &__pyx_n_s_make_file) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[317], &__pyx_n_s_make_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[318], &__pyx_n_s_make_prefix) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[319], &__pyx_n_s_make_table) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[320], &__pyx_n_s_map) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[321], &__pyx_n_s_mark) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[322], &__pyx_n_s_markers) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[323], &__pyx_n_s_match) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[324], &__pyx_n_s_match_object) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[325], &__pyx_n_s_matches) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[326], &__pyx_n_s_max) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[327], &__pyx_n_s_mdiff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[328], &__pyx_n_s_mdiff_locals__line_iterator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[329], &__pyx_n_s_mdiff_locals__line_pair_iterato) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[330], &__pyx_n_s_mdiff_locals__make_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[331], &__pyx_n_s_mdiff_locals__make_line_locals) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[332], &__pyx_n_s_metaclass) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[333], &__pyx_n_s_module) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[334], &__pyx_n_s_mro_entries) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[335], &__pyx_n_s_msg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[336], &__pyx_n_s_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[337], &__pyx_kp_s_n_must_be_0_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[338], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[339], &__pyx_n_s_namedtuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[340], &__pyx_n_s_namedtuple_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[341], &__pyx_kp_s_nbsp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[342], &__pyx_n_s_ndiff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[343], &__pyx_kp_u_ndiff_line_1444) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[344], &__pyx_n_s_next_href) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[345], &__pyx_n_s_next_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[346], &__pyx_n_s_nlargest) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[347], &__pyx_n_s_nlargest_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[348], &__pyx_n_s_nn) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[349], &__pyx_n_s_num_blanks_pending) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[350], &__pyx_n_s_num_blanks_to_yield) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[351], &__pyx_n_s_num_chg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[352], &__pyx_n_s_num_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[353], &__pyx_n_s_numb) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[354], &__pyx_n_s_numlines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[355], &__pyx_n_s_object) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[356], &__pyx_n_s_pat) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[357], &__pyx_n_s_plain_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[358], &__pyx_n_s_pop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[359], &__pyx_n_s_possibilities) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[360], &__pyx_n_s_prefix) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[361], &__pyx_n_s_prefix_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[362], &__pyx_n_s_prefixes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[363], &__pyx_n_s_prepare) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[364], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[365], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[366], &__pyx_n_s_qformat) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[367], &__pyx_n_s_qualname) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[368], &__pyx_n_s_quick_ratio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[369], &__pyx_n_s_range) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[370], &__pyx_n_s_ratio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[371], &__pyx_n_s_ratio_locals_genexpr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[372], &__pyx_n_s_re) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[373], &__pyx_n_s_real_quick_ratio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[374], &__pyx_n_s_record_sub_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[375], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[376], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[377], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[378], &__pyx_n_s_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[379], &__pyx_n_s_restore) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[380], &__pyx_kp_u_restore_line_2160) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[381], &__pyx_n_s_result) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[382], &__pyx_n_s_reversed) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[383], &__pyx_n_s_rstrip) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[384], &__pyx_n_s_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[385], &__pyx_kp_s_s_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[386], &__pyx_kp_s_s_s_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[387], &__pyx_n_s_score) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[388], &__pyx_n_s_second) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[389], &__pyx_n_s_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[390], &__pyx_kp_s_self_a__self_b__cannot_be_conver) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[391], &__pyx_n_s_send) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[392], &__pyx_n_s_set_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[393], &__pyx_n_s_set_seq1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[394], &__pyx_n_s_set_seq2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[395], &__pyx_n_s_set_seqs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[396], &__pyx_n_s_setdefault) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[397], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[398], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[399], &__pyx_n_s_side) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[400], &__pyx_n_s_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[401], &__pyx_n_s_span) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[402], &__pyx_kp_s_span_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[403], &__pyx_kp_s_span_class_diff_add) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[404], &__pyx_kp_s_span_class_diff_chg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[405], &__pyx_kp_s_span_class_diff_sub) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[406], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[407], &__pyx_n_s_split_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[408], &__pyx_n_s_start) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[409], &__pyx_n_s_started) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[410], &__pyx_n_s_startswith) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[411], &__pyx_n_s_stop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[412], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[413], &__pyx_n_s_styles) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[414], &__pyx_n_s_styles_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[415], &__pyx_n_s_sub) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[416], &__pyx_n_s_sub_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[417], &__pyx_n_s_sum) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[418], &__pyx_n_s_super) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[419], &__pyx_n_s_surrogateescape) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[420], &__pyx_n_s_tab_newline_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[421], &__pyx_n_s_table) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[422], &__pyx_kp_s_table_class_diff_id_difflib_chg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[423], &__pyx_kp_s_table_class_diff_summary_Legend) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[424], &__pyx_kp_s_table_diff_font_family_Courier) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[425], &__pyx_n_s_table_template) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[426], &__pyx_n_s_tabsize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[427], &__pyx_n_s_tabsize_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[428], &__pyx_n_s_tag) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[429], &__pyx_n_s_tag_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[430], &__pyx_kp_s_tbody_tbody) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[431], &__pyx_kp_s_td_class_diff_header_s_s_td_td) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[432], &__pyx_kp_s_td_class_diff_next_s_td_s_tr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[433], &__pyx_kp_s_td_td_td_nbsp_Empty_File_nbsp_t) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[434], &__pyx_kp_s_td_td_td_nbsp_No_Differences_Fo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[435], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[436], &__pyx_n_s_text) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[437], &__pyx_kp_s_th_class_diff_next_br_th) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[438], &__pyx_kp_s_th_colspan_2_class_diff_header) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[439], &__pyx_kp_s_thead_tr_s_s_s_s_tr_thead) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[440], &__pyx_n_s_throw) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[441], &__pyx_kp_s_to_d) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[442], &__pyx_n_s_to_diff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[443], &__pyx_n_s_to_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[444], &__pyx_n_s_todata) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[445], &__pyx_n_s_todate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[446], &__pyx_n_s_todesc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[447], &__pyx_n_s_tofile) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[448], &__pyx_n_s_tofiledate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[449], &__pyx_n_s_toline) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[450], &__pyx_n_s_tolines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[451], &__pyx_n_s_tolist) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[452], &__pyx_n_s_toprefix) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[453], &__pyx_n_s_totext) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[454], &__pyx_kp_s_tr_td_class_diff_next_s_s_td_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[455], &__pyx_n_s_types) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[456], &__pyx_n_s_unified_diff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[457], &__pyx_kp_u_unified_diff_line_1236) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[458], &__pyx_kp_s_unknown_delta_choice_must_be_1_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[459], &__pyx_kp_s_unknown_tag_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[460], &__pyx_kp_s_utf_8) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[461], &__pyx_n_s_which) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[462], &__pyx_n_s_which_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[463], &__pyx_n_s_word) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[464], &__pyx_n_s_wrapcolumn) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[465], &__pyx_n_s_wrapcolumn_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[466], &__pyx_n_s_ws) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[467], &__pyx_n_s_x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[468], &__pyx_n_s_xmlcharrefreplace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[469], &__pyx_n_s_zip) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_USE_MODULE_STATE
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_6 = PyFloat_FromDouble(0.6); if (unlikely(!__pyx_float_0_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_74 = PyFloat_FromDouble(0.74); if (unlikely(!__pyx_float_0_74)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_9cydifflib_SequenceMatcher = &__pyx_vtable_9cydifflib_SequenceMatcher;
  __pyx_vtable_9cydifflib_SequenceMatcher.set_seqs = (PyObject *(*)(struct __pyx_obj_9cydifflib_SequenceMatcher *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_9cydifflib_15SequenceMatcher_set_seqs;
  __pyx_vtable_9cydifflib_SequenceMatcher.set_seq1 = (PyObject *(*)(struct __pyx_obj_9cydifflib_SequenceMatcher *, PyObject *, int __pyx_skip_dispatch))__pyx_f_9cydifflib_15SequenceMatcher_set_seq1;
  __pyx_vtable_9cydifflib_SequenceMatcher.set_seq2 = (PyObject *(*)(struct __pyx_obj_9cydifflib_SequenceMatcher *, PyObject *, int __pyx_skip_dispatch))__pyx_f_9cydifflib_15SequenceMatcher_set_seq2;
  __pyx_vtable_9cydifflib_SequenceMatcher._SequenceMatcher__chain_b = (PyObject *(*)(struct __pyx_obj_9cydifflib_SequenceMatcher *))__pyx_f_9cydifflib_15SequenceMatcher__SequenceMatcher__chain_b;
  __pyx_vtable_9cydifflib_SequenceMatcher._SequenceMatcher__find_longest_match = (__pyx_t_9cydifflib_CMatch (*)(struct __pyx_obj_9cydifflib_SequenceMatcher *, Py_ssize_t, Py_ssize_t, Py_ssize_t, Py_ssize_t))__pyx_f_9cydifflib_15SequenceMatcher__SequenceMatcher__find_longest_match;
  __pyx_vtable_9cydifflib_SequenceMatcher.get_matching_blocks = (PyObject *(*)(struct __pyx_obj_9cydifflib_SequenceMatcher *, int __pyx_skip_dispatch))__pyx_f_9cydifflib_15SequenceMatcher_get_matching_blocks;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib_SequenceMatcher = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib_SequenceMatcher_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib_SequenceMatcher)) __PYX_ERR(0, 85, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib_SequenceMatcher_spec, __pyx_ptype_9cydifflib_SequenceMatcher) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib_SequenceMatcher = &__pyx_type_9cydifflib_SequenceMatcher;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib_SequenceMatcher) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib_SequenceMatcher->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib_SequenceMatcher->tp_dictoffset && __pyx_ptype_9cydifflib_SequenceMatcher->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib_SequenceMatcher->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 85, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_9cydifflib_15SequenceMatcher___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9cydifflib_15SequenceMatcher___init__.doc = __pyx_doc_9cydifflib_15SequenceMatcher___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9cydifflib_15SequenceMatcher___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_9cydifflib_SequenceMatcher, __pyx_vtabptr_9cydifflib_SequenceMatcher) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_9cydifflib_SequenceMatcher) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SequenceMatcher, (PyObject *) __pyx_ptype_9cydifflib_SequenceMatcher) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9cydifflib_SequenceMatcher) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes)) __PYX_ERR(0, 680, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes_spec, __pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes) < 0) __PYX_ERR(0, 680, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes = &__pyx_type_9cydifflib___pyx_scope_struct__get_grouped_opcodes;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes) < 0) __PYX_ERR(0, 680, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct__get_grouped_opcodes->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_1_ratio_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio)) __PYX_ERR(0, 730, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_1_ratio_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio) < 0) __PYX_ERR(0, 730, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio = &__pyx_type_9cydifflib___pyx_scope_struct_1_ratio;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio) < 0) __PYX_ERR(0, 730, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_1_ratio->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_2_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr)) __PYX_ERR(0, 752, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_2_genexpr_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 752, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr = &__pyx_type_9cydifflib___pyx_scope_struct_2_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 752, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_2_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws)) __PYX_ERR(0, 848, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws = &__pyx_type_9cydifflib___pyx_scope_struct_3__keep_original_ws;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_3__keep_original_ws->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_4_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr)) __PYX_ERR(0, 851, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_4_genexpr_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr = &__pyx_type_9cydifflib___pyx_scope_struct_4_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_4_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_5_compare = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_5_compare_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_5_compare)) __PYX_ERR(0, 974, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_5_compare_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_5_compare) < 0) __PYX_ERR(0, 974, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_5_compare = &__pyx_type_9cydifflib___pyx_scope_struct_5_compare;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_5_compare) < 0) __PYX_ERR(0, 974, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_5_compare->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_5_compare->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_5_compare->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_5_compare->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_6__dump = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_6__dump_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_6__dump)) __PYX_ERR(0, 1015, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_6__dump_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_6__dump) < 0) __PYX_ERR(0, 1015, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_6__dump = &__pyx_type_9cydifflib___pyx_scope_struct_6__dump;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_6__dump) < 0) __PYX_ERR(0, 1015, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_6__dump->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_6__dump->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_6__dump->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_6__dump->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace)) __PYX_ERR(0, 1020, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace) < 0) __PYX_ERR(0, 1020, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace = &__pyx_type_9cydifflib___pyx_scope_struct_7__plain_replace;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace) < 0) __PYX_ERR(0, 1020, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_7__plain_replace->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace)) __PYX_ERR(0, 1034, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace = &__pyx_type_9cydifflib___pyx_scope_struct_8__fancy_replace;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_8__fancy_replace->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper)) __PYX_ERR(0, 1128, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper) < 0) __PYX_ERR(0, 1128, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper = &__pyx_type_9cydifflib___pyx_scope_struct_9__fancy_helper;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper) < 0) __PYX_ERR(0, 1128, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_9__fancy_helper->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_10__qformat_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat)) __PYX_ERR(0, 1140, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_10__qformat_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat) < 0) __PYX_ERR(0, 1140, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat = &__pyx_type_9cydifflib___pyx_scope_struct_10__qformat;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat) < 0) __PYX_ERR(0, 1140, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_10__qformat->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff)) __PYX_ERR(0, 1236, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff) < 0) __PYX_ERR(0, 1236, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff = &__pyx_type_9cydifflib___pyx_scope_struct_11_unified_diff;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff) < 0) __PYX_ERR(0, 1236, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_11_unified_diff->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_12_context_diff_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff)) __PYX_ERR(0, 1321, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_12_context_diff_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff) < 0) __PYX_ERR(0, 1321, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff = &__pyx_type_9cydifflib___pyx_scope_struct_12_context_diff;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff) < 0) __PYX_ERR(0, 1321, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_12_context_diff->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_13_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr)) __PYX_ERR(0, 1382, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_13_genexpr_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr = &__pyx_type_9cydifflib___pyx_scope_struct_13_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_13_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_14_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr)) __PYX_ERR(0, 1391, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_14_genexpr_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(0, 1391, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr = &__pyx_type_9cydifflib___pyx_scope_struct_14_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(0, 1391, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_14_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes)) __PYX_ERR(0, 1414, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes = &__pyx_type_9cydifflib___pyx_scope_struct_15_diff_bytes;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_15_diff_bytes->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_16__mdiff_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff)) __PYX_ERR(0, 1481, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_16__mdiff_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff) < 0) __PYX_ERR(0, 1481, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff = &__pyx_type_9cydifflib___pyx_scope_struct_16__mdiff;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff) < 0) __PYX_ERR(0, 1481, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_16__mdiff->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator)) __PYX_ERR(0, 1579, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator) < 0) __PYX_ERR(0, 1579, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator = &__pyx_type_9cydifflib___pyx_scope_struct_17__line_iterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator) < 0) __PYX_ERR(0, 1579, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_17__line_iterator->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator)) __PYX_ERR(0, 1667, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator) < 0) __PYX_ERR(0, 1667, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator = &__pyx_type_9cydifflib___pyx_scope_struct_18__line_pair_iterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator) < 0) __PYX_ERR(0, 1667, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_18__line_pair_iterator->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace)) __PYX_ERR(0, 1873, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace) < 0) __PYX_ERR(0, 1873, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace = &__pyx_type_9cydifflib___pyx_scope_struct_19__tab_newline_replace;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace) < 0) __PYX_ERR(0, 1873, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_19__tab_newline_replace->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper)) __PYX_ERR(0, 1951, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper) < 0) __PYX_ERR(0, 1951, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper = &__pyx_type_9cydifflib___pyx_scope_struct_20__line_wrapper;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper) < 0) __PYX_ERR(0, 1951, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_20__line_wrapper->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9cydifflib___pyx_scope_struct_21_restore = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9cydifflib___pyx_scope_struct_21_restore_spec, NULL); if (unlikely(!__pyx_ptype_9cydifflib___pyx_scope_struct_21_restore)) __PYX_ERR(0, 2160, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9cydifflib___pyx_scope_struct_21_restore_spec, __pyx_ptype_9cydifflib___pyx_scope_struct_21_restore) < 0) __PYX_ERR(0, 2160, __pyx_L1_error)
  #else
  __pyx_ptype_9cydifflib___pyx_scope_struct_21_restore = &__pyx_type_9cydifflib___pyx_scope_struct_21_restore;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9cydifflib___pyx_scope_struct_21_restore) < 0) __PYX_ERR(0, 2160, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9cydifflib___pyx_scope_struct_21_restore->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9cydifflib___pyx_scope_struct_21_restore->tp_dictoffset && __pyx_ptype_9cydifflib___pyx_scope_struct_21_restore->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9cydifflib___pyx_scope_struct_21_restore->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cydifflib(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cydifflib},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "cydifflib",
      __pyx_k_Module_difflib_helpers_for_comp, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcydifflib(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcydifflib(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cydifflib(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cydifflib(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cydifflib(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cydifflib' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cydifflib", __pyx_methods, __pyx_k_Module_difflib_helpers_for_comp, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyState_AddModule(__pyx_t_1, &__pyx_moduledef) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cydifflib(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cydifflib) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cydifflib")) {
      if (unlikely((PyDict_SetItemString(modules, "cydifflib", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cydifflib.pyx":29
 * """
 * 
 * __all__ = ['get_close_matches', 'ndiff', 'restore', 'SequenceMatcher',             # <<<<<<<<<<<<<<
 *            'Differ','IS_CHARACTER_JUNK', 'IS_LINE_JUNK', 'context_diff',
 *            'unified_diff', 'diff_bytes', 'HtmlDiff', 'Match']
 */
  __pyx_t_1 = PyList_New(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_get_close_matches);
  __Pyx_GIVEREF(__pyx_n_s_get_close_matches);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_get_close_matches);
  __Pyx_INCREF(__pyx_n_s_ndiff);
  __Pyx_GIVEREF(__pyx_n_s_ndiff);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ndiff);
  __Pyx_INCREF(__pyx_n_s_restore);
  __Pyx_GIVEREF(__pyx_n_s_restore);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_restore);
  __Pyx_INCREF(__pyx_n_s_SequenceMatcher);
  __Pyx_GIVEREF(__pyx_n_s_SequenceMatcher);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_SequenceMatcher);
  __Pyx_INCREF(__pyx_n_s_Differ);
  __Pyx_GIVEREF(__pyx_n_s_Differ);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_Differ);
  __Pyx_INCREF(__pyx_n_s_IS_CHARACTER_JUNK);
  __Pyx_GIVEREF(__pyx_n_s_IS_CHARACTER_JUNK);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_IS_CHARACTER_JUNK);
  __Pyx_INCREF(__pyx_n_s_IS_LINE_JUNK);
  __Pyx_GIVEREF(__pyx_n_s_IS_LINE_JUNK);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_IS_LINE_JUNK);
  __Pyx_INCREF(__pyx_n_s_context_diff);
  __Pyx_GIVEREF(__pyx_n_s_context_diff);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_context_diff);
  __Pyx_INCREF(__pyx_n_s_unified_diff);
  __Pyx_GIVEREF(__pyx_n_s_unified_diff);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_unified_diff);
  __Pyx_INCREF(__pyx_n_s_diff_bytes);
  __Pyx_GIVEREF(__pyx_n_s_diff_bytes);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_diff_bytes);
  __Pyx_INCREF(__pyx_n_s_HtmlDiff);
  __Pyx_GIVEREF(__pyx_n_s_HtmlDiff);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_HtmlDiff);
  __Pyx_INCREF(__pyx_n_s_Match);
  __Pyx_GIVEREF(__pyx_n_s_Match);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_Match);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":33
 *            'unified_diff', 'diff_bytes', 'HtmlDiff', 'Match']
 * 
 * from heapq import nlargest as _nlargest             # <<<<<<<<<<<<<<
 * from collections import namedtuple as _namedtuple
 * from types import GenericAlias
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_nlargest_2);
  __Pyx_GIVEREF(__pyx_n_s_nlargest_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_nlargest_2);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_heapq, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_nlargest_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_nlargest, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":34
 * 
 * from heapq import nlargest as _nlargest
 * from collections import namedtuple as _namedtuple             # <<<<<<<<<<<<<<
 * from types import GenericAlias
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_namedtuple);
  __Pyx_GIVEREF(__pyx_n_s_namedtuple);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_namedtuple);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_namedtuple_2, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":35
 * from heapq import nlargest as _nlargest
 * from collections import namedtuple as _namedtuple
 * from types import GenericAlias             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_GenericAlias);
  __Pyx_GIVEREF(__pyx_n_s_GenericAlias);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_GenericAlias);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_types, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_GenericAlias); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GenericAlias, __pyx_t_1) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":43
 * from libcpp.unordered_map cimport unordered_map
 * 
 * Match = _namedtuple('Match', 'a b size')             # <<<<<<<<<<<<<<
 * """
 * cdef class Match:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_namedtuple_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Match, __pyx_t_1) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":274
 *         self.set_seqs(a, b)
 * 
 *     cpdef set_seqs(self, a, b):             # <<<<<<<<<<<<<<
 *         """Set the two sequences to be compared.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_3set_seqs, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_set_seqs, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_set_seqs, __pyx_t_1) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":286
 *         self.set_seq2(b)
 * 
 *     cpdef set_seq1(self, a):             # <<<<<<<<<<<<<<
 *         """Set the first sequence to be compared.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_5set_seq1, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_set_seq1, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_set_seq1, __pyx_t_1) < 0) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":313
 *         self.la = len(a)
 * 
 *     cpdef set_seq2(self, b):             # <<<<<<<<<<<<<<
 *         """Set the second sequence to be compared.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_7set_seq2, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_set_seq2, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_set_seq2, __pyx_t_1) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":491
 *         return CMatch(besti, bestj, bestsize)
 * 
 *     def find_longest_match(self, alo=0, ahi=None, blo=0, bhi=None):             # <<<<<<<<<<<<<<
 *         """Find longest matching block in a[alo:ahi] and b[blo:bhi].
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_9find_longest_match, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_find_longest_mat, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__100);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_find_longest_match, __pyx_t_1) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":542
 *         return Match(match.a, match.b, match.size)
 * 
 *     cpdef get_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """Return list of triples describing matching subsequences.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_11get_matching_blocks, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_get_matching_blo, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_get_matching_blocks, __pyx_t_1) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":625
 *         return self.matching_blocks
 * 
 *     def get_opcodes(self):             # <<<<<<<<<<<<<<
 *         """Return list of 5-tuples describing how to turn a into b.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_13get_opcodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_get_opcodes, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_get_opcodes, __pyx_t_1) < 0) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":680
 *         return answer
 * 
 *     def get_grouped_opcodes(self, n=3):             # <<<<<<<<<<<<<<
 *         """ Isolate change clusters by eliminating ranges with no changes.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_15get_grouped_opcodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_get_grouped_opco, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__106);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_get_grouped_opcodes, __pyx_t_1) < 0) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":730
 *             yield group
 * 
 *     def ratio(self):             # <<<<<<<<<<<<<<
 *         """Return a measure of the sequences' similarity (float in [0,1]).
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_18ratio, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_ratio, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_ratio, __pyx_t_1) < 0) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":755
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 *     def quick_ratio(self):             # <<<<<<<<<<<<<<
 *         """Return an upper bound on ratio() relatively quickly.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_20quick_ratio, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_quick_ratio, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_quick_ratio, __pyx_t_1) < 0) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":784
 *         return _calculate_ratio(matches, len(self.a) + len(self.b))
 * 
 *     def real_quick_ratio(self):             # <<<<<<<<<<<<<<
 *         """Return an upper bound on ratio() very quickly.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_22real_quick_ratio, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher_real_quick_ratio, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_real_quick_ratio, __pyx_t_1) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "cydifflib.pyx":796
 *         return _calculate_ratio(min(la, lb), la + lb)
 * 
 *     __class_getitem__ = classmethod(GenericAlias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_GenericAlias); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9cydifflib_SequenceMatcher->tp_dict, __pyx_n_s_class_getitem, __pyx_t_2) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9cydifflib_SequenceMatcher);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_24__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher___reduce_cython, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.a_,self.b_ cannot be converted to a Python object for pickling"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_15SequenceMatcher_26__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SequenceMatcher___setstate_cytho, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":799
 * 
 * 
 * def get_close_matches(word, possibilities, n=3, cutoff=0.6):             # <<<<<<<<<<<<<<
 *     """Use SequenceMatcher to return list of the best "good enough" matches.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_1get_close_matches, 0, __pyx_n_s_get_close_matches, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__119);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_close_matches, __pyx_t_2) < 0) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":848
 * 
 * 
 * def _keep_original_ws(s, tag_s):             # <<<<<<<<<<<<<<
 *     """Replace whitespace with the original whitespace characters in `s`"""
 *     return ''.join(
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_3_keep_original_ws, 0, __pyx_n_s_keep_original_ws, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keep_original_ws, __pyx_t_2) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":857
 * 
 * 
 * class Differ:             # <<<<<<<<<<<<<<
 *     r"""
 *     Differ is a class for comparing sequences of lines of text, and
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Differ, __pyx_n_s_Differ, (PyObject *) NULL, __pyx_n_s_cydifflib, __pyx_kp_s_Differ_is_a_class_for_comparing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cydifflib.pyx":951
 *     """
 * 
 *     def __init__(self, linejunk=None, charjunk=None):             # <<<<<<<<<<<<<<
 *         """
 *         Construct a text differencer, with optional filters.
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6Differ_1__init__, 0, __pyx_n_s_Differ___init, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__124);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":974
 *         self.charjunk = charjunk
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         r"""
 *         Compare two sequences of lines; generate the resulting delta.
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6Differ_3compare, 0, __pyx_n_s_Differ_compare, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_compare, __pyx_t_1) < 0) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":1015
 *             yield from g
 * 
 *     def _dump(self, tag, x, lo, hi):             # <<<<<<<<<<<<<<
 *         """Generate comparison results for a same-tagged range."""
 *         for i in range(lo, hi):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6Differ_6_dump, 0, __pyx_n_s_Differ__dump, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_dump, __pyx_t_1) < 0) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":1020
 *             yield '%s %s' % (tag, x[i])
 * 
 *     def _plain_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         assert alo < ahi and blo < bhi
 *         # dump the shorter block first -- reduces the burden on short-term
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6Differ_9_plain_replace, 0, __pyx_n_s_Differ__plain_replace, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_plain_replace, __pyx_t_1) < 0) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":1034
 *             yield from g
 * 
 *     def _fancy_replace(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         r"""
 *         When replacing one block of lines with another, search the blocks
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6Differ_12_fancy_replace, 0, __pyx_n_s_Differ__fancy_replace, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_fancy_replace, __pyx_t_1) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":1128
 *         yield from self._fancy_helper(a, best_i+1, ahi, b, best_j+1, bhi)
 * 
 *     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):             # <<<<<<<<<<<<<<
 *         g = []
 *         if alo < ahi:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6Differ_15_fancy_helper, 0, __pyx_n_s_Differ__fancy_helper, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_fancy_helper, __pyx_t_1) < 0) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":1140
 *         yield from g
 * 
 *     def _qformat(self, aline, bline, atags, btags):             # <<<<<<<<<<<<<<
 *         r"""
 *         Format "?" output and deal with tabs.
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_6Differ_18_qformat, 0, __pyx_n_s_Differ__qformat, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_qformat, __pyx_t_1) < 0) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cydifflib.pyx":857
 * 
 * 
 * class Differ:             # <<<<<<<<<<<<<<
 *     r"""
 *     Differ is a class for comparing sequences of lines of text, and
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&PyType_Type), __pyx_n_s_Differ, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Differ, __pyx_t_1) < 0) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1184
 * # was inserted after "private".  I can live with that <wink>.
 * 
 * import re             # <<<<<<<<<<<<<<
 * 
 * def IS_LINE_JUNK(line, pat=re.compile(r"\s*(?:#\s*)?$").match):
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_re, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_2) < 0) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1186
 * import re
 * 
 * def IS_LINE_JUNK(line, pat=re.compile(r"\s*(?:#\s*)?$").match):             # <<<<<<<<<<<<<<
 *     r"""
 *     Return True for ignorable line: iff `line` is blank or contains a single '#'.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_5IS_LINE_JUNK, 0, __pyx_n_s_IS_LINE_JUNK, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_2, sizeof(__pyx_defaults), 1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_compile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__133, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_match); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_t_2)->__pyx_arg_pat = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_2, __pyx_pf_9cydifflib_31__defaults__);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IS_LINE_JUNK, __pyx_t_2) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1202
 *     return pat(line) is not None
 * 
 * def IS_CHARACTER_JUNK(ch, ws=" \t"):             # <<<<<<<<<<<<<<
 *     r"""
 *     Return True for ignorable character: iff `ch` is a space or tab.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_7IS_CHARACTER_JUNK, 0, __pyx_n_s_IS_CHARACTER_JUNK, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__136);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IS_CHARACTER_JUNK, __pyx_t_2) < 0) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1225
 * ########################################################################
 * 
 * def _format_range_unified(start, stop):             # <<<<<<<<<<<<<<
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_9_format_range_unified, 0, __pyx_n_s_format_range_unified, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__138)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_format_range_unified, __pyx_t_2) < 0) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1236
 *     return '{},{}'.format(beginning, length)
 * 
 * def unified_diff(a, b, fromfile='', tofile='', fromfiledate='',             # <<<<<<<<<<<<<<
 *                  tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_11unified_diff, 0, __pyx_n_s_unified_diff, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__140);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unified_diff, __pyx_t_2) < 0) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1309
 * ########################################################################
 * 
 * def _format_range_context(start, stop):             # <<<<<<<<<<<<<<
 *     'Convert range to the "ed" format'
 *     # Per the diff spec at http://www.unix.org/single_unix_specification/
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_14_format_range_context, 0, __pyx_n_s_format_range_context, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__142)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_format_range_context, __pyx_t_2) < 0) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1321
 * 
 * # See http://www.unix.org/single_unix_specification/
 * def context_diff(a, b, fromfile='', tofile='',             # <<<<<<<<<<<<<<
 *                  fromfiledate='', tofiledate='', n=3, lineterm='\n'):
 *     r"""
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_16context_diff, 0, __pyx_n_s_context_diff, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__145);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_context_diff, __pyx_t_2) < 0) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1397
 *                         yield prefix[tag] + line
 * 
 * def _check_types(a, b, *args):             # <<<<<<<<<<<<<<
 *     # Checking types is weird, but the alternative is garbled output when
 *     # someone passes mixed bytes and str to {unified,context}_diff(). E.g.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_19_check_types, 0, __pyx_n_s_check_types, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_types, __pyx_t_2) < 0) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1414
 *             raise TypeError('all arguments must be str, not: %r' % (arg,))
 * 
 * def diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'',             # <<<<<<<<<<<<<<
 *                fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n'):
 *     r"""
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_21diff_bytes, 0, __pyx_n_s_diff_bytes, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__149);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_diff_bytes, __pyx_t_2) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1444
 *         yield line.encode('ascii', 'surrogateescape')
 * 
 * def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compare `a` and `b` (lists of strings); return a `Differ`-style delta.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_24ndiff, 0, __pyx_n_s_ndiff, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_2, sizeof(__pyx_defaults1), 1)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_IS_CHARACTER_JUNK); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_t_2)->__pyx_arg_charjunk = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_2, __pyx_pf_9cydifflib_33__defaults__);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ndiff, __pyx_t_2) < 0) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1481
 *     return Differ(linejunk, charjunk).compare(a, b)
 * 
 * def _mdiff(fromlines, tolines, context=None, linejunk=None,             # <<<<<<<<<<<<<<
 *            charjunk=IS_CHARACTER_JUNK):
 *     r"""Returns generator yielding marked up from/to side by side differences.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_26_mdiff, 0, __pyx_n_s_mdiff, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_2, sizeof(__pyx_defaults2), 1)) __PYX_ERR(0, 1481, __pyx_L1_error)

  /* "cydifflib.pyx":1482
 * 
 * def _mdiff(fromlines, tolines, context=None, linejunk=None,
 *            charjunk=IS_CHARACTER_JUNK):             # <<<<<<<<<<<<<<
 *     r"""Returns generator yielding marked up from/to side by side differences.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_IS_CHARACTER_JUNK); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_2)->__pyx_arg_charjunk = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_2, __pyx_pf_9cydifflib_35__defaults__);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mdiff, __pyx_t_2) < 0) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1751
 * 
 * 
 * _file_template = """             # <<<<<<<<<<<<<<
 * <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 *           "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_file_template, __pyx_kp_s_DOCTYPE_html_PUBLIC_W3C_DTD_XHT) < 0) __PYX_ERR(0, 1751, __pyx_L1_error)

  /* "cydifflib.pyx":1771
 * </html>"""
 * 
 * _styles = """             # <<<<<<<<<<<<<<
 *         table.diff {font-family:Courier; border:medium;}
 *         .diff_header {background-color:#e0e0e0}
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_styles_2, __pyx_kp_s_table_diff_font_family_Courier) < 0) __PYX_ERR(0, 1771, __pyx_L1_error)

  /* "cydifflib.pyx":1780
 *         .diff_sub {background-color:#ffaaaa}"""
 * 
 * _table_template = """             # <<<<<<<<<<<<<<
 *     <table class="diff" id="difflib_chg_%(prefix)s_top"
 *            cellspacing="0" cellpadding="0" rules="groups" >
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_table_template, __pyx_kp_s_table_class_diff_id_difflib_chg) < 0) __PYX_ERR(0, 1780, __pyx_L1_error)

  /* "cydifflib.pyx":1790
 *     </table>"""
 * 
 * _legend = """             # <<<<<<<<<<<<<<
 *     <table class="diff" summary="Legends">
 *         <tr> <th colspan="2"> Legends </th> </tr>
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_legend_2, __pyx_kp_s_table_class_diff_summary_Legend) < 0) __PYX_ERR(0, 1790, __pyx_L1_error)

  /* "cydifflib.pyx":1807
 *     </table>"""
 * 
 * class HtmlDiff(object):             # <<<<<<<<<<<<<<
 *     """For producing HTML side by side comparison with change highlights.
 * 
 */
  __pyx_t_2 = __Pyx_PEP560_update_bases(__pyx_tuple__154); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_HtmlDiff, __pyx_n_s_HtmlDiff, (PyObject *) NULL, __pyx_n_s_cydifflib, __pyx_kp_s_For_producing_HTML_side_by_side); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__pyx_t_2 != __pyx_tuple__154) {
    if (unlikely((PyDict_SetItemString(__pyx_t_1, "__orig_bases__", __pyx_tuple__154) < 0))) __PYX_ERR(0, 1807, __pyx_L1_error)
  }

  /* "cydifflib.pyx":1823
 *     """
 * 
 *     _file_template = _file_template             # <<<<<<<<<<<<<<
 *     _styles = _styles
 *     _table_template = _table_template
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_file_template);
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_file_template, __pyx_t_4) < 0) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cydifflib.pyx":1824
 * 
 *     _file_template = _file_template
 *     _styles = _styles             # <<<<<<<<<<<<<<
 *     _table_template = _table_template
 *     _legend = _legend
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_styles_2);
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_styles_2, __pyx_t_4) < 0) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cydifflib.pyx":1825
 *     _file_template = _file_template
 *     _styles = _styles
 *     _table_template = _table_template             # <<<<<<<<<<<<<<
 *     _legend = _legend
 *     _default_prefix = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_table_template);
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_table_template, __pyx_t_4) < 0) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cydifflib.pyx":1826
 *     _styles = _styles
 *     _table_template = _table_template
 *     _legend = _legend             # <<<<<<<<<<<<<<
 *     _default_prefix = 0
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_legend_2);
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_legend_2, __pyx_t_4) < 0) __PYX_ERR(0, 1826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cydifflib.pyx":1827
 *     _table_template = _table_template
 *     _legend = _legend
 *     _default_prefix = 0             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,
 */
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_default_prefix, __pyx_int_0) < 0) __PYX_ERR(0, 1827, __pyx_L1_error)

  /* "cydifflib.pyx":1829
 *     _default_prefix = 0
 * 
 *     def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,             # <<<<<<<<<<<<<<
 *                  charjunk=IS_CHARACTER_JUNK):
 *         """HtmlDiff instance initializer
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_1__init__, 0, __pyx_n_s_HtmlDiff___init, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_4, sizeof(__pyx_defaults3), 1)) __PYX_ERR(0, 1829, __pyx_L1_error)

  /* "cydifflib.pyx":1830
 * 
 *     def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,
 *                  charjunk=IS_CHARACTER_JUNK):             # <<<<<<<<<<<<<<
 *         """HtmlDiff instance initializer
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_IS_CHARACTER_JUNK); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_4)->__pyx_arg_charjunk = __pyx_t_5;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_4, __pyx_pf_9cydifflib_37__defaults__);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cydifflib.pyx":1846
 *         self._charjunk = charjunk
 * 
 *     def make_file(self, fromlines, tolines, fromdesc='', todesc='',             # <<<<<<<<<<<<<<
 *                   context=False, numlines=5, *, charset='utf-8'):
 *         """Returns HTML file of side by side comparison with change highlights
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_charset, ((PyObject*)__pyx_kp_s_utf_8)) < 0) __PYX_ERR(0, 1846, __pyx_L1_error)
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_3make_file, 0, __pyx_n_s_HtmlDiff_make_file, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__159);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_5, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_make_file, __pyx_t_5) < 0) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":1873
 *         )).encode(charset, 'xmlcharrefreplace').decode(charset)
 * 
 *     def _tab_newline_replace(self,fromlines,tolines):             # <<<<<<<<<<<<<<
 *         """Returns from/to line lists with tabs expanded and newlines removed.
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_5_tab_newline_replace, 0, __pyx_n_s_HtmlDiff__tab_newline_replace, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__161)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_tab_newline_replace, __pyx_t_5) < 0) __PYX_ERR(0, 1873, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":1896
 *         return fromlines,tolines
 * 
 *     def _split_line(self,data_list,line_num,text):             # <<<<<<<<<<<<<<
 *         """Builds list of text lines by splitting text lines at wrap point
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_7_split_line, 0, __pyx_n_s_HtmlDiff__split_line, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__163)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_split_line, __pyx_t_5) < 0) __PYX_ERR(0, 1896, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":1951
 *         self._split_line(data_list,'>',line2)
 * 
 *     def _line_wrapper(self,diffs):             # <<<<<<<<<<<<<<
 *         """Returns iterator that splits (wraps) mdiff text lines"""
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_9_line_wrapper, 0, __pyx_n_s_HtmlDiff__line_wrapper, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_line_wrapper, __pyx_t_5) < 0) __PYX_ERR(0, 1951, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":1979
 *                 yield fromdata,todata,flag
 * 
 *     def _collect_lines(self,diffs):             # <<<<<<<<<<<<<<
 *         """Collects mdiff output into separate lists
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_12_collect_lines, 0, __pyx_n_s_HtmlDiff__collect_lines, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__166)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_collect_lines, __pyx_t_5) < 0) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":2000
 *         return fromlist,tolist,flaglist
 * 
 *     def _format_line(self,side,flag,linenum,text):             # <<<<<<<<<<<<<<
 *         """Returns HTML markup of "from" / "to" text lines
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_14_format_line, 0, __pyx_n_s_HtmlDiff__format_line, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__168)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_format_line, __pyx_t_5) < 0) __PYX_ERR(0, 2000, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":2023
 *                % (id,linenum,text)
 * 
 *     def _make_prefix(self):             # <<<<<<<<<<<<<<
 *         """Create unique anchor prefixes"""
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_16_make_prefix, 0, __pyx_n_s_HtmlDiff__make_prefix, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__170)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_make_prefix, __pyx_t_5) < 0) __PYX_ERR(0, 2023, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":2034
 *         self._prefix = [fromprefix,toprefix]
 * 
 *     def _convert_flags(self,fromlist,tolist,flaglist,context,numlines):             # <<<<<<<<<<<<<<
 *         """Makes list of "next" links"""
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_18_convert_flags, 0, __pyx_n_s_HtmlDiff__convert_flags, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__172)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_convert_flags, __pyx_t_5) < 0) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":2081
 *         return fromlist,tolist,flaglist,next_href,next_id
 * 
 *     def make_table(self,fromlines,tolines,fromdesc='',todesc='',context=False,             # <<<<<<<<<<<<<<
 *                    numlines=5):
 *         """Returns HTML table of side by side comparison with change highlights
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_8HtmlDiff_20make_table, 0, __pyx_n_s_HtmlDiff_make_table, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__174)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__175);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_make_table, __pyx_t_5) < 0) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cydifflib.pyx":1807
 *     </table>"""
 * 
 * class HtmlDiff(object):             # <<<<<<<<<<<<<<
 *     """For producing HTML side by side comparison with change highlights.
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_HtmlDiff, __pyx_t_2, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HtmlDiff, __pyx_t_5) < 0) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":2158
 *                      replace('\t','&nbsp;')
 * 
 * del re             # <<<<<<<<<<<<<<
 * 
 * def restore(delta, which):
 */
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_re) < 0) __PYX_ERR(0, 2158, __pyx_L1_error)

  /* "cydifflib.pyx":2160
 * del re
 * 
 * def restore(delta, which):             # <<<<<<<<<<<<<<
 *     r"""
 *     Generate one of the two sequences that generated a delta.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9cydifflib_29restore, 0, __pyx_n_s_restore, NULL, __pyx_n_s_cydifflib, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_restore, __pyx_t_2) < 0) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cydifflib.pyx":1
 * """             # <<<<<<<<<<<<<<
 * Module difflib -- helpers for computing deltas between objects.
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_SequenceMatcher_set_seqs_line_27, __pyx_kp_u_Set_the_two_sequences_to_be_comp) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_SequenceMatcher_set_seq1_line_28, __pyx_kp_u_Set_the_first_sequence_to_be_com) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_SequenceMatcher_set_seq2_line_31, __pyx_kp_u_Set_the_second_sequence_to_be_co) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_SequenceMatcher_find_longest_mat_2, __pyx_kp_u_Find_longest_matching_block_in_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_SequenceMatcher_get_matching_blo_2, __pyx_kp_u_Return_list_of_triples_describin) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_SequenceMatcher_get_opcodes_line, __pyx_kp_u_Return_list_of_5_tuples_describi) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_SequenceMatcher_get_grouped_opco_2, __pyx_kp_u_Isolate_change_clusters_by_elim) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_SequenceMatcher_ratio_line_730, __pyx_kp_u_Return_a_measure_of_the_sequence) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_get_close_matches_line_799, __pyx_kp_u_Use_SequenceMatcher_to_return_li) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Differ_compare_line_974, __pyx_kp_u_Compare_two_sequences_of_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Differ__fancy_replace_line_1034, __pyx_kp_u_When_replacing_one_block_of_lin) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Differ__qformat_line_1140, __pyx_kp_u_Format_output_and_deal_with_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_IS_LINE_JUNK_line_1186, __pyx_kp_u_Return_True_for_ignorable_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_IS_CHARACTER_JUNK_line_1202, __pyx_kp_u_Return_True_for_ignorable_chara) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_unified_diff_line_1236, __pyx_kp_u_Compare_two_sequences_of_lines_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_context_diff_line_1321, __pyx_kp_u_Compare_two_sequences_of_lines_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_ndiff_line_1444, __pyx_kp_u_Compare_a_and_b_lists_of_string) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_restore_line_2160, __pyx_kp_u_Generate_one_of_the_two_sequenc) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cydifflib", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cydifflib");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_setdefault */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       int is_safe_type) {
    PyObject* value;
    CYTHON_MAYBE_UNUSED_VAR(is_safe_type);
#if PY_VERSION_HEX >= 0x030400A0
    if ((1)) {
        value = PyDict_SetDefault(d, key, default_value);
        if (unlikely(!value)) return NULL;
        Py_INCREF(value);
#else
    if (is_safe_type == 1 || (is_safe_type == -1 &&
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
            (PyUnicode_CheckExact(key) || PyString_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItemWithError(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#else
            (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#endif
#endif
    } else {
        value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_setdefault, d, key, default_value);
    }
    return value;
}

/* PyObjectCall2Args */
    static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallOneArg */
    static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
    static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
    static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
    static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
    static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod0 */
    static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
    static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
    static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
    static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
    static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* set_iter */
    static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            if (unlikely(b == -1 && ((unsigned long)a) == 0-(unsigned long)a))
                return PyInt_Type.tp_as_number->nb_floor_divide(op1, op2);
            else {
                long q, r;
                q = a / b;
                r = a - q*b;
                q -= ((r != 0) & ((r ^ b) < 0));
                x = q;
            }
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_floor_divide(op1, op2);
            }
        }
                {
                    long q, r;
                    q = a / b;
                    r = a - q*b;
                    q -= ((r != 0) & ((r ^ b) < 0));
                    x = q;
                }
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                {
                    PY_LONG_LONG q, r;
                    q = lla / llb;
                    r = lla - q*llb;
                    q -= ((r != 0) & ((r ^ llb) < 0));
                    llx = q;
                }
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceFloorDivide : PyNumber_FloorDivide)(op1, op2);
}
#endif

/* CallUnboundCMethod1 */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            if ((PY_VERSION_HEX >= 0x030700A0)) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
    static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* GetItemInt */
    static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* GetModuleGlobalName */
    #if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* KeywordStringCheck */
    static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* SetItemInt */
    static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* GetException */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* pep479 */
    static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    __Pyx_PyThreadState_declare
    #ifdef __Pyx_StopAsyncIteration_USED
    int is_async_stopiteration = 0;
    #endif
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        #ifdef __Pyx_StopAsyncIteration_USED
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, __Pyx_PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else
        #endif
            return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(val);
    Py_XDECREF(tb);
    PyErr_SetString(PyExc_RuntimeError,
        #ifdef __Pyx_StopAsyncIteration_USED
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        #endif
        "generator raised StopIteration");
}

/* RaiseClosureNameError */
    static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* DictGetItem */
    #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return PyLong_FromLong(-intval);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* StringJoin */
    #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* PyObjectSetAttrStr */
    #if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* FixUpExtensionType */
    #if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    (void) spec;
    (void) type;
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchCommonType */
    static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, type->tp_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              type->tp_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, type->tp_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, spec->name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              spec->name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    (void) module;
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, spec->name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* GetTopmostException */
    #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
    #include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    gen->is_running = 0;
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        Py_TYPE(gen)->tp_del(self);
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (likely(--self->ob_refcnt == 0)) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PyObject_GenericGetAttrNoDict */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PatchModuleWithCoroutine */
    static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
    #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (unlikely(!module)) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
    static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) __Pyx_PyObject_GenericGetAttrNoDict},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    __pyx_GeneratorType_slots
};
#else
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_Generator_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_GeneratorType_spec, NULL);
#else
    (void) module;
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
#endif
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* GeneratorYieldFrom */
    #if CYTHON_USE_TYPE_SLOTS
static void __Pyx_PyIter_CheckErrorAndDecref(PyObject *source) {
    __Pyx_TypeName source_type_name = __Pyx_PyType_GetName(Py_TYPE(source));
    PyErr_Format(PyExc_TypeError,
        "iter() returned non-iterator of type '" __Pyx_FMT_TYPENAME "'", source_type_name);
    __Pyx_DECREF_TypeName(source_type_name);
    Py_DECREF(source);
}
#endif
static CYTHON_INLINE PyObject* __Pyx_Generator_Yield_From(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *source_gen, *retval;
#ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(source)) {
        Py_INCREF(source);
        source_gen = source;
        retval = __Pyx_Generator_Next(source);
    } else
#endif
    {
#if CYTHON_USE_TYPE_SLOTS
        if (likely(Py_TYPE(source)->tp_iter)) {
            source_gen = Py_TYPE(source)->tp_iter(source);
            if (unlikely(!source_gen))
                return NULL;
            if (unlikely(!PyIter_Check(source_gen))) {
                __Pyx_PyIter_CheckErrorAndDecref(source_gen);
                return NULL;
            }
        } else
#endif
        {
            source_gen = PyObject_GetIter(source);
            if (unlikely(!source_gen))
                return NULL;
        }
        retval = __Pyx_PyObject_GetIterNextFunc(source_gen)(source_gen);
    }
    if (likely(retval)) {
        gen->yieldfrom = source_gen;
        return retval;
    }
    Py_DECREF(source_gen);
    return NULL;
}

/* ObjectGetItem */
    #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (meth) {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* RaiseUnboundLocalError */
    static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* JoinPyUnicode */
    static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyIntCompare */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* SliceObject */
    static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* PyVectorcallFastCallDict */
    #if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
    static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    cf->m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    (void) module;
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
    static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* pop_index */
    static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix) {
    PyObject *r;
    if (unlikely(!py_ix)) return NULL;
    r = __Pyx__PyObject_PopIndex(L, py_ix);
    Py_DECREF(py_ix);
    return r;
}
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix) {
    return __Pyx_PyObject_CallMethod1(L, __pyx_n_s_pop, py_ix);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix) {
    Py_ssize_t size = PyList_GET_SIZE(L);
    if (likely(size > (((PyListObject*)L)->allocated >> 1))) {
        Py_ssize_t cix = ix;
        if (cix < 0) {
            cix += size;
        }
        if (likely(__Pyx_is_valid_index(cix, size))) {
            PyObject* v = PyList_GET_ITEM(L, cix);
            __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
            size -= 1;
            memmove(&PyList_GET_ITEM(L, cix), &PyList_GET_ITEM(L, cix+1), (size_t)(size-cix)*sizeof(PyObject*));
            return v;
        }
    }
    if (py_ix == Py_None) {
        return __Pyx__PyObject_PopNewIndex(L, PyInt_FromSsize_t(ix));
    } else {
        return __Pyx__PyObject_PopIndex(L, py_ix);
    }
}
#endif

/* IterNext */
    static PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_Occurred();
    if (unlikely(exc_type)) {
        if (!defval || unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return NULL;
        __Pyx_PyErr_Clear();
        Py_INCREF(defval);
        return defval;
    }
    if (defval) {
        Py_INCREF(defval);
        return defval;
    }
    __Pyx_PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}
static void __Pyx_PyIter_Next_ErrorNoIterator(PyObject *iterator) {
    __Pyx_TypeName iterator_type_name = __Pyx_PyType_GetName(Py_TYPE(iterator));
    PyErr_Format(PyExc_TypeError,
        __Pyx_FMT_TYPENAME " object is not an iterator", iterator_type_name);
    __Pyx_DECREF_TypeName(iterator_type_name);
}
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
    if (likely(iternext)) {
#if CYTHON_USE_TYPE_SLOTS
        next = iternext(iterator);
        if (likely(next))
            return next;
        if (unlikely(iternext == &_PyObject_NextNotImplemented))
            return NULL;
#else
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
#endif
    } else if (CYTHON_USE_TYPE_SLOTS || unlikely(!PyIter_Check(iterator))) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    }
#if !CYTHON_USE_TYPE_SLOTS
    else {
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
    }
#endif
    return __Pyx_PyIter_Next2Default(defval);
}

/* SliceTupleAndList */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    return __Pyx_PyList_FromArray(((PyListObject*)src)->ob_item + start, length);
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    return __Pyx_PyTuple_FromArray(((PyTupleObject*)src)->ob_item + start, length);
}
#endif

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
    #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__57;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
#ifdef HAVE_LONG_LONG
            if (sizeof(PY_LONG_LONG) > sizeof(long)) {
                PY_LONG_LONG result = (PY_LONG_LONG)a * (PY_LONG_LONG)b;
                return (result >= LONG_MIN && result <= LONG_MAX) ?
                    PyInt_FromLong((long)result) : PyLong_FromLongLong(result);
            }
#endif
#if CYTHON_USE_TYPE_SLOTS
            return PyInt_Type.tp_as_number->nb_multiply(op1, op2);
#else
            return PyNumber_Multiply(op1, op2);
#endif
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            }
        }
                (void)a; (void)b;
                #ifdef HAVE_LONG_LONG
                lla = a;
                goto long_long;
                #else
                return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
                #endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("multiply", return NULL)
            result = ((double)a) * (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#endif

/* UnicodeConcatInPlace */
    # if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        __Pyx_GIVEREF(*p_left);
        if (unlikely(PyUnicode_Resize(p_left, new_len) != 0)) {
            __Pyx_GOTREF(*p_left);
            return NULL;
        }
        __Pyx_INCREF(*p_left);
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* ValidateBasesTuple */
    #if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
    for (i = 1; i < n; i++)
    {
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
        if (dictoffset == 0 && b->tp_dictoffset)
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "extension type '%.200s' has no __dict__ slot, "
                "but base type '" __Pyx_FMT_TYPENAME "' has: "
                "either add 'cdef dict __dict__' to the extension type "
                "or add '__slots__ = [...]' to the base type",
                type_name, b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
    }
    return 0;
}
#endif

/* PyType_Ready */
    static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    if (t->tp_bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, t->tp_bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttr */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
    static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
    static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
    #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
    #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ClassMethod */
    static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (unlikely(methoddescr_type == NULL)) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (unlikely(!meth)) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* CalculateMetaclass */
    static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* PyObjectLookupSpecial */
    #if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* Py3ClassCreate */
    static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* Py3UpdateBases */
    static PyObject*
__Pyx_PEP560_update_bases(PyObject *bases)
{
    Py_ssize_t i, j, size_bases;
    PyObject *base, *meth, *new_base, *result, *new_bases = NULL;
    size_bases = PyTuple_GET_SIZE(bases);
    for (i = 0; i < size_bases; i++) {
        base  = PyTuple_GET_ITEM(bases, i);
        if (PyType_Check(base)) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        meth = __Pyx_PyObject_GetAttrStrNoError(base, __pyx_n_s_mro_entries);
        if (!meth && PyErr_Occurred()) {
            goto error;
        }
        if (!meth) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        new_base = __Pyx_PyObject_CallOneArg(meth, bases);
        Py_DECREF(meth);
        if (!new_base) {
            goto error;
        }
        if (!PyTuple_Check(new_base)) {
            PyErr_SetString(PyExc_TypeError,
                            "__mro_entries__ must return a tuple");
            Py_DECREF(new_base);
            goto error;
        }
        if (!new_bases) {
            if (!(new_bases = PyList_New(i))) {
                goto error;
            }
            for (j = 0; j < i; j++) {
                base = PyTuple_GET_ITEM(bases, j);
                PyList_SET_ITEM(new_bases, j, base);
                Py_INCREF(base);
            }
        }
        j = PyList_GET_SIZE(new_bases);
        if (PyList_SetSlice(new_bases, j, j, new_base) < 0) {
            goto error;
        }
        Py_DECREF(new_base);
    }
    if (!new_bases) {
        Py_INCREF(bases);
        return bases;
    }
    result = PyList_AsTuple(new_bases);
    Py_DECREF(new_bases);
    return result;
error:
    Py_XDECREF(new_bases);
    return NULL;
}

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
    static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FormatTypeName */
    #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_kp_s__39));
    }
    return name;
}
#endif

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
